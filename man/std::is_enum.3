.TH std::is_enum 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_enum \- std::is_enum

.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct is_enum;

   Checks whether T is an enumeration type. Provides the member constant value which is
   equal to true, if T is an enumeration type. Otherwise, value is equal to false.

   The behavior of a program that adds specializations for is_enum
   or is_enum_v
   \fI(since C++17)\fP is undefined.

.SH Template parameters

   T - a type to check

  Helper variable template

   template< class T >                                   \fI(since C++17)\fP
   inline constexpr bool is_enum_v = is_enum<T>::value;

Inherited from std::integral_constant

.SH Member constants

   value    true if T is an enumeration type , false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Example


// Run this code

 #include <iostream>
 #include <type_traits>

 struct A { enum E { }; };

 enum E {};

 enum class Ec : int {};

 int main()
 {
     std::cout
         << std::boolalpha
         << std::is_enum<A>::value << '\\n'
         << std::is_enum<E>::value << '\\n'
         << std::is_enum<A::E>() << '\\n'
         << std::is_enum_v<int> << '\\n' // Uses helper variable template \fI(C++17)\fP
         << std::is_enum_v<Ec> << '\\n'; // Uses helper variable template \fI(C++17)\fP
 }

.SH Output:

 false
 true
 true
 false
 true

.SH See also

   is_integral    checks if a type is an integral type
   \fI(C++11)\fP        \fI(class template)\fP
   is_arithmetic  checks if a type is an arithmetic type
   \fI(C++11)\fP        \fI(class template)\fP
   is_scalar      checks if a type is a scalar type
   \fI(C++11)\fP        \fI(class template)\fP
   is_scoped_enum checks if a type is a scoped enumeration type
   (C++23)        \fI(class template)\fP
