.TH std::filesystem::read_symlink 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::filesystem::read_symlink \- std::filesystem::read_symlink

.SH Synopsis
   Defined in header <filesystem>
   std::filesystem::path read_symlink(const std::filesystem::path& p);

   std::filesystem::path read_symlink(const std::filesystem::path& p,   \fI(since C++17)\fP

   std::error_code& ec);

   If the path p refers to a symbolic link, returns a new path object which refers to
   the target of that symbolic link.

   It is an error if p does not refer to a symbolic link.

   The non-throwing overload returns an empty path on errors.

.SH Parameters

   p  - path to a symlink
   ec - out-parameter for error reporting in the non-throwing overload

.SH Return value

   The target of the symlink (which may not necessarily exist)

.SH Exceptions

   The overload that does not take a std::error_code& parameter throws
   filesystem::filesystem_error on underlying OS API errors, constructed with p as the
   first path argument and the OS error code as the error code argument. The overload
   taking a std::error_code& parameter sets it to the OS API error code if an OS API
   call fails, and executes ec.clear() if no errors occur. Any overload not marked
   noexcept may throw std::bad_alloc if memory allocation fails.

.SH Example


// Run this code

 #include <iostream>
 #include <filesystem>

 namespace fs = std::filesystem;

 int main()
 {
     for(fs::path p : {"/usr/bin/gcc", "/bin/cat", "/bin/mouse"}) {
         std::cout << p;
         fs::exists(p)
             ? fs::is_symlink(p)
             ? std::cout << " -> " << fs::read_symlink(p) << '\\n'
             : std::cout << " exists but it is not a symlink\\n"
             : std::cout << " does not exist\\n";
     }
 }

.SH Possible output:

 "/usr/bin/gcc" -> "gcc-5"
 "/bin/cat" exists but it is not a symlink
 "/bin/mouse" does not exist

.SH See also

   is_symlink               checks whether the argument refers to a symbolic link
   \fI(C++17)\fP                  \fI(function)\fP
   create_symlink
   create_directory_symlink creates a symbolic link
   \fI(C++17)\fP                  \fI(function)\fP
   \fI(C++17)\fP
   copy_symlink             copies a symbolic link
   \fI(C++17)\fP                  \fI(function)\fP
   status                   determines file attributes
   symlink_status           determines file attributes, checking the symlink target
   \fI(C++17)\fP                  \fI(function)\fP
   \fI(C++17)\fP
