.TH std::basic_string::c_str 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_string::c_str \- std::basic_string::c_str

.SH Synopsis
   const CharT* c_str() const;                     \fI(until C++11)\fP
   const CharT* c_str() const noexcept;            \fI(since C++11)\fP
                                                   \fI(until C++20)\fP
   constexpr const CharT* c_str() const noexcept;  \fI(since C++20)\fP

   Returns a pointer to a null-terminated character array with data equivalent to those
   stored in the string.

   The pointer is such that the range [c_str(); c_str() + size()] is valid and the
   values in it correspond to the values stored in the string with an additional null
   character after the last position.

   The pointer obtained from c_str() may be invalidated by:

     * Passing a non-const reference to the string to any standard library function, or
     * Calling non-const member functions on the string
       , excluding operator[], at(), front(), back(), begin(), rbegin(), end() and
       rend()
       \fI(since C++11)\fP.

   Writing to the character array accessed through c_str() is undefined behavior.

   c_str() and data() perform the same function. \fI(since C++11)\fP

.SH Parameters

   \fI(none)\fP

.SH Return value

   Pointer to the underlying character storage.

   c_str()[i] == operator[](i) for every i in [0, size()).                \fI(until C++11)\fP
   c_str() + i == std::addressof(operator[](i)) for every i in [0,        \fI(since C++11)\fP
   size()].

.SH Complexity

   Constant.

.SH Notes

   The pointer obtained from c_str() may only be treated as a pointer to a
   null-terminated character string if the string object does not contain other null
   characters.

.SH Example


// Run this code

 #include <algorithm>
 #include <cassert>
 #include <cstring>
 #include <string>

 extern "C" {
 void c_func(const char* c_str) { printf("c_func called with '%s'\\n", c_str); }
 }

 int main() {
   std::string const s("Emplary");
   const char* p = s.c_str();
   assert(s.size() == std::strlen(p));
   assert(std::equal(s.begin(), s.end(), p));
   assert(std::equal(p, p + s.size(), s.begin()));
   assert('\\0' == *(p + s.size()));

   c_func(s.c_str());
 }

.SH Output:

 c_func called with 'Emplary'

.SH See also

   front   accesses the first character
   \fI(C++11)\fP \fI(public member function)\fP
   back    accesses the last character
   \fI(C++11)\fP \fI(public member function)\fP
   data    returns a pointer to the first character of a string
           \fI(public member function)\fP
