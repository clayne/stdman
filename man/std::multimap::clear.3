.TH std::multimap::clear 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::multimap::clear \- std::multimap::clear

.SH Synopsis
   void clear();           \fI(until C++11)\fP
   void clear() noexcept;  \fI(since C++11)\fP

   Erases all elements from the container. After this call, size() returns zero.

   Invalidates any references, pointers, or iterators referring to contained elements.
   Any past-the-end iterator remains valid.

.SH Parameters

   \fI(none)\fP

.SH Return value

   \fI(none)\fP

.SH Complexity

   Linear in the size of the container, i.e., the number of elements.

.SH Example


// Run this code

 #include <algorithm>
 #include <iostream>
 #include <map>

 int main()
 {
     std::multimap<int, char> container{{1, 'x'}, {2, 'y'}, {3, 'z'}};

     auto print = [](std::pair<const int, char>& n) {
         std::cout << " " << n.first << '(' << n.second << ')';
     };

     std::cout << "Before clear:";
     std::for_each(container.begin(), container.end(), print);
     std::cout << "\\nSize=" << container.size() << '\\n';

     std::cout << "Clear\\n";
     container.clear();

     std::cout << "After clear:";
     std::for_each(container.begin(), container.end(), print);
     std::cout << "\\nSize=" << container.size() << '\\n';
 }

.SH Output:

 Before clear: 1(x) 2(y) 3(z)
 Size=3
 Clear
 After clear:
 Size=0

.SH See also

   erase erases elements
         \fI(public member function)\fP
