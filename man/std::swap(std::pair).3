.TH std::swap(std::pair) 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::swap(std::pair) \- std::swap(std::pair)

.SH Synopsis
   Defined in header <utility>
   template< class T1, class T2 >                                         \fI(since C++11)\fP
   void swap( std::pair<T1,T2>& x, std::pair<T1,T2>& y )                  \fI(until C++20)\fP
   noexcept(/* see below */);
   template< class T1, class T2 >

   constexpr void swap( std::pair<T1,T2>& x, std::pair<T1,T2>& y          \fI(since C++20)\fP
   )
                                                                  \fB(1)\fP
   noexcept(/* see below */);
   template< class T1, class T2 >

   constexpr void swap( const std::pair<T1,T2>& x, const              \fB(2)\fP (since C++23)
   std::pair<T1,T2>& y )

   noexcept(/* see below */);

   Swaps the contents of x and y. Equivalent to x.swap(y).

   1) This overload participates in overload resolution only if
   std::is_swappable_v<first_type> && std::is_swappable_v<second_type> is
   true.                                                                  \fI(since C++17)\fP
   2) This overload participates in overload resolution only if
   std::is_swappable_v<const first_type> && std::is_swappable_v<const
   second_type> is true.

.SH Parameters

   x, y - pairs whose contents to swap

.SH Return value

   \fI(none)\fP

.SH Exceptions

   noexcept specification:
   noexcept(noexcept(x.swap(y)))

.SH See also

   swap                  swaps the values of two objects
                         \fI(function template)\fP
   std::swap(std::tuple) specializes the std::swap algorithm
   \fI(C++11)\fP               \fI(function template)\fP
