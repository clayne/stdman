.TH std::is_polymorphic 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_polymorphic \- std::is_polymorphic

.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct is_polymorphic;

   If T is a polymorphic class (that is, a non-union class that declares or inherits at
   least one virtual function), provides the member constant value equal to true. For
   any other type, value is false.

   If T is a non-union class type, T shall be a complete type; otherwise, the behavior
   is undefined.

   The behavior of a program that adds specializations for is_polymorphic
   or is_polymorphic_v
   \fI(since C++17)\fP is undefined.

.SH Template parameters

   T - a type to check

  Helper variable template

   template< class T >                                                 \fI(since C++17)\fP
   inline constexpr bool is_polymorphic_v = is_polymorphic<T>::value;

Inherited from std::integral_constant

.SH Member constants

   value    true if T is a polymorphic class type , false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Possible implementation

   namespace detail {

   template <class T>
   std::true_type detect_is_polymorphic(
       decltype(dynamic_cast<const volatile void*>(static_cast<T*>(nullptr)))
   );
   template <class T>
   std::false_type detect_is_polymorphic(...);

   } // namespace detail

   template <class T>
   struct is_polymorphic : decltype(detail::detect_is_polymorphic<T>(nullptr)) {};

.SH Example


// Run this code

 #include <iostream>
 #include <type_traits>

 struct A {
     int m;
 };

 struct B {
     virtual void foo();
 };

 struct C : B {};

 struct D {
     virtual ~D() = default;
 };

 int main()
 {
     std::cout << std::boolalpha
               << std::is_polymorphic<A>::value << ' '
               << std::is_polymorphic<B>::value << ' '
               << std::is_polymorphic<C>::value << ' '
               << std::is_polymorphic<D>::value << '\\n';
 }

.SH Output:

 false true true true

.SH See also

   is_class               checks if a type is a non-union class type
   \fI(C++11)\fP                \fI(class template)\fP
   is_abstract            checks if a type is an abstract class type
   \fI(C++11)\fP                \fI(class template)\fP
   has_virtual_destructor checks if a type has a virtual destructor
   \fI(C++11)\fP                \fI(class template)\fP
