.TH std::vector::shrink_to_fit 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::vector::shrink_to_fit \- std::vector::shrink_to_fit

.SH Synopsis
   void shrink_to_fit();            \fI(since C++11)\fP
                                    \fI(until C++20)\fP
   constexpr void shrink_to_fit();  \fI(since C++20)\fP

   Requests the removal of unused capacity.

   It is a non-binding request to reduce capacity() to size(). It depends on the
   implementation whether the request is fulfilled.

   If reallocation occurs, all iterators, including the past the end iterator, and all
   references to the elements are invalidated. If no reallocation takes place, no
   iterators or references are invalidated.

.SH Parameters

   \fI(none)\fP

.SH Type requirements
   -
   T must meet the requirements of MoveInsertable.

.SH Return value

   \fI(none)\fP

.SH Complexity

   At most linear in the size of the container.

.SH Notes

   If an exception is thrown other than by T's move constructor, there are no effects.

.SH Example


// Run this code

 #include <iostream>
 #include <vector>

 int main()
 {
     std::vector<int> v;
     std::cout << "Default-constructed capacity is " << v.capacity() << '\\n';
     v.resize(100);
     std::cout << "Capacity of a 100-element vector is " << v.capacity() << '\\n';
     v.resize(50);
     std::cout << "Capacity after resize(50) is " << v.capacity() << '\\n';
     v.shrink_to_fit();
     std::cout << "Capacity after shrink_to_fit() is " << v.capacity() << '\\n';
     v.clear();
     std::cout << "Capacity after clear() is " << v.capacity() << '\\n';
     v.shrink_to_fit();
     std::cout << "Capacity after shrink_to_fit() is " << v.capacity() << '\\n';
     for (int i = 1000; i < 1300; ++i)
         v.push_back(i);
     std::cout << "Capacity after adding 300 elements is " << v.capacity() << '\\n';
     v.shrink_to_fit();
     std::cout << "Capacity after shrink_to_fit() is " << v.capacity() << '\\n';
 }

.SH Possible output:

 Default-constructed capacity is 0
 Capacity of a 100-element vector is 100
 Capacity after resize(50) is 100
 Capacity after shrink_to_fit() is 50
 Capacity after clear() is 50
 Capacity after shrink_to_fit() is 0
 Capacity after adding 300 elements is 512
 Capacity after shrink_to_fit() is 300

.SH See also

   size     returns the number of elements
            \fI(public member function)\fP
            returns the number of elements that can be held in currently allocated
   capacity storage
            \fI(public member function)\fP
