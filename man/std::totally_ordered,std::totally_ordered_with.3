.TH std::totally_ordered,std::totally_ordered_with 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::totally_ordered,std::totally_ordered_with \- std::totally_ordered,std::totally_ordered_with

.SH Synopsis
   Defined in header <concepts>
   template<class T>

   concept totally_ordered =                                    \fB(1)\fP \fI(since C++20)\fP

   std::equality_comparable<T> && __PartiallyOrderedWith<T, T>;
   template<class T, class U>

   concept totally_ordered_with =
   std::totally_ordered<T> &&
   std::totally_ordered<U> &&
   std::equality_comparable_with<T, U> &&                       \fB(2)\fP \fI(since C++20)\fP
   std::totally_ordered<
   std::common_reference_t<
   const std::remove_reference_t<T>&,
   const std::remove_reference_t<U>&>> &&

   __PartiallyOrderedWith<T, U>;
   template<class T, class U>

   concept __PartiallyOrderedWith = // exposition only
   requires(const std::remove_reference_t<T>& t,
   const std::remove_reference_t<U>& u) {
   { t < u } -> boolean-testable;
   { t > u } -> boolean-testable;
   { t <= u } -> boolean-testable;                              \fB(3)\fP \fI(since C++20)\fP
   { t >= u } -> boolean-testable;
   { u < t } -> boolean-testable;
   { u > t } -> boolean-testable;
   { u <= t } -> boolean-testable;
   { u >= t } -> boolean-testable;

   };

   1) The concept std::totally_ordered specifies that the comparison operators
   ==,!=,<,>,<=,>= on a type yield results consistent with a strict total order on the
   type.
   2) The concept std::totally_ordered_with specifies that the comparison operators
   ==,!=,<,>,<=,>= on (possibly mixed) T and U operands yield results consistent with a
   strict total order. Comparing mixed operands yields results equivalent to comparing
   the operands converted to their common type.
   3) The exposition-only concept __PartiallyOrderedWith specifies that a value of type
   T and a value of type U can be compared in a partial order with each other (in
   either order) using <, >, <=, and >=, and the results of the comparisons are
   consistent.

  Semantic requirements

   These concepts are modeled only if they are satisified and all concepts they subsume
   are modeled.

   1) std::totally_ordered<T> is modeled only if, given lvalues a, b and c of type
   const std::remove_reference_t<T>:

     * Exactly one of bool(a < b), bool(a > b) and bool(a == b) is true;
     * If bool(a < b) and bool(b < c) are both true, then bool(a < c) is true;
     * bool(a > b) == bool(b < a)
     * bool(a >= b) == !bool(a < b)
     * bool(a <= b) == !bool(b < a)

   2) std::totally_ordered_with<T, U> is modeled only if, given

     * any lvalue t of type const std::remove_reference_t<T>, and
     * any lvalue u of type const std::remove_reference_t<U>,

   and let C be std::common_reference_t<const std::remove_reference_t<T>&, const
   std::remove_reference_t<U>&>:

     * bool(t < u) == bool(C(t) < C(u))
     * bool(t > u) == bool(C(t) > C(u))
     * bool(t <= u) == bool(C(t) <= C(u))
     * bool(t >= u) == bool(C(t) >= C(u))
     * bool(u < t) == bool(C(u) < C(t))
     * bool(u > t) == bool(C(u) > C(t))
     * bool(u <= t) == bool(C(u) <= C(t))
     * bool(u >= t) == bool(C(u) >= C(t))

   3) __PartiallyOrderedWith<T, U> is modeled only if given

     * any lvalue t of type const std::remove_reference_t<T>, and
     * any lvalue u of type const std::remove_reference_t<U>,

   the following are true:

     * t < u, t <= u, t > u, t >= u, u < t, u <= t, u > t, and u >= t have the same
       domain;
     * bool(t < u) == bool(u > t);
     * bool(u < t) == bool(t > u);
     * bool(t <= u) == bool(u >= t); and
     * bool(u <= t) == bool(t >= u).

  Equality preservation

   An expression is equality preserving if it results in equal outputs given equal
   inputs.

     * The inputs to an expression consist of its operands.
     * The outputs of an expression consist of its result and all operands modified by
       the expression (if any).

   In specification of standard concepts, operands are defined as the largest
   subexpressions that include only:

     * an id-expression, and
     * invocations of std::move, std::forward, and std::declval.

   The cv-qualification and value category of each operand is determined by assuming
   that each template type parameter denotes a cv-unqualified complete non-array object
   type.

   Every expression required to be equality preserving is further required to be
   stable: two evaluations of such an expression with the same input objects must have
   equal outputs absent any explicit intervening modification of those input objects.

   Unless noted otherwise, every expression used in a requires-expression is required
   to be equality preserving and stable, and the evaluation of the expression may
   modify only its non-constant operands. Operands that are constant must not be
   modified.

  Implicit expression variations

   A requires-expression that uses an expression that is non-modifying for some
   constant lvalue operand also implicitly requires additional variations of that
   expression that accept a non-constant lvalue or (possibly constant) rvalue for the
   given operand unless such an expression variation is explicitly required with
   differing semantics. These implicit expression variations must meet the same
   semantic requirements of the declared expression. The extent to which an
   implementation validates the syntax of the variations is unspecified.
