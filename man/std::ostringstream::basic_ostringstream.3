.TH std::basic_ostringstream::basic_ostringstream 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_ostringstream::basic_ostringstream \- std::basic_ostringstream::basic_ostringstream

.SH Synopsis
   basic_ostringstream()                                            \fB(1)\fP (since
   : basic_ostringstream(std::ios_base::out) { }                        C++11)
   explicit basic_ostringstream( std::ios_base::openmode mode =                 (until
   std::ios_base::out );                                                        C++11)
   explicit basic_ostringstream( std::ios_base::openmode mode );                (since
                                                                                C++11)
   explicit basic_ostringstream( const
   std::basic_string<CharT,Traits,Allocator>& str,                      \fB(3)\fP
   std::ios_base::openmode mode = std::ios_base::out );
   basic_ostringstream( basic_ostringstream&& other );                  \fB(4)\fP     (since
                                                                                C++11)
   basic_ostringstream( std::ios_base::openmode mode, const             \fB(5)\fP     (since
   Allocator& a );                                                              C++20)
   explicit basic_ostringstream(                                                (since
   std::basic_string<CharT,Traits,Allocator>&& str,                     \fB(6)\fP     C++20)
   std::ios_base::openmode mode = std::ios_base::out );
   template<class SAlloc>

   basic_ostringstream( const                                       \fB(2)\fP         (since
   std::basic_string<CharT,Traits,SAlloc>& str,                         \fB(7)\fP     C++20)
   const Allocator& a )

   : basic_ostringstream(str, std::ios_base::out, a) { }
   template<class SAlloc>

   basic_ostringstream( const                                           \fB(8)\fP     (since
   std::basic_string<CharT,Traits,SAlloc>& str,                                 C++20)

   std::ios_base::openmode mode, const Allocator& a );
   template<class SAlloc>

   explicit basic_ostringstream( const                                  \fB(9)\fP     (since
   std::basic_string<CharT,Traits,SAlloc>& str,                                 C++20)

   std::ios_base::openmode mode = std::ios_base::out );

   Constructs new string stream.

   1) Default constructor. Constructs new underlying string device with the default
   open mode
   2) Constructs new underlying string device. The underlying basic_stringbuf object is
   constructed as basic_stringbuf<Char,Traits,Allocator>(mode | std::ios_base::out).
   3) Uses a copy of str as initial contents of the underlying string device. The
   underlying basic_stringbuf object is constructed as
   basic_stringbuf<Char,Traits,Allocator>(str, mode | std::ios_base::out).
   4) Move constructor. Constructs the string stream with the state of other using move
   semantics.
   5) Constructs new underlying string device. The underlying basic_stringbuf object is
   constructed as basic_stringbuf<Char,Traits,Allocator>(mode | std::ios_base::out, a).
   6) Move-construct the contents of the underlying string device with str. The
   underlying basic_stringbuf object is constructed as
   basic_stringbuf<Char,Traits,Allocator>(std::move(str), mode | std::ios_base::out).
   7) Constructs new underlying string device. The underlying basic_stringbuf object is
   constructed as basic_stringbuf<Char,Traits,Allocator>(str, std::ios_base::out, a).
   8) Constructs new underlying string device. The underlying basic_stringbuf object is
   constructed as basic_stringbuf<Char,Traits,Allocator>(str, mode |
   std::ios_base::out, a).
   9) Constructs new underlying string device. The underlying basic_stringbuf object is
   constructed as basic_stringbuf<Char,Traits,Allocator>(str, mode |
   std::ios_base::out). This overload participates in overload resolution only if
   SAlloc and Allocator are not the same type.

.SH Parameters

   str   - string to use as initial contents of the string stream
   a     - allocator used for allocating the contents of the string stream
           specifies stream open mode. It is bitmask type, the following constants are
           defined:

           Constant Explanation
   mode  - app      seek to the end of stream before each write
           binary   open in binary mode
           in       open for reading
           out      open for writing
           trunc    discard the contents of the stream when opening
           ate      seek to the end of stream immediately after open
   other - another string stream to use as source

.SH Notes

   Construction of one-off basic_ostringstream objects in a tight loop, such as when
   used for string conversion, may be significantly more costly than calling str to
   reuse the same object.

.SH Example


// Run this code

 #include <iostream>
 #include <sstream>
 int main()
 {
     // default constructor (input/output stream)
     std::stringstream buf1;
     buf1 << 7;
     int n = 0;
     buf1 >> n;
     std::cout << "buf1 = " << buf1.str() << " n = " << n << '\\n';

     // input stream
     std::istringstream inbuf("-10");
     inbuf >> n;
     std::cout << "n = " << n << '\\n';

     // output stream in append mode \fI(C++11)\fP
     std::ostringstream buf2("test", std::ios_base::ate);
     buf2 << '1';
     std::cout << buf2.str() << '\\n';
 }

.SH Output:

 buf1 = 7 n = 7
 n = -10
 test1

  Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

     DR    Applied to      Behavior as published       Correct behavior
   P0935R0 C++11      default constructor was explicit made implicit

.SH See also

   str           gets or sets the contents of underlying string device object
                 \fI(public member function)\fP
                 constructs a basic_stringbuf object
   constructor   \fI\fI(public member\fP function of\fP
                 std::basic_stringbuf<CharT,Traits,Allocator>)
