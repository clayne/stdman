.TH std::vector::at 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::vector::at \- std::vector::at

.SH Synopsis
   reference at( size_type pos );                        \fI(until C++20)\fP
   constexpr reference at( size_type pos );              \fI(since C++20)\fP
   const_reference at( size_type pos ) const;            \fI(until C++20)\fP
   constexpr const_reference at( size_type pos ) const;  \fI(since C++20)\fP

   Returns a reference to the element at specified location pos, with bounds checking.

   If pos is not within the range of the container, an exception of type
   std::out_of_range is thrown.

.SH Parameters

   pos - position of the element to return

.SH Return value

   Reference to the requested element.

.SH Exceptions

   std::out_of_range if !(pos < size()).

.SH Complexity

   Constant.

.SH Example


// Run this code

 #include <iostream>
 #include <vector>

 int main()
 {
     std::vector<int> data = { 1, 2, 4, 5, 5, 6 };

     // Set element 1
     data.at(1) = 88;

     // Read element 2
     std::cout << "Element at index 2 has value " << data.at(2) << '\\n';

     std::cout << "data size = " << data.size() << '\\n';

     try {
         // Set element 6
         data.at(6) = 666;
     } catch (std::out_of_range const& exc) {
         std::cout << exc.what() << '\\n';
     }

     // Print final values
     std::cout << "data:";
     for (int elem : data)
         std::cout << " " << elem;
     std::cout << '\\n';
 }

.SH Possible output:

 Element at index 2 has value 4
 data size = 6
 vector::_M_range_check: __n (which is 6) >= this->size() (which is 6)
 data: 1 88 4 5 5 6

.SH See also

   operator[] access specified element
              \fI(public member function)\fP
