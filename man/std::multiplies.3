.TH std::multiplies 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::multiplies \- std::multiplies

.SH Synopsis
   Defined in header <functional>
   template< class T >             \fI(until C++14)\fP
   struct multiplies;
   template< class T = void >      \fI(since C++14)\fP
   struct multiplies;

   Function object for performing multiplication. Effectively calls operator* on two
   instances of type T.

.SH Specializations

   The standard library provides a specialization of std::multiplies when
   T is not specified, which leaves the parameter types and return type
   to be deduced.
                                                                          \fI(since C++14)\fP
   multiplies<void> function object implementing x * y deducing argument
   \fI(C++14)\fP          and return types
                    \fI(class template specialization)\fP

.SH Member types

   Type                                                         Definition
   result_type (deprecated in C++17)(removed in C++20)          T
   first_argument_type (deprecated in C++17)(removed in C++20)  T
   second_argument_type (deprecated in C++17)(removed in C++20) T

   These member types are obtained via publicly inheriting                \fI(until C++11)\fP
   std::binary_function<T, T, T>.

.SH Member functions

   operator() returns the product of two arguments
              \fI(public member function)\fP

std::multiplies::operator()

   T operator()( const T& lhs, const T& rhs ) const;            \fI(until C++14)\fP
   constexpr T operator()( const T& lhs, const T& rhs ) const;  \fI(since C++14)\fP

   Returns the product of lhs and rhs.

.SH Parameters

   lhs, rhs - values to multiply

.SH Return value

   The result of lhs * rhs.

.SH Exceptions

   May throw implementation-defined exceptions.

.SH Possible implementation

   constexpr T operator()(const T &lhs, const T &rhs) const
   {
       return lhs * rhs;
   }
