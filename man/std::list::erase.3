.TH std::list::erase 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::list::erase \- std::list::erase

.SH Synopsis
   iterator erase( iterator pos );                          \fI(until C++11)\fP
   iterator erase( const_iterator pos );                    \fI(since C++11)\fP
   iterator erase( iterator first, iterator last ); \fB(1)\fP                   \fI(until C++11)\fP
   iterator erase( const_iterator first,                \fB(2)\fP               \fI(since C++11)\fP
   const_iterator last );

   Erases the specified elements from the container.

   1) Removes the element at pos.
   2) Removes the elements in the range [first, last).

   References and iterators to the erased elements are invalidated. Other references
   and iterators are not affected.

   The iterator pos must be valid and dereferenceable. Thus the end() iterator (which
   is valid, but is not dereferenceable) cannot be used as a value for pos.

   The iterator first does not need to be dereferenceable if first==last: erasing an
   empty range is a no-op.

.SH Parameters

   pos         - iterator to the element to remove
   first, last - range of elements to remove

.SH Return value

   Iterator following the last removed element.

   If pos refers to the last element, then the end() iterator is returned.

   If last==end() prior to removal, then the updated end() iterator is returned.

   If [first, last) is an empty range, then last is returned.

.SH Exceptions

   \fI(none)\fP

.SH Complexity

   1) Constant.
   2) Linear in the distance between first and last.

.SH Example


// Run this code

 #include <list>
 #include <iostream>
 #include <iterator>

 void print_container(const std::list<int>& c)
 {
     for (int i : c) {
         std::cout << i << " ";
     }
     std::cout << '\\n';
 }

 int main( )
 {
     std::list<int> c{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
     print_container(c);

     c.erase(c.begin());
     print_container(c);

     std::list<int>::iterator range_begin = c.begin();
     std::list<int>::iterator range_end = c.begin();
     std::advance(range_begin,2);
     std::advance(range_end,5);

     c.erase(range_begin, range_end);
     print_container(c);

     // Erase all even numbers (C++11 and later)
     for (std::list<int>::iterator it = c.begin(); it != c.end(); ) {
         if (*it % 2 == 0) {
             it = c.erase(it);
         } else {
             ++it;
         }
     }
     print_container(c);
 }

.SH Output:

 0 1 2 3 4 5 6 7 8 9
 1 2 3 4 5 6 7 8 9
 1 2 6 7 8 9
 1 7 9

.SH See also

   clear clears the contents
         \fI(public member function)\fP
