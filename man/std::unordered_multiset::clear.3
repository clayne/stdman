.TH std::unordered_multiset::clear 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::unordered_multiset::clear \- std::unordered_multiset::clear

.SH Synopsis
   void clear() noexcept;  \fI(since C++11)\fP

   Erases all elements from the container. After this call, size() returns zero.

   Invalidates any references, pointers, or iterators referring to contained elements.
   May also invalidate past-the-end iterators.

.SH Parameters

   \fI(none)\fP

.SH Return value

   \fI(none)\fP

.SH Complexity

   Linear in the size of the container, i.e., the number of elements.

.SH Example


// Run this code

 #include <algorithm>
 #include <iostream>
 #include <unordered_set>

 int main()
 {
     std::unordered_multiset<int> container{1, 2, 3};

     auto print = [](const int& n) { std::cout << " " << n; };

     std::cout << "Before clear:";
     std::for_each(container.begin(), container.end(), print);
     std::cout << "\\nSize=" << container.size() << '\\n';

     std::cout << "Clear\\n";
     container.clear();

     std::cout << "After clear:";
     std::for_each(container.begin(), container.end(), print);
     std::cout << "\\nSize=" << container.size() << '\\n';
 }

.SH Possible output:

 Before clear: 1 2 3
 Size=3
 Clear
 After clear:
 Size=0

  Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

      DR    Applied to       Behavior as published              Correct behavior
                       for unordered associative
   LWG 2550 C++11      containers, unclear if complexity  clarified that it's linear in
                       is linear in the number of         the number of elements
                       elements or buckets

.SH See also

   erase   erases elements
   \fI(C++11)\fP \fI(public member function)\fP
