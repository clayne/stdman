.TH std::ranges::not_equal_to 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ranges::not_equal_to \- std::ranges::not_equal_to

.SH Synopsis
   Defined in header <functional>
   struct not_equal_to;            \fI(since C++20)\fP

   Function object for performing comparisons. Deduces the parameter types of the
   function call operator from the arguments (but not the return type).

  Implementation-defined strict total order over pointers

   The function call operator yields the implementation-defined strict total order over
   pointers if the = operator between arguments invokes a built-in comparison operator
   for a pointer, even if the built-in = operator does not.

   The implementation-defined strict total order is consistent with the partial order
   imposed by built-in comparison operators (<=>, <, >, <=, and >=), and consistent
   among following standard function objects:

     * std::less, std::greater, std::less_equal, and std::greater_equal, when the
       template argument is a pointer type or void

     * std::ranges::equal_to, std::ranges::not_equal_to, std::ranges::less,
       std::ranges::greater, std::ranges::less_equal, std::ranges::greater_equal, and
       std::compare_three_way

.SH Member types

   Member type    Definition
   is_transparent /* unspecified */

.SH Member functions

   operator() checks if the arguments are not equal
              \fI(public member function)\fP

std::ranges::not_equal_to::operator()

   template< class T, class U >

   requires std::equality_comparable_with<T, U> // with different sematic
   requirements

   constexpr bool operator()(T&& t, U&& u) const;

   Compares t and u. Equivalent to return !ranges::equal_to{}(std::forward<T>(t),
   std::forward<U>(u));.

.SH Notes

   Unlike std::not_equal_to, std::ranges::not_equal_to requires both == and != to be
   valid (via the equality_comparable_with constraint), and is entirely defined in
   terms of std::ranges::equal_to.

.SH Example

    This section is incomplete
    Reason: no example

  Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

      DR    Applied to         Behavior as published              Correct behavior
   LWG 3530 C++20      syntactic checks were relaxed while   only semantic requirements
                       comparing pointers                    relaxed

.SH See also

   not_equal_to function object implementing x != y
                \fI(class template)\fP
