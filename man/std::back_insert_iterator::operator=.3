.TH std::back_insert_iterator::operator= 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::back_insert_iterator::operator= \- std::back_insert_iterator::operator=

.SH Synopsis
   back_insert_iterator<Container>&
   operator=( typename Container::const_reference           \fI(until C++11)\fP
   value );
   back_insert_iterator<Container>&                         \fI(since C++11)\fP
   operator=( const typename Container::value_type&         \fI(until C++20)\fP
   value );
   constexpr back_insert_iterator<Container>&
   operator=( const typename Container::value_type& \fB(1)\fP     \fI(since C++20)\fP
   value );
   back_insert_iterator<Container>&                                       \fI(since C++11)\fP
   operator=( typename Container::value_type&&                            \fI(until C++20)\fP
   value );                                             \fB(2)\fP
   constexpr back_insert_iterator<Container>&
   operator=( typename Container::value_type&&                            \fI(since C++20)\fP
   value );

   Inserts the given value value to the container.

   1) Results in container->push_back(value)
   2) Results in container->push_back(std::move(value))

.SH Parameters

   value - the value to insert

.SH Return value

   *this

.SH Example


// Run this code

 #include <iostream>
 #include <iterator>
 #include <deque>

 int main()
 {
     std::deque<int> q;
     std::back_insert_iterator< std::deque<int> > it(q);

     for (int i=0; i<10; ++i)
         it = i; // calls q.push_back(i)

     for (auto& elem : q) std::cout << elem << ' ';
 }

.SH Output:

 0 1 2 3 4 5 6 7 8 9
