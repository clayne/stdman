.TH std::input_or_output_iterator 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::input_or_output_iterator \- std::input_or_output_iterator

.SH Synopsis
   Defined in header <iterator>
   template <class I>

   concept input_or_output_iterator =
   requires(I i) {                     \fI(since C++20)\fP
   { *i } -> /*can-reference*/;
   } &&

   std::weakly_incrementable<I>;

   The input_or_output_iterator concept forms the basis of the iterator concept
   taxonomy; every iterator type satisfies the input_or_output_iterator requirements.

   The exposition-only concept /*can-reference*/ is satisfied if and only if the type
   is referenceable (in particular, not void).

  Equality preservation

   An expression is equality preserving if it results in equal outputs given equal
   inputs.

     * The inputs to an expression consist of its operands.
     * The outputs of an expression consist of its result and all operands modified by
       the expression (if any).

   In specification of standard concepts, operands are defined as the largest
   subexpressions that include only:

     * an id-expression, and
     * invocations of std::move, std::forward, and std::declval.

   The cv-qualification and value category of each operand is determined by assuming
   that each template type parameter denotes a cv-unqualified complete non-array object
   type.

   Every expression required to be equality preserving is further required to be
   stable: two evaluations of such an expression with the same input objects must have
   equal outputs absent any explicit intervening modification of those input objects.

   Unless noted otherwise, every expression used in a requires-expression is required
   to be equality preserving and stable, and the evaluation of the expression may
   modify only its non-constant operands. Operands that are constant must not be
   modified.

.SH Notes

   input_or_output_iterator itself only specifies operations for dereferencing and
   incrementing an iterator. Most algorithms will require additional operations, for
   example:

     * comparing iterators with sentinels (see sentinel_for);
     * reading values from an iterator (see indirectly_readable and input_iterator)
     * writing values to an iterator (see indirectly_writable and output_iterator)
     * a richer set of iterator movements (see forward_iterator,
       bidirectional_iterator, random_access_iterator)

   Unlike the LegacyIterator requirements, the input_or_output_iterator concept does
   not require copyability.
