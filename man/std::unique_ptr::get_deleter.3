.TH std::unique_ptr::get_deleter 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::unique_ptr::get_deleter \- std::unique_ptr::get_deleter

.SH Synopsis
   Deleter& get_deleter() noexcept;              \fI(since C++11)\fP
                                                 (constexpr since C++23)
   const Deleter& get_deleter() const noexcept;  \fI(since C++11)\fP
                                                 (constexpr since C++23)

   Returns the deleter object which would be used for destruction of the managed
   object.

.SH Parameters

   \fI(none)\fP

.SH Return value

   The stored deleter object.

.SH Example


// Run this code

 #include <iostream>
 #include <memory>

 struct Foo
 {
     Foo() { std::cout << "Foo...\\n"; }
     ~Foo() { std::cout << "~Foo...\\n"; }
 };

 struct D
 {
     void bar() { std::cout << "Call deleter D::bar()...\\n"; }
     void operator()(Foo* p) const
     {
         std::cout << "Call delete for Foo object...\\n";
         delete p;
     }
 };

 int main()
 {
     std::unique_ptr<Foo, D> up(new Foo(), D());
     D& del = up.get_deleter();
     del.bar();
 }

.SH Output:

 Foo...
 Call deleter D::bar()...
 Call delete for Foo object...
 ~Foo...

.SH See also

   get_deleter returns the deleter of specified type, if owned
               \fI(function template)\fP
