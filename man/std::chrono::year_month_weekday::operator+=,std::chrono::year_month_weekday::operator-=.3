.TH std::chrono::year_month_weekday::operator+=,std::chrono::year_month_weekday::operator-= 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::chrono::year_month_weekday::operator+=,std::chrono::year_month_weekday::operator-= \- std::chrono::year_month_weekday::operator+=,std::chrono::year_month_weekday::operator-=

.SH Synopsis
   constexpr std::chrono::year_month_weekday&                  \fB(1)\fP \fI(since C++20)\fP
   operator+=( const std::chrono::years& dy ) const noexcept;
   constexpr std::chrono::year_month_weekday&                  \fB(2)\fP \fI(since C++20)\fP
   operator+=( const std::chrono::months& dm ) const noexcept;
   constexpr std::chrono::year_month_weekday&                  \fB(3)\fP \fI(since C++20)\fP
   operator-=( const std::chrono::years& dy ) const noexcept;
   constexpr std::chrono::year_month_weekday&                  \fB(4)\fP \fI(since C++20)\fP
   operator-=( const std::chrono::months& dm ) const noexcept;

   Modifies the time point *this represents by the duration dy or dm.

   1) Equivalent to *this = *this + dy;
   2) Equivalent to *this = *this + dm;
   3) Equivalent to *this = *this - dy;
   4) Equivalent to *this = *this - dm;

   For durations that are convertible to both std::chrono::years and
   std::chrono::months, the years overloads (1,3) are preferred if the call would
   otherwise be ambiguous.

.SH Example


// Run this code

 #include <iostream>
 #include <chrono>

 int main()
 {
     std::cout << std::boolalpha;

     auto ymwi {1/std::chrono::Wednesday[2]/2021};
     ymwi += std::chrono::years(5);
     std::cout << (static_cast<std::chrono::year_month_day>(ymwi) ==
                               std::chrono::year(2026)/1/14) << ' ';
     ymwi -= std::chrono::months(1);
     std::cout << (static_cast<std::chrono::year_month_day>(ymwi) ==
                               std::chrono::day(10)/12/2025) << '\\n';
 }

.SH Output:

 true true

.SH See also

   operator+ adds or subtracts a year_month_weekday and some number of years or months
   operator- \fI(function)\fP
   (C++20)
