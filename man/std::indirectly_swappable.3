.TH std::indirectly_swappable 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::indirectly_swappable \- std::indirectly_swappable

.SH Synopsis
   Defined in header <iterator>
   template< class I1, class I2 >

   concept indirectly_swappable =
   std::indirectly_readable<I1> &&
   std::indirectly_readable<I2> &&
   requires( const I1 i1, const I2 i2 ) {  \fI(since C++20)\fP
   ranges::iter_swap(i1, i1);
   ranges::iter_swap(i1, i2);
   ranges::iter_swap(i2, i1);
   ranges::iter_swap(i2, i2);

   };

   The concept indirectly_swappable specifies a relationship between two types
   respectively modelling std::indirectly_readable, where their referenced types can be
   swapped.

  Semantic requirements

   I1 and I2 model indirectly_swappable only if all concepts it subsumes are modeled.

  Equality preservation

   An expression is equality preserving if it results in equal outputs given equal
   inputs.

     * The inputs to an expression consist of its operands.
     * The outputs of an expression consist of its result and all operands modified by
       the expression (if any).

   In specification of standard concepts, operands are defined as the largest
   subexpressions that include only:

     * an id-expression, and
     * invocations of std::move, std::forward, and std::declval.

   The cv-qualification and value category of each operand is determined by assuming
   that each template type parameter denotes a cv-unqualified complete non-array object
   type.

   Every expression required to be equality preserving is further required to be
   stable: two evaluations of such an expression with the same input objects must have
   equal outputs absent any explicit intervening modification of those input objects.

   Unless noted otherwise, every expression used in a requires-expression is required
   to be equality preserving and stable, and the evaluation of the expression may
   modify only its non-constant operands. Operands that are constant must not be
   modified.

.SH See also

   indirectly_readable specifies that a type is indirectly readable by applying
   (C++20)             operator *
                       (concept)
   iter_swap           swaps the values referenced by two dereferenceable objects
   (C++20)             (customization point object)
