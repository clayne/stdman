.TH std::swap(std::unordered_multimap) 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::swap(std::unordered_multimap) \- std::swap(std::unordered_multimap)

.SH Synopsis
   Defined in header <unordered_map>
   template< class Key, class T, class Hash, class KeyEqual, class Alloc
   >
                                                                          \fI(since C++11)\fP
   void swap( std::unordered_multimap<Key,T,Hash,KeyEqual,Alloc>& lhs,    \fI(until C++17)\fP

   std::unordered_multimap<Key,T,Hash,KeyEqual,Alloc>& rhs );
   template< class Key, class T, class Hash, class KeyEqual, class Alloc
   >

   void swap( std::unordered_multimap<Key,T,Hash,KeyEqual,Alloc>& lhs,    \fI(since C++17)\fP

   std::unordered_multimap<Key,T,Hash,KeyEqual,Alloc>& rhs ) noexcept(/*
   see below */);

   Specializes the std::swap algorithm for std::unordered_multimap. Swaps the contents
   of lhs and rhs. Calls lhs.swap(rhs).

.SH Parameters

   lhs, rhs - containers whose contents to swap

.SH Return value

   \fI(none)\fP

.SH Complexity

   Constant.

.SH Exceptions

   noexcept specification:           \fI(since C++17)\fP
   noexcept(noexcept(lhs.swap(rhs)))

.SH Notes

   Although the overloads of std::swap for container adaptors are introduced in C++11,
   container adaptors can already be swapped by std::swap in C++98. Such calls to
   std::swap usually have linear time complexity, but better complexity may be
   provided.

.SH Example


// Run this code

 #include <algorithm>
 #include <iostream>
 #include <unordered_map>

 int main()
 {
     std::unordered_multimap<int, char> alice{{1, 'a'}, {2, 'b'}, {3, 'c'}};
     std::unordered_multimap<int, char> bob{{7, 'Z'}, {8, 'Y'}, {9, 'X'}, {10, 'W'}};

     auto print = [](std::pair<const int, char>& n) {
         std::cout << " " << n.first << '(' << n.second << ')';
     };

     // Print state before swap
     std::cout << "alice:";
     std::for_each(alice.begin(), alice.end(), print);
     std::cout << "\\n" "bob  :";
     std::for_each(bob.begin(), bob.end(), print);
     std::cout << '\\n';

     std::cout << "-- SWAP\\n";
     std::swap(alice, bob);

     // Print state after swap
     std::cout << "alice:";
     std::for_each(alice.begin(), alice.end(), print);
     std::cout << "\\n" "bob  :";
     std::for_each(bob.begin(), bob.end(), print);
     std::cout << '\\n';
 }

.SH Possible output:

 alice: 1(a) 2(b) 3(c)
 bob  : 7(Z) 8(Y) 9(X) 10(W)
 -- SWAP
 alice: 7(Z) 8(Y) 9(X) 10(W)
 bob  : 1(a) 2(b) 3(c)

.SH See also

   swap    swaps the contents
   \fI(C++11)\fP \fI(public member function)\fP
