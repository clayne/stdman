.TH std::underflow_error 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::underflow_error \- std::underflow_error

.SH Synopsis
   Defined in header <stdexcept>
   class underflow_error;

   Defines a type of object to be thrown as exception. It may be used to report
   arithmetic underflow errors (that is, situations where the result of a computation
   is a subnormal floating-point value)

   The standard library components do not throw this exception (mathematical functions
   report underflow errors as specified in math_errhandling). Third-party libraries,
   however, use this. For example, boost.math throws std::underflow_error if
   boost::math::policies::throw_on_error is enabled (the default setting).

   std-underflow error-inheritance.svg

                                   Inheritance diagram

.SH Member functions

   constructor   constructs a new underflow_error object with the given message
                 \fI(public member function)\fP
   operator=     replaces the underflow_error object
                 \fI(public member function)\fP
   what          returns the explanatory string
                 \fI(public member function)\fP

std::underflow_error::underflow_error

   underflow_error( const std::string& what_arg );      \fB(1)\fP
   underflow_error( const char* what_arg );             \fB(2)\fP \fI(since C++11)\fP
   underflow_error( const underflow_error& other );                       \fI(until C++11)\fP
   underflow_error( const underflow_error& other )      \fB(3)\fP               \fI(since C++11)\fP
   noexcept;

   1-2) Constructs the exception object with what_arg as explanatory string that can be
   accessed through what().
   3) Copy constructor.
   If *this and other both have dynamic type std::underflow_error then
   std::strcmp(what(), other.what()) == 0.
   \fI(since C++11)\fP

.SH Parameters

   what_arg - explanatory string
   other    - another exception object to copy

.SH Exceptions

   1-2) May throw std::bad_alloc

.SH Notes

   Because copying std::underflow_error is not permitted to throw exceptions, this
   message is typically stored internally as a separately-allocated reference-counted
   string. This is also why there is no constructor taking std::string&&: it would have
   to copy the content anyway.

std::underflow_error::operator=

   underflow_error& operator=( const underflow_error& other );           \fI(until C++11)\fP
   underflow_error& operator=( const underflow_error& other ) noexcept;  \fI(since C++11)\fP

   Assigns the contents with those of other.
   If *this and other both have dynamic type std::underflow_error then
   std::strcmp(what(), other.what()) == 0 after assignment.
   \fI(since C++11)\fP

.SH Parameters

   other - another exception object to assign with

.SH Return value

   *this

std::underflow_error::what

   virtual const char* what() const throw();   \fI(until C++11)\fP
   virtual const char* what() const noexcept;  \fI(since C++11)\fP

   Returns the explanatory string.

.SH Parameters

   \fI(none)\fP

.SH Return value

   Pointer to a null-terminated string with explanatory information. The string is
   suitable for conversion and display as a std::wstring. The pointer is guaranteed to
   be valid at least until the exception object from which it is obtained is destroyed,
   or until a non-const member function (e.g. copy assignment operator) on the
   exception object is called.

.SH Notes

   Implementations are allowed but not required to override what().

Inherited from std::runtime_error

Inherited from std::exception

.SH Member functions

   destructor   destroys the exception object
   \fB[virtual]\fP    \fI(virtual public member function of std::exception)\fP
   what         returns an explanatory string
   \fB[virtual]\fP    \fI(virtual public member function of std::exception)\fP
