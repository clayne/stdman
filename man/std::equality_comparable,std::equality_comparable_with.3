.TH std::equality_comparable,std::equality_comparable_with 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::equality_comparable,std::equality_comparable_with \- std::equality_comparable,std::equality_comparable_with

.SH Synopsis
   Defined in header <concepts>
   template < class T >
   concept equality_comparable = __WeaklyEqualityComparableWith<T,    \fB(1)\fP \fI(since C++20)\fP
   T>;
   template <class T, class U>

   concept equality_comparable_with =
   std::equality_comparable<T> &&
   std::equality_comparable<U> &&
   std::common_reference_with<
   const std::remove_reference_t<T>&,                                 \fB(2)\fP \fI(since C++20)\fP
   const std::remove_reference_t<U>&> &&
   std::equality_comparable<
   std::common_reference_t<
   const std::remove_reference_t<T>&,
   const std::remove_reference_t<U>&>> &&

   __WeaklyEqualityComparableWith<T, U>;
   template<class T, class U>

   concept __WeaklyEqualityComparableWith = // exposition only
   requires(const std::remove_reference_t<T>& t,
   const std::remove_reference_t<U>& u) {
   { t == u } -> boolean-testable;                                    \fB(3)\fP \fI(since C++20)\fP
   { t != u } -> boolean-testable;
   { u == t } -> boolean-testable;
   { u != t } -> boolean-testable;

   };

   1) The concept std::equality_comparable specifies that the comparison operators ==
   and != on T reflects equality: == yields true if and only if the operands are equal.
   2) The concept std::equality_comparable_with specifies that the comparison operators
   == and != on (possibly mixed) T and U operands yield results consistent with
   equality. Comparing mixed operands yields results equivalent to comparing the
   operands converted to their common type.
   3) The exposition-only concept __WeaklyEqualityComparableWith specifies that an
   object of type T and an object of type U can be compared for equality with each
   other (in either order) using both == and !=, and the results of the comparisons are
   consistent.

  Semantic requirements

   These concepts are modeled only if they are satisified and all concepts they subsume
   are modeled.

   1) std::equality_comparable<T> is modeled only if, given objects a and b of type T,
   bool(a == b) is true if and only if a and b are equal. Together with the requirement
   that a == b is equality preserving, this implies that == is symmetric and
   transitive, and further that == is reflexive for all objects a that are equal to at
   least one other object.
   2) std::equality_comparable_with<T, U> is modeled only if, given any lvalue t of
   type const std::remove_reference_t<T> and any lvalue u of type const
   std::remove_reference_t<U>, and let C be std::common_reference_t<const
   std::remove_reference_t<T>&, const std::remove_reference_t<U>&>, bool(t == u) ==
   bool(C(t) == C(u)).
   3) __WeaklyEqualityComparableWith<T, U> is modeled only if given

     * t, an lvalue of type const std::remove_reference_t<T> and
     * u, an lvalue of type const std::remove_reference_t<U>,

   the following are true:

     * t == u, u == t, t != u,u != t have the same domain;
     * bool(u == t) == bool(t == u);
     * bool(t != u) == !bool(t == u); and
     * bool(u != t) == bool(t != u).

  Equality preservation

   An expression is equality preserving if it results in equal outputs given equal
   inputs.

     * The inputs to an expression consist of its operands.
     * The outputs of an expression consist of its result and all operands modified by
       the expression (if any).

   In specification of standard concepts, operands are defined as the largest
   subexpressions that include only:

     * an id-expression, and
     * invocations of std::move, std::forward, and std::declval.

   The cv-qualification and value category of each operand is determined by assuming
   that each template type parameter denotes a cv-unqualified complete non-array object
   type.

   Every expression required to be equality preserving is further required to be
   stable: two evaluations of such an expression with the same input objects must have
   equal outputs absent any explicit intervening modification of those input objects.

   Unless noted otherwise, every expression used in a requires-expression is required
   to be equality preserving and stable, and the evaluation of the expression may
   modify only its non-constant operands. Operands that are constant must not be
   modified.

  Implicit expression variations

   A requires-expression that uses an expression that is non-modifying for some
   constant lvalue operand also implicitly requires additional variations of that
   expression that accept a non-constant lvalue or (possibly constant) rvalue for the
   given operand unless such an expression variation is explicitly required with
   differing semantics. These implicit expression variations must meet the same
   semantic requirements of the declared expression. The extent to which an
   implementation validates the syntax of the variations is unspecified.
