.TH std::less 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::less \- std::less

.SH Synopsis
   Defined in header <functional>
   template<>                      \fI(since C++14)\fP
   class less<void>;

   std::less<> is a specialization of std::less with parameter and return type deduced.

  Implementation-defined strict total order over pointers

   The function call operator yields the implementation-defined strict total order over
   pointers if the < operator between arguments invokes a built-in comparison operator
   for a pointer, even if the built-in < operator does not.

   The implementation-defined strict total order is consistent with the partial order
   imposed by built-in comparison operators (
   <=>,
   \fI(since C++20)\fP<, >, <=, and >=), and consistent among following standard function
   objects:

     * std::less, std::greater, std::less_equal, and std::greater_equal, when the
       template argument is a pointer type or void

     * std::ranges::equal_to, std::ranges::not_equal_to,
       std::ranges::less, std::ranges::greater, std::ranges::less_equal,  \fI(since C++20)\fP
       std::ranges::greater_equal, and std::compare_three_way

.SH Member types

   Member type    Definition
   is_transparent /* unspecified */

.SH Member functions

   operator() tests if the lhs compares less than rhs
              \fI(public member function)\fP

std::less<>::operator()

   template< class T, class U>

   constexpr auto operator()( T&& lhs, U&& rhs ) const

   -> decltype(std::forward<T>(lhs) < std::forward<U>(rhs));

   Returns the result of std::forward<T>(lhs) < std::forward<U>(rhs).

.SH Parameters

   lhs, rhs - values to compare

.SH Return value

   The result of std::forward<T>(lhs) < std::forward<U>(rhs).

   If the comparison between both arguments resolves to a built-in comparison operator
   for a pointer type, the implementation-defined strict total order is used for
   comparison after converting both arguments to pointers.

.SH Exceptions

   May throw implementation-defined exceptions.

.SH Notes

   The member type is_transparent indicates to the caller that this function object is
   a transparent function object: it accepts arguments of arbitrary types and uses
   perfect forwarding, which avoids unnecessary copying and conversion when the
   function object is used in heterogeneous context, or with rvalue arguments. In
   particular, template functions such as std::set::find and std::set::lower_bound make
   use of this member type on their Compare types.

.SH Example

    This section is incomplete
    Reason: no example
