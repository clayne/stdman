.TH std::vector::erase 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::vector::erase \- std::vector::erase

.SH Synopsis
   iterator erase( iterator pos );                          \fI(until C++11)\fP
   iterator erase( const_iterator pos );                    \fI(since C++11)\fP
                                                            \fI(until C++20)\fP
   constexpr iterator erase( const_iterator pos );          \fI(since C++20)\fP
   iterator erase( iterator first, iterator last ); \fB(1)\fP                   \fI(until C++11)\fP
   iterator erase( const_iterator first,                                  \fI(since C++11)\fP
   const_iterator last );                               \fB(2)\fP               \fI(until C++20)\fP
   constexpr iterator erase( const_iterator first,                        \fI(since C++20)\fP
   const_iterator last );

   Erases the specified elements from the container.

   1) Removes the element at pos.
   2) Removes the elements in the range [first, last).

   Invalidates iterators and references at or after the point of the erase, including
   the end() iterator.

   The iterator pos must be valid and dereferenceable. Thus the end() iterator (which
   is valid, but is not dereferenceable) cannot be used as a value for pos.

   The iterator first does not need to be dereferenceable if first==last: erasing an
   empty range is a no-op.

.SH Parameters

   pos         - iterator to the element to remove
   first, last - range of elements to remove
.SH Type requirements
   -
   T must meet the requirements of MoveAssignable.

.SH Return value

   Iterator following the last removed element.

   If pos refers to the last element, then the end() iterator is returned.

   If last==end() prior to removal, then the updated end() iterator is returned.

   If [first, last) is an empty range, then last is returned.

.SH Exceptions

   Does not throw unless an exception is thrown by the assignment operator of T.

.SH Complexity

   Linear: the number of calls to the destructor of T is the same as the number of
   elements erased, the assignment operator of T is called the number of times equal to
   the number of elements in the vector after the erased elements

.SH Example


// Run this code

 #include <vector>
 #include <iostream>


 void print_container(const std::vector<int>& c)
 {
     for (int i : c) {
         std::cout << i << " ";
     }
     std::cout << '\\n';
 }

 int main( )
 {
     std::vector<int> c{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
     print_container(c);

     c.erase(c.begin());
     print_container(c);

     c.erase(c.begin()+2, c.begin()+5);
     print_container(c);

     // Erase all even numbers (C++11 and later)
     for (std::vector<int>::iterator it = c.begin(); it != c.end(); ) {
         if (*it % 2 == 0) {
             it = c.erase(it);
         } else {
             ++it;
         }
     }
     print_container(c);
 }

.SH Output:

 0 1 2 3 4 5 6 7 8 9
 1 2 3 4 5 6 7 8 9
 1 2 6 7 8 9
 1 7 9

.SH See also

   clear clears the contents
         \fI(public member function)\fP
