.TH std::linear_congruential_engine 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::linear_congruential_engine \- std::linear_congruential_engine

.SH Synopsis
   Defined in header <random>
   template<

   class UIntType,
   UIntType a,                          \fI(since C++11)\fP
   UIntType c,
   UIntType m

   > class linear_congruential_engine;

   linear_congruential_engine is a random number engine based on Linear congruential
   generator (LCG). A LCG has a state that consists of a single integer.

   The transition algorithm of the LCG function is \\(\\small{x_{i+1}\\leftarrow(a x_i +
   c)\\mod m}\\)x
   i+1 ‚Üê (ax
   i+c) mod m.

   The following typedefs define the random number engine with two commonly used
   parameter sets:

   Defined in header <random>
   Type                Definition
                       std::linear_congruential_engine<std::uint_fast32_t, 16807, 0,
                       2147483647>
   minstd_rand0\fI(C++11)\fP
                       Discovered in 1969 by Lewis, Goodman and Miller, adopted as
                       "Minimal standard" in 1988 by Park and Miller
                       std::linear_congruential_engine<std::uint_fast32_t, 48271, 0,
                       2147483647>
   minstd_rand\fI(C++11)\fP
                       Newer "Minimum standard", recommended by Park, Miller, and
                       Stockmeyer in 1993

.SH Template parameters

              The result type generated by the generator. The effect is undefined if
   UIntType - this is not one of unsigned short, unsigned int, unsigned long, or
              unsigned long long.
   a        - the multiplier term
   c        - the increment term
   m        - the modulus term

.SH Member types

   Member type        Definition
   result_type\fI(C++11)\fP The integral type generated by the engine. Results are undefined
                      if this is not an unsigned integral type.

.SH Member functions

.SH Construction and Seeding
   constructor      constructs the engine
   \fI(C++11)\fP          \fI(public member function)\fP
   seed             sets the current state of the engine
   \fI(C++11)\fP          \fI(public member function)\fP
.SH Generation
   operator()       advances the engine's state and returns the generated value
   \fI(C++11)\fP          \fI(public member function)\fP
   discard          advances the engine's state by a specified amount
   \fI(C++11)\fP          \fI(public member function)\fP
.SH Characteristics
   min              gets the smallest possible value in the output range
   \fB[static]\fP \fI(C++11)\fP \fI(public static member function)\fP
   max              gets the largest possible value in the output range
   \fB[static]\fP \fI(C++11)\fP \fI(public static member function)\fP

.SH Non-member functions

   operator==                compares the internal states of two pseudo-random number
   operator!=                engines
   \fI(C++11)\fP                   \fI(function)\fP
   \fI(C++11)\fP(removed in C++20)
   operator<<                performs stream input and output on pseudo-random number
   operator>>                engine
   \fI(C++11)\fP                   \fI(function template)\fP

.SH Member constants

   constexpr UIntType multiplier   the multiplier term (a).
   \fB[static]\fP \fI(C++11)\fP                \fI(public static member constant)\fP
   constexpr UIntType increment    the increment term (c).
   \fB[static]\fP \fI(C++11)\fP                \fI(public static member constant)\fP
   constexpr UIntType modulus      the modulus term (m).
   \fB[static]\fP \fI(C++11)\fP                \fI(public static member constant)\fP
   constexpr UIntType default_seed the default seed \fB(1)\fP.
   \fB[static]\fP \fI(C++11)\fP                \fI(public static member constant)\fP
