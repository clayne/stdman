.TH std::copy_n 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::copy_n \- std::copy_n

.SH Synopsis
   Defined in header <algorithm>
   template< class InputIt, class Size, class OutputIt >                  \fI(since C++11)\fP
   OutputIt copy_n( InputIt first, Size count, OutputIt result );         \fI(until C++20)\fP
   template< class InputIt, class Size, class OutputIt >
   constexpr OutputIt copy_n( InputIt first, Size count, OutputIt         \fI(since C++20)\fP
   result );                                                      \fB(1)\fP
   template< class ExecutionPolicy, class ForwardIt1, class Size,
   class ForwardIt2 >                                                 \fB(2)\fP \fI(since C++17)\fP
   ForwardIt2 copy_n( ExecutionPolicy&& policy, ForwardIt1 first,
   Size count, ForwardIt2 result );

   1) Copies exactly count values from the range beginning at first to the range
   beginning at result. Formally, for each integer 0 â‰¤ i < count, performs *(result +
   i) = *(first + i). Overlap of ranges is formally permitted, but leads to
   unpredictable ordering of the results.
   2) Same as \fB(1)\fP, but executed according to policy. This overload does not participate
   in overload resolution unless
   std::is_execution_policy_v<std::decay_t<ExecutionPolicy>>
   \fI(until C++20)\fP
   std::is_execution_policy_v<std::remove_cvref_t<ExecutionPolicy>>
   \fI(since C++20)\fP is true.

.SH Parameters

   first    -  the beginning of the range of elements to copy from
   count    -  number of the elements to copy
   result   -  the beginning of the destination range
   policy   -  the execution policy to use. See execution policy for details.
.SH Type requirements
   -
   InputIt must meet the requirements of LegacyInputIterator.
   -
   OutputIt must meet the requirements of LegacyOutputIterator.
   -
   ForwardIt1, ForwardIt2 must meet the requirements of LegacyForwardIterator.

.SH Return value

   Iterator in the destination range, pointing past the last element copied if count>0
   or result otherwise.

.SH Complexity

   Zero assignments if count < 0; count assignments otherwise.

.SH Exceptions

   The overload with a template parameter named ExecutionPolicy reports errors as
   follows:

     * If execution of a function invoked as part of the algorithm throws an exception
       and ExecutionPolicy is one of the standard policies, std::terminate is called.
       For any other ExecutionPolicy, the behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is thrown.

.SH Possible implementation

   template< class InputIt, class Size, class OutputIt>
   OutputIt copy_n(InputIt first, Size count, OutputIt result)
   {
       if (count > 0) {
           *result++ = *first;
           for (Size i = 1; i < count; ++i) {
               *result++ = *++first;
           }
       }
       return result;
   }

.SH Example


// Run this code

 #include <algorithm>
 #include <iostream>
 #include <iterator>
 #include <numeric>
 #include <string>
 #include <vector>

 int main()
 {
     std::string in = "1234567890";
     std::string out;

     std::copy_n(in.begin(), 4, std::back_inserter(out));
     std::cout << out << '\\n';

     std::vector<int> v_in(128);
     std::iota(v_in.begin(), v_in.end(), 1);
     std::vector<int> v_out(v_in.size());

     std::copy_n(v_in.cbegin(), 100, v_out.begin());
     std::cout << std::accumulate(v_out.begin(), v_out.end(), 0) << '\\n';
 }

.SH Output:

 1234
 5050

.SH See also

   copy           copies a range of elements to a new location
   copy_if        \fI(function template)\fP
   \fI(C++11)\fP
   ranges::copy_n copies a number of elements to a new location
   (C++20)        (niebloid)
