.TH std::uninitialized_copy_n 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::uninitialized_copy_n \- std::uninitialized_copy_n

.SH Synopsis
   Defined in header <memory>
   template< class InputIt, class Size, class NoThrowForwardIt >
   NoThrowForwardIt uninitialized_copy_n( InputIt first, Size count,  \fB(1)\fP \fI(since C++11)\fP
   NoThrowForwardIt d_first );
   template< class ExecutionPolicy, class ForwardIt, class Size,
   class NoThrowForwardIt >

   NoThrowForwardIt uninitialized_copy_n( ExecutionPolicy&& policy,   \fB(2)\fP \fI(since C++17)\fP
   ForwardIt first, Size count,

   NoThrowForwardIt d_first );

   1) Copies count elements from a range beginning at first to an uninitialized memory
   area beginning at d_first as if by

 for ( ; n > 0; ++d_first, (void) ++first, --n)
    ::new (/*VOIDIFY*/(*d_first))
       typename std::iterator_traits<NoThrowForwardIt>::value_type(*first);

   where /*VOIDIFY*/(e) is:

      static_cast<void*>(std::addressof(e))                               \fI(until C++20)\fP
      const_cast<void*>(static_cast<const volatile                        \fI(since C++20)\fP
      void*>(std::addressof(e)))

   If an exception is thrown during the initialization, the objects already constructed
   are destroyed in an unspecified order.
   2) Same as \fB(1)\fP, but executed according to policy. This overload does not participate
   in overload resolution unless
   std::is_execution_policy_v<std::decay_t<ExecutionPolicy>>
   \fI(until C++20)\fP
   std::is_execution_policy_v<std::remove_cvref_t<ExecutionPolicy>>
   \fI(since C++20)\fP is true.

.SH Parameters

   first              -          the beginning of the range of the elements to copy
   count              -          the number of elements to copy
   d_first            -          the beginning of the destination range
   policy             -          the execution policy to use. See execution policy for
                                 details.
.SH Type requirements
   -
   InputIt must meet the requirements of LegacyInputIterator.
   -
   ForwardIt must meet the requirements of LegacyForwardIterator.
   -
   NoThrowForwardIt must meet the requirements of LegacyForwardIterator.
   -
   No increment, assignment, comparison, or indirection through valid instances of
   NoThrowForwardIt may throw exceptions.

.SH Return value

   Iterator to the element past the last element copied.

.SH Complexity

   Linear in count.

.SH Exceptions

   The overload with a template parameter named ExecutionPolicy reports errors as
   follows:

     * If execution of a function invoked as part of the algorithm throws an exception
       and ExecutionPolicy is one of the standard policies, std::terminate is called.
       For any other ExecutionPolicy, the behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is thrown.

.SH Possible implementation

template<class InputIt, class Size, class NoThrowForwardIt>
NoThrowForwardIt uninitialized_copy_n(InputIt first, Size count, NoThrowForwardIt d_first)
{
    using T = typename std::iterator_traits<NoThrowForwardIt>::value_type;
    NoThrowForwardIt current = d_first;
    try {
        for (; count > 0; ++first, (void) ++current, --count) {
            ::new (const_cast<void*>(static_cast<const volatile void*>(
                std::addressof(*current)))) T(*first);
        }
    } catch (...) {
        for (; d_first != current; ++d_first) {
            d_first->~T();
        }
        throw;
    }
    return current;
}

.SH Example


// Run this code

 #include <algorithm>
 #include <iostream>
 #include <memory>
 #include <string>
 #include <tuple>
 #include <vector>

 int main()
 {
     std::vector<std::string> v = {"This", "is", "an", "example"};

     std::string* p;
     std::size_t sz;
     std::tie(p, sz) = std::get_temporary_buffer<std::string>(v.size());
     sz = std::min(sz, v.size());

     std::uninitialized_copy_n(v.begin(), sz, p);

     for (std::string* i = p; i != p+sz; ++i) {
         std::cout << *i << ' ';
         i->~basic_string<char>();
     }
     std::return_temporary_buffer(p);
 }

.SH Output:

 This is an example

.SH See also

                                copies a range of objects to an uninitialized area of
   uninitialized_copy           memory
                                \fI(function template)\fP
   ranges::uninitialized_copy_n copies a number of objects to an uninitialized area of
   (C++20)                      memory
                                (niebloid)
