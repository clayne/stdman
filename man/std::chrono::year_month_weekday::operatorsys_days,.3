.TH std::chrono::year_month_weekday::operatorsys_days, 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::chrono::year_month_weekday::operatorsys_days, \- std::chrono::year_month_weekday::operatorsys_days,

.SH Synopsis

   constexpr operator std::chrono::sys_days() const noexcept;         \fB(1)\fP \fI(since C++20)\fP
   explicit constexpr operator std::chrono::local_days() const        \fB(2)\fP \fI(since C++20)\fP
   noexcept;

   Converts *this to a std::chrono::time_point representing the same date as this
   year_month_weekday.

   1) If year().ok() && month().ok() && weekday().ok():

              * If index() == 0, returns a sys_days that represents the date 7 days
                prior to the first weekday() of the year and month.
              * Else, returns a sys_days that represents the date (index() - 1) * 7
                days after the first weekday() of the year and month.

   Otherwise, the returned value is unspecified.
   2) Same as \fB(1)\fP, but returns local_days instead of sys_days. Equivalent to
   local_days(sys_days(*this).time_since_epoch()).

.SH Example


// Run this code

 #include <iostream>
 #include <chrono>
 using namespace std::chrono;

 int main()
 {
     std::cout << std::boolalpha;

     constexpr auto ymwd {Tuesday[2]/11/2021};
     // convert from field-based to serial-based to add hours
     constexpr auto sd = sys_days{ymwd} + 24h;
     constexpr auto ymd = floor<days>(sd);
     std::cout << (ymd == November/10/2021) << '\\n';
 }

.SH Output:

 true
