.TH std::runtime_error 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::runtime_error \- std::runtime_error

.SH Synopsis
   Defined in header <stdexcept>
   class runtime_error;

   Defines a type of object to be thrown as exception. It reports errors that are due
   to events beyond the scope of the program and can not be easily predicted.

   Exceptions of type std::runtime_error are thrown by the following standard library
   components: std::locale::locale and std::locale::combine.

   In addition, the following standard exception types are derived from
   std::runtime_error:

     * std::range_error
     * std::overflow_error
     * std::underflow_error

     * std::regex_error    \fI(since C++11)\fP
     * std::system_error

     * std::chrono::ambiguous_local_time
     * std::chrono::nonexistent_local_time   \fI(since C++20)\fP
     * std::format_error

   std-runtime error-inheritance.svg

                                   Inheritance diagram

.SH Member functions

   constructor   constructs a new runtime_error object with the given message
                 \fI(public member function)\fP
   operator=     replaces the runtime_error object
                 \fI(public member function)\fP
   what          returns the explanatory string
                 \fI(public member function)\fP

std::runtime_error::runtime_error

   runtime_error( const std::string& what_arg );        \fB(1)\fP
   runtime_error( const char* what_arg );               \fB(2)\fP \fI(since C++11)\fP
   runtime_error( const runtime_error& other );                           \fI(until C++11)\fP
   runtime_error( const runtime_error& other )          \fB(3)\fP               \fI(since C++11)\fP
   noexcept;

   1-2) Constructs the exception object with what_arg as explanatory string that can be
   accessed through what().
   3) Copy constructor.
   If *this and other both have dynamic type std::runtime_error then
   std::strcmp(what(), other.what()) == 0.
   \fI(since C++11)\fP

.SH Parameters

   what_arg - explanatory string
   other    - another exception object to copy

.SH Exceptions

   1-2) May throw std::bad_alloc

.SH Notes

   Because copying std::runtime_error is not permitted to throw exceptions, this
   message is typically stored internally as a separately-allocated reference-counted
   string. This is also why there is no constructor taking std::string&&: it would have
   to copy the content anyway.

std::runtime_error::operator=

   runtime_error& operator=( const runtime_error& other );           \fI(until C++11)\fP
   runtime_error& operator=( const runtime_error& other ) noexcept;  \fI(since C++11)\fP

   Assigns the contents with those of other.
   If *this and other both have dynamic type std::runtime_error then
   std::strcmp(what(), other.what()) == 0 after assignment.
   \fI(since C++11)\fP

.SH Parameters

   other - another exception object to assign with

.SH Return value

   *this

std::runtime_error::what

   virtual const char* what() const throw();   \fI(until C++11)\fP
   virtual const char* what() const noexcept;  \fI(since C++11)\fP

   Returns the explanatory string.

.SH Parameters

   \fI(none)\fP

.SH Return value

   Pointer to a null-terminated string with explanatory information. The string is
   suitable for conversion and display as a std::wstring. The pointer is guaranteed to
   be valid at least until the exception object from which it is obtained is destroyed,
   or until a non-const member function (e.g. copy assignment operator) on the
   exception object is called.

.SH Notes

   Implementations are allowed but not required to override what().

Inherited from std::exception

.SH Member functions

   destructor   destroys the exception object
   \fB[virtual]\fP    \fI(virtual public member function of std::exception)\fP
   what         returns an explanatory string
   \fB[virtual]\fP    \fI(virtual public member function of std::exception)\fP
