.TH std::is_class 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_class \- std::is_class

.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct is_class;

   Checks whether T is a non-union class type. Provides the member constant value which
   is equal to true, if T is a class type (but not union). Otherwise, value is equal to
   false.

   The behavior of a program that adds specializations for is_class
   or is_class_v
   \fI(since C++17)\fP is undefined.

.SH Template parameters

   T - a type to check

  Helper variable template

   template< class T >                                     \fI(since C++17)\fP
   inline constexpr bool is_class_v = is_class<T>::value;

Inherited from std::integral_constant

.SH Member constants

   value    true if T is a non-union class type , false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Possible implementation

   namespace detail {
   template <class T>
   std::integral_constant<bool, !std::is_union<T>::value> test(int T::*);

   template <class>
   std::false_type test(...);
   }

   template <class T>
   struct is_class : decltype(detail::test<T>(nullptr))
   {};

.SH Example


// Run this code

 #include <iostream>
 #include <type_traits>

 struct A {};

 class B {};

 enum class E {};

 union U { class UC {}; };
 static_assert(not std::is_class_v<U>);
 static_assert(std::is_class_v<U::UC>);

 int main()
 {
     std::cout << std::boolalpha;
     std::cout << std::is_class<A>::value << ": A\\n";
     std::cout << std::is_class_v<B> << ": B \\n";
     std::cout << std::is_class_v<B*> << ": B* \\n";
     std::cout << std::is_class_v<B&> << ": B& \\n";
     std::cout << std::is_class_v<const B> << ": const B \\n";
     std::cout << std::is_class<E>::value << ": E\\n";
     std::cout << std::is_class_v<int> << ": int\\n";
     std::cout << std::is_class_v<struct S> << ": struct S (incomplete)\\n";
     std::cout << std::is_class_v<class C> << ": class C (incomplete)\\n";
 }

.SH Output:

 true: A
 true: B
 false: B*
 false: B&
 true: const B
 false: E
 false: int
 true: struct S (incomplete)
 true: class C (incomplete)

.SH See also

   is_union checks if a type is an union type
   \fI(C++11)\fP  \fI(class template)\fP
