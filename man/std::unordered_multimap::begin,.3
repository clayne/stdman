.TH std::unordered_multimap::begin, 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::unordered_multimap::begin, \- std::unordered_multimap::begin,

.SH Synopsis

   iterator begin() noexcept;               \fI(since C++11)\fP
   const_iterator begin() const noexcept;   \fI(since C++11)\fP
   const_iterator cbegin() const noexcept;  \fI(since C++11)\fP

   Returns an iterator to the first element of the unordered_multimap.

   If the unordered_multimap is empty, the returned iterator will be equal to end().

   range-begin-end.svg

.SH Parameters

   \fI(none)\fP

.SH Return value

   Iterator to the first element.

.SH Complexity

   Constant.

.SH Example


// Run this code

 #include <unordered_map>
 #include <algorithm>
 #include <cassert>
 #include <iostream>
 #include <string>
 #include <utility>

 int main()
 {
     auto show_node = [](const std::pair<std::string, std::string>& node) {
         std::cout << node.first << "  :  " << node.second << '\\n';
     };

     std::unordered_multimap<std::string, std::string> lemmas;
     assert(lemmas.begin() == lemmas.end());   // OK
     assert(lemmas.cbegin() == lemmas.cend()); // OK

     lemmas.insert({ "1. ∀x ∈ N ∃y ∈ N", "x ≤ y" });
     show_node(*lemmas.cbegin());
     assert(lemmas.begin() != lemmas.end());   // OK
     assert(lemmas.cbegin() != lemmas.cend()); // OK
     lemmas.begin()->second = "x < y";
     show_node(*lemmas.cbegin());

     lemmas.insert({ "2. ∀x,y ∈ N", "x = y V x ≠ y" });
     show_node(*lemmas.cbegin());

     lemmas.insert({ "3. ∀x ∈ N ∃y ∈ N", "y = x + 1" });
     show_node(*lemmas.cbegin());

     std::cout << "lemmas: \\n";
     std::for_each(lemmas.cbegin(), lemmas.cend(),
         [&](const auto& n) { show_node(n); });
     std::cout << "\\n";
 }

.SH Possible output:

 1. ∀x ∈ N ∃y ∈ N  :  x ≤ y
 1. ∀x ∈ N ∃y ∈ N  :  x < y
 2. ∀x,y ∈ N  :  x = y V x ≠ y
 3. ∀x ∈ N ∃y ∈ N  :  y = x + 1
 lemmas:
 3. ∀x ∈ N ∃y ∈ N  :  y = x + 1
 1. ∀x ∈ N ∃y ∈ N  :  x < y
 2. ∀x,y ∈ N  :  x = y V x ≠ y

.SH See also

   end     returns an iterator to the end
   cend    \fI(public member function)\fP
   \fI(C++11)\fP
   begin
   cbegin  returns an iterator to the beginning of a container or array
   \fI(C++11)\fP \fI(function template)\fP
   \fI(C++14)\fP
