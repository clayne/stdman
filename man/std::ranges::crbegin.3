.TH std::ranges::crbegin 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ranges::crbegin \- std::ranges::crbegin

.SH Synopsis
   Defined in header <ranges>
   inline namespace /*unspecified*/ {

   inline constexpr /*unspecified*/ crbegin =              \fI(since C++20)\fP
   /*unspecified*/;                                        (customization point object)

   }
   Call signature
   template< class T >

   requires /* see below */                                \fI(since C++20)\fP

   constexpr std::input_or_output_iterator auto crbegin(
   T&& t );

   Returns an iterator to the first element of the const-qualified argument that is
   treated as a reversed sequence.

   range-rbegin-rend.svg

   Let CT be

    1. const std::remove_reference_t<T>& if the argument is a lvalue (i.e. T is an
       lvalue reference type),
    2. const T otherwise,

   a call to ranges::crbegin is expression-equivalent to
   ranges::rbegin(static_cast<CT&&>(t)).

   The return type models std::input_or_output_iterator in both cases.

  Expression-equivalent

   Expression e is expression-equivalent to expression f, if

     * e and f have the same effects, and
     * either both are constant subexpressions or else neither is a constant
       subexpression, and
     * either both are potentially-throwing or else neither is potentially-throwing
       (i.e. noexcept(e) == noexcept(f)).

  Customization point objects

   The name ranges::crbegin denotes a customization point object, which is a const
   function object of a literal semiregular class type. For exposition purposes, the
   cv-unqualified version of its type is denoted as __crbegin_fn.

   All instances of __crbegin_fn are equal. The effects of invoking different instances
   of type __crbegin_fn on the same arguments are equivalent, regardless of whether the
   expression denoting the instance is an lvalue or rvalue, and is const-qualified or
   not (however, a volatile-qualified instance is not required to be invocable). Thus,
   ranges::crbegin can be copied freely and its copies can be used interchangeably.

   Given a set of types Args..., if std::declval<Args>()... meet the requirements for
   arguments to ranges::crbegin above, __crbegin_fn models

     * std::invocable<__crbegin_fn, Args...>,
     * std::invocable<const __crbegin_fn, Args...>,
     * std::invocable<__crbegin_fn&, Args...>, and
     * std::invocable<const __crbegin_fn&, Args...>.

   Otherwise, no function call operator of __crbegin_fn participates in overload
   resolution.

.SH Notes

   If the argument is an rvalue (i.e. T is an object type) and
   ranges::enable_borrowed_range<std::remove_cv_t<T>> is false, the call to
   ranges::crbegin is ill-formed, which also results in substitution failure.

   The return type models std::input_or_output_iterator in all cases.

.SH Example


// Run this code

 #include <iostream>
 #include <vector>
 #include <iterator>
 #include <span>

 int main()
 {
     std::vector<int> v = { 3, 1, 4 };
     auto vi = std::ranges::crbegin(v);
     std::cout << *vi << '\\n';

     int a[] = { -5, 10, 15 };
     auto ai = std::ranges::crbegin(a);
     std::cout << *ai << '\\n';

     // auto x_x = std::ranges::crbegin(std::vector<int>{6,6,6});
     // ill-formed: the argument is an rvalue (see Notes â†‘)

     auto si = std::ranges::crbegin(std::span{a}); // OK:
     static_assert(std::ranges::enable_borrowed_range<
         std::remove_cv_t<decltype(std::span{a})>>);
     std::cout << *si << '\\n';
 }

.SH Output:

 4
 15
 15

.SH See also

   ranges::rbegin returns a reverse iterator to a range
   (C++20)        (customization point object)
   rbegin         returns a reverse iterator to the beginning of a container or array
   crbegin        \fI(function template)\fP
   \fI(C++14)\fP
