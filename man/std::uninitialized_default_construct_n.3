.TH std::uninitialized_default_construct_n 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::uninitialized_default_construct_n \- std::uninitialized_default_construct_n

.SH Synopsis
   Defined in header <memory>
   template< class ForwardIt, class Size >
   ForwardIt uninitialized_default_construct_n( ForwardIt first, Size \fB(1)\fP \fI(since C++17)\fP
   n );
   template< class ExecutionPolicy, class ForwardIt, class Size >
   ForwardIt uninitialized_default_construct_n( ExecutionPolicy&&     \fB(2)\fP \fI(since C++17)\fP
   policy, ForwardIt first, Size n );

   1) Constructs n objects of type typename iterator_traits<ForwardIt>::value_type in
   the uninitialized storage starting at first by default-initialization, as if by

 for (; n > 0; (void) ++first, --n)
   ::new (/*VOIDIFY*/(*first))
       typename std::iterator_traits<ForwardIt>::value_type;

   where /*VOIDIFY*/(e) is:

      static_cast<void*>(std::addressof(e))                               \fI(until C++20)\fP
      const_cast<void*>(static_cast<const volatile                        \fI(since C++20)\fP
      void*>(std::addressof(e)))

   If an exception is thrown during the initialization, the objects already constructed
   are destroyed in an unspecified order.
   2) Same as \fB(1)\fP, but executed according to policy. This overload does not participate
   in overload resolution unless
   std::is_execution_policy_v<std::decay_t<ExecutionPolicy>>
   \fI(until C++20)\fP
   std::is_execution_policy_v<std::remove_cvref_t<ExecutionPolicy>>
   \fI(since C++20)\fP is true.

.SH Parameters

   first             -          the beginning of the range of elements to initialize
   n                 -          the number of elements to construct
   policy            -          the execution policy to use. See execution policy for
                                details.
.SH Type requirements
   -
   ForwardIt must meet the requirements of LegacyForwardIterator.
   -
   No increment, assignment, comparison, or indirection through valid instances of
   ForwardIt may throw exceptions.

.SH Return value

   The end of the range of objects (i.e., std::next(first, n)).

.SH Complexity

   Linear in n.

.SH Exceptions

   The overload with a template parameter named ExecutionPolicy reports errors as
   follows:

     * If execution of a function invoked as part of the algorithm throws an exception
       and ExecutionPolicy is one of the standard policies, std::terminate is called.
       For any other ExecutionPolicy, the behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is thrown.

.SH Possible implementation

   template<class ForwardIt, class Size>
   ForwardIt uninitialized_default_construct_n( ForwardIt first, Size n )
   {
       using T = typename std::iterator_traits<ForwardIt>::value_type;
       ForwardIt current = first;
       try {
           for (; n > 0 ; (void) ++current, --n) {
               ::new (const_cast<void*>(static_cast<const volatile void*>(
                   std::addressof(*current)))) T;
           }
           return current;
       }  catch (...) {
           std::destroy(first, current);
           throw;
       }
   }

.SH Example


// Run this code

 #include <iostream>
 #include <memory>
 #include <string>

 int main()
 {
     struct S { std::string m{ "Default value" }; };

     constexpr int n {3};
     alignas(alignof(S)) unsigned char mem[n * sizeof(S)];

     try
     {
         auto first {reinterpret_cast<S*>(mem)};
         auto last = std::uninitialized_default_construct_n(first, n);

         for (auto it {first}; it != last; ++it) {
             std::cout << it->m << '\\n';
         }

         std::destroy(first, last);
     }
     catch(...)
     {
         std::cout << "Exception!\\n";
     }

     // Notice that for "trivial types" the uninitialized_default_construct_n
     // generally does not zero-initialize the given uninitialized memory area.
     int v[] { 1, 2, 3, 4 };
     const int original[] { 1, 2, 3, 4 };
     std::uninitialized_default_construct_n(std::begin(v), std::size(v));
     // for (const int i : v) { std::cout << i << ' '; }
     // Maybe undefined behavior, pending CWG 1997.
     std::cout <<
         (std::memcmp(v, original, sizeof(v)) == 0 ? "Unmodified\\n" : "Modified\\n");
     // The result is unspecified.
 }

.SH Possible output:

 Default value
 Default value
 Default value
 Unmodified

.SH See also

                                             constructs objects by
   uninitialized_default_construct           default-initialization in an uninitialized
   \fI(C++17)\fP                                   area of memory, defined by a range
                                             \fI(function template)\fP
                                             constructs objects by value-initialization
   uninitialized_value_construct_n           in an uninitialized area of memory,
   \fI(C++17)\fP                                   defined by a start and a count
                                             \fI(function template)\fP
                                             constructs objects by
   ranges::uninitialized_default_construct_n default-initialization in an uninitialized
   (C++20)                                   area of memory, defined by a start and
                                             count
                                             (niebloid)
