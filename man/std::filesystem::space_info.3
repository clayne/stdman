.TH std::filesystem::space_info 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::filesystem::space_info \- std::filesystem::space_info

.SH Synopsis
   Defined in header <filesystem>
   struct space_info {

   std::uintmax_t capacity;
   std::uintmax_t free;            \fI(since C++17)\fP
   std::uintmax_t available;

   };

   Represents the filesystem information as determined by filesystem::space.

.SH Member objects

   capacity  total size of the filesystem, in bytes
             \fI(public member object)\fP
   free      free space on the filesystem, in bytes
             \fI(public member object)\fP
             free space available to a non-privileged process (may be equal or less
   available than free)
             \fI(public member object)\fP

.SH Non-member functions

   operator== compares two space_infos
   (C++20)    \fI(function)\fP

operator==(std::filesystem::space_info)

   friend bool operator==( const space_info&, const space_info& ) =       \fI(since C++20)\fP
   default;

   Checks if capacity, free and available of both arguments are equal respectively.

   This function is not visible to ordinary unqualified or qualified lookup, and can
   only be found by argument-dependent lookup when std::filesystem::space_info is an
   associated class of the arguments.

   The != operator is synthesized from operator==.

.SH Example


// Run this code

 #include <iostream>
 #include <filesystem>
 #include <cstdint>

 void print_space_info(auto const& dirs, int width = 14)
 {
     std::cout << std::left;
     for (const auto s : {"Capacity", "Free", "Available", "Dir"})
         std::cout << "│ " << std::setw(width) << s << ' ';
     std::cout << '\\n';
     std::error_code ec;
     for (auto const& dir : dirs) {
         const std::filesystem::space_info si = std::filesystem::space(dir, ec);
         std::cout
             << "│ " << std::setw(width) << static_cast<std::intmax_t>(si.capacity) << ' '
             << "│ " << std::setw(width) << static_cast<std::intmax_t>(si.free) << ' '
             << "│ " << std::setw(width) << static_cast<std::intmax_t>(si.available) << ' '
             << "│ " << dir << '\\n';
     }
 }

 int main()
 {
     const auto dirs = { "/dev/null", "/tmp", "/home", "/null" };
     print_space_info(dirs);
 }

.SH Possible output:

 │ Capacity       │ Free           │ Available      │ Dir
 │ 8342851584     │ 8342851584     │ 8342851584     │ /dev/null
 │ 12884901888    │ 3045265408     │ 3045265408     │ /tmp
 │ 250321567744   │ 37623181312    │ 25152159744    │ /home
 │ -1             │ -1             │ -1             │ /null

.SH See also

   space   determines available free space on the file system
   \fI(C++17)\fP \fI(function)\fP
