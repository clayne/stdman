.TH std::format_error 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::format_error \- std::format_error

.SH Synopsis
   Defined in header <format>
   class format_error;         \fI(since C++20)\fP

   Defines the type of exception object thrown to report errors in the formatting
   library.

   std-format error-inheritance.svg

                                   Inheritance diagram

.SH Member functions

   constructor   constructs a new format_error object with the given message
                 \fI(public member function)\fP
   operator=     replaces the format_error object
                 \fI(public member function)\fP
   what          returns the explanatory string
                 \fI(public member function)\fP

std::format_error::format_error

   format_error( const std::string& what_arg );        \fB(1)\fP \fI(since C++20)\fP
   format_error( const char* what_arg );               \fB(2)\fP \fI(since C++20)\fP
   format_error( const format_error& other ) noexcept; \fB(3)\fP \fI(since C++20)\fP

   1-2) Constructs the exception object with what_arg as explanatory string that can be
   accessed through what().
   3) Copy constructor. If *this and other both have dynamic type std::format_error
   then std::strcmp(what(), other.what()) == 0.

.SH Parameters

   what_arg - explanatory string
   other    - another exception object to copy

.SH Exceptions

   1-2) May throw std::bad_alloc

.SH Notes

   Because copying std::format_error is not permitted to throw exceptions, this message
   is typically stored internally as a separately-allocated reference-counted string.
   This is also why there is no constructor taking std::string&&: it would have to copy
   the content anyway.

std::format_error::operator=

   format_error& operator=( const format_error& other ) noexcept;  \fI(since C++20)\fP

   Assigns the contents with those of other. If *this and other both have dynamic type
   std::format_error then std::strcmp(what(), other.what()) == 0 after assignment.

.SH Parameters

   other - another exception object to assign with

.SH Return value

   *this

std::format_error::what

   virtual const char* what() const noexcept;  \fI(since C++20)\fP

   Returns the explanatory string.

.SH Parameters

   \fI(none)\fP

.SH Return value

   Pointer to a null-terminated string with explanatory information. The string is
   suitable for conversion and display as a std::wstring. The pointer is guaranteed to
   be valid at least until the exception object from which it is obtained is destroyed,
   or until a non-const member function (e.g. copy assignment operator) on the
   exception object is called.

.SH Notes

   Implementations are allowed but not required to override what().

Inherited from std::runtime_error

Inherited from std::exception

.SH Member functions

   destructor   destroys the exception object
   \fB[virtual]\fP    \fI(virtual public member function of std::exception)\fP
   what         returns an explanatory string
   \fB[virtual]\fP    \fI(virtual public member function of std::exception)\fP

.SH Example

    This section is incomplete
    Reason: no example

.SH See also
