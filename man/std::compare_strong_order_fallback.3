.TH std::compare_strong_order_fallback 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::compare_strong_order_fallback \- std::compare_strong_order_fallback

.SH Synopsis
   Defined in header <compare>
   inline namespace /* unspecified */ {

   inline constexpr /* unspecified */                                     \fI(since C++20)\fP
   compare_strong_order_fallback = /* unspecified */;

   }
   Call signature
   template< class T, class U >

   requires /* see below */
   constexpr std::strong_ordering

   compare_strong_order_fallback(T&& t, U&& u) noexcept(/* see below
   */);

   Performs three-way comparison on t and u and produces a result of type
   std::strong_ordering, even if the operator <=> is unavailable.

   Let t and u be expressions and T and U denote decltype((t)) and decltype((u))
   respectively, std::compare_strong_order_fallback(t, u) is expression-equivalent to:

     * If std::is_same_v<std::decay_t<T>, std::decay_t<U>> is true:

          * std::strong_order(t, u), if it is a well-formed expression;
          * otherwise,

 t == u ? std::strong_ordering::equal :
 t < u  ? std::strong_ordering::less :
          std::strong_ordering::greater

                        if t == u and t < u are both well-formed and convertible to
                        bool, except that t and u are evaluated only once.

     * In all other cases, std::compare_strong_order_fallback(t, u) is ill-formed,
       which can result in substitution failure when it appears in the immediate
       context of a template instantiation.

  Expression-equivalent

   Expression e is expression-equivalent to expression f, if

     * e and f have the same effects, and
     * either both are constant subexpressions or else neither is a constant
       subexpression, and
     * either both are potentially-throwing or else neither is potentially-throwing
       (i.e. noexcept(e) == noexcept(f)).

  Customization point objects

   The name std::compare_strong_order_fallback denotes a customization point object,
   which is a const function object of a literal semiregular class type. For exposition
   purposes, the cv-unqualified version of its type is denoted as
   __compare_strong_order_fallback_fn.

   All instances of __compare_strong_order_fallback_fn are equal. The effects of
   invoking different instances of type __compare_strong_order_fallback_fn on the same
   arguments are equivalent, regardless of whether the expression denoting the instance
   is an lvalue or rvalue, and is const-qualified or not (however, a volatile-qualified
   instance is not required to be invocable). Thus, std::compare_strong_order_fallback
   can be copied freely and its copies can be used interchangeably.

   Given a set of types Args..., if std::declval<Args>()... meet the requirements for
   arguments to std::compare_strong_order_fallback above,
   __compare_strong_order_fallback_fn models

     * std::invocable<__compare_strong_order_fallback_fn, Args...>,
     * std::invocable<const __compare_strong_order_fallback_fn, Args...>,
     * std::invocable<__compare_strong_order_fallback_fn&, Args...>, and
     * std::invocable<const __compare_strong_order_fallback_fn&, Args...>.

   Otherwise, no function call operator of __compare_strong_order_fallback_fn
   participates in overload resolution.

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   strong_order performs 3-way comparison and produces a result of type
   (C++20)      std::strong_ordering
                (customization point object)
