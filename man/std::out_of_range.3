.TH std::out_of_range 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::out_of_range \- std::out_of_range

.SH Synopsis
   Defined in header <stdexcept>
   class out_of_range;

   Defines a type of object to be thrown as exception. It reports errors that are
   consequence of attempt to access elements out of defined range.

   It may be thrown by the member functions of std::bitset and std::basic_string, by
   std::stoi and std::stod families of functions, and by the bounds-checked member
   access functions (e.g. std::vector::at and std::map::at).

   std-out of range-inheritance.svg

                                   Inheritance diagram

.SH Member functions

   constructor   constructs a new out_of_range object with the given message
                 \fI(public member function)\fP
   operator=     replaces the out_of_range object
                 \fI(public member function)\fP
   what          returns the explanatory string
                 \fI(public member function)\fP

std::out_of_range::out_of_range

   out_of_range( const std::string& what_arg );        \fB(1)\fP
   out_of_range( const char* what_arg );               \fB(2)\fP \fI(since C++11)\fP
   out_of_range( const out_of_range& other );          \fB(3)\fP               \fI(until C++11)\fP
   out_of_range( const out_of_range& other ) noexcept;                   \fI(since C++11)\fP

   1-2) Constructs the exception object with what_arg as explanatory string that can be
   accessed through what().
   3) Copy constructor.
   If *this and other both have dynamic type std::out_of_range then std::strcmp(what(),
   other.what()) == 0.
   \fI(since C++11)\fP

.SH Parameters

   what_arg - explanatory string
   other    - another exception object to copy

.SH Exceptions

   1-2) May throw std::bad_alloc

.SH Notes

   Because copying std::out_of_range is not permitted to throw exceptions, this message
   is typically stored internally as a separately-allocated reference-counted string.
   This is also why there is no constructor taking std::string&&: it would have to copy
   the content anyway.

std::out_of_range::operator=

   out_of_range& operator=( const out_of_range& other );           \fI(until C++11)\fP
   out_of_range& operator=( const out_of_range& other ) noexcept;  \fI(since C++11)\fP

   Assigns the contents with those of other.
   If *this and other both have dynamic type std::out_of_range then std::strcmp(what(),
   other.what()) == 0 after assignment.
   \fI(since C++11)\fP

.SH Parameters

   other - another exception object to assign with

.SH Return value

   *this

std::out_of_range::what

   virtual const char* what() const throw();   \fI(until C++11)\fP
   virtual const char* what() const noexcept;  \fI(since C++11)\fP

   Returns the explanatory string.

.SH Parameters

   \fI(none)\fP

.SH Return value

   Pointer to a null-terminated string with explanatory information. The string is
   suitable for conversion and display as a std::wstring. The pointer is guaranteed to
   be valid at least until the exception object from which it is obtained is destroyed,
   or until a non-const member function (e.g. copy assignment operator) on the
   exception object is called.

.SH Notes

   Implementations are allowed but not required to override what().

Inherited from std::logic_error

Inherited from std::exception

.SH Member functions

   destructor   destroys the exception object
   \fB[virtual]\fP    \fI(virtual public member function of std::exception)\fP
   what         returns an explanatory string
   \fB[virtual]\fP    \fI(virtual public member function of std::exception)\fP

.SH Notes

   The standard error condition std::errc::result_out_of_range typically indicates the
   condition where the result, rather than the input, is out of range, and is more
   closely related to std::range_error and ERANGE.

.SH See also

   at      accesses the specified character with bounds checking
           \fI(public member function of std::basic_string<CharT,Traits,Allocator>)\fP
   at      accesses the specified character with bounds checking
   \fI(C++17)\fP \fI(public member function of std::basic_string_view<CharT,Traits>)\fP
   at      access specified element with bounds checking
           \fI(public member function of std::deque<T,Allocator>)\fP
   at      access specified element with bounds checking
           \fI(public member function of std::vector<T,Allocator>)\fP
   at      access specified element with bounds checking
   \fI(C++11)\fP \fI(public member function of std::array<T,N>)\fP
