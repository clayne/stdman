.TH std::basic_string_view::begin,std::basic_string_view::cbegin 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_string_view::begin,std::basic_string_view::cbegin \- std::basic_string_view::begin,std::basic_string_view::cbegin

.SH Synopsis
   constexpr const_iterator begin() const noexcept;   \fI(since C++17)\fP
   constexpr const_iterator cbegin() const noexcept;  \fI(since C++17)\fP

   Returns an iterator to the first character of the view.

   range-begin-end.svg

.SH Parameters

   \fI(none)\fP

.SH Return value

   const_iterator to the first character

.SH Complexity

   Constant

.SH Example


// Run this code

 #include <iostream>
 #include <string_view>
 #include <type_traits>

 int main()
 {
     std::string_view str_view("abcd");

     auto begin = str_view.begin();
     auto cbegin = str_view.cbegin();

     std::cout << *begin << '\\n';
     std::cout << *cbegin << '\\n';

     std::cout << std::boolalpha << (begin == cbegin) << '\\n';
     std::cout << std::boolalpha << (*begin == *cbegin) << '\\n';

     static_assert(std::is_same<decltype(begin), decltype(cbegin)>{});
 }

.SH Output:

 a
 a
 true
 true

.SH See also

   end     returns an iterator to the end
   cend    \fI(public member function)\fP
   \fI(C++17)\fP
   begin   returns an iterator to the beginning
   cbegin  \fI(public member function of std::basic_string<CharT,Traits,Allocator>)\fP
   \fI(C++11)\fP
