.TH std::literals::chrono_literals::operator""y 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::literals::chrono_literals::operator""y \- std::literals::chrono_literals::operator""y

.SH Synopsis
   Defined in header <chrono>
   constexpr std::chrono::year operator ""y( unsigned long long y )   \fB(1)\fP \fI(since C++20)\fP
   noexcept;

   Forms a std::chrono::year literal representing a year in the proleptic Gregorian
   calendar.

.SH Parameters

   y - the year value

.SH Return value

   A std::chrono::year initialized from int(y). If y is not in the range [-32767,
   32767], the stored value is unspecified.

.SH Possible implementation

   constexpr std::chrono::year operator ""y(unsigned long long y) noexcept
   {
       return std::chrono::year(static_cast<int>(y));
   }

.SH Notes

   This operator is declared in the namespace std::literals::chrono_literals, where
   both literals and chrono_literals are inline namespaces. Access to this operator can
   be gained with using namespace std::literals, using namespace std::chrono_literals,
   and using namespace std::literals::chrono_literals.

   In addition, within the namespace std::chrono, the directive using namespace
   literals::chrono_literals; is provided by the standard library, so that if a
   programmer uses using namespace std::chrono; to gain access to the classes in the
   chrono library, the corresponding literal operators become visible as well.

.SH Example

   
// Run this code

 #include <iostream>
 #include <chrono>

 int main()
 {
     using namespace std::literals;

     std::cout
         << int(2020y) << ' '
         << int(-220y) << ' '
         << int(3000y) << ' '
         << int(32768y) << ' '    // unspecified
         << int(65578y) << '\\n';  // unspecified
 }

.SH Possible output:

 2020 -220 3000 -32768 42

.SH See also

   constructor   constructs a year
                 \fI(public member function of std::chrono::year)\fP
