.TH std::for_each_n 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::for_each_n \- std::for_each_n

.SH Synopsis
   Defined in header <algorithm>
   template< class InputIt, class Size, class UnaryFunction >             \fI(since C++17)\fP
   InputIt for_each_n( InputIt first, Size n, UnaryFunction f );          \fI(until C++20)\fP
   template< class InputIt, class Size, class UnaryFunction >
   constexpr InputIt for_each_n( InputIt first, Size n,                   \fI(since C++20)\fP
   UnaryFunction f );                                             \fB(1)\fP
   template< class ExecutionPolicy, class ForwardIt, class Size,
   class UnaryFunction2 >                                             \fB(2)\fP \fI(since C++17)\fP
   ForwardIt for_each_n( ExecutionPolicy&& policy, ForwardIt
   first, Size n, UnaryFunction2 f );

   1) Applies the given function object f to the result of dereferencing every iterator
   in the range [first, first + n), in order.
   2) Applies the given function object f to the result of dereferencing every iterator
   in the range [first, first + n) (not necessarily in order). The algorithm is
   executed according to policy. This overload does not participate in overload
   resolution unless
   std::is_execution_policy_v<std::decay_t<ExecutionPolicy>>
   \fI(until C++20)\fP
   std::is_execution_policy_v<std::remove_cvref_t<ExecutionPolicy>>
   \fI(since C++20)\fP is true.

   For both overloads, if the iterator type is mutable, f may modify the elements of
   the range through the dereferenced iterator. If f returns a result, the result is
   ignored. If n is less than zero, the behavior is undefined.

   Unlike the rest of the parallel algorithms, for_each_n is not allowed to make copies
   of the elements in the sequence even if they are trivially copyable.

.SH Parameters

   first    -  the beginning of the range to apply the function to
   n        -  the number of elements to apply the function to
   policy   -  the execution policy to use. See execution policy for details.
               function object, to be applied to the result of dereferencing every
               iterator in the range [first, first + n)

               The signature of the function should be equivalent to the following:

   f        -  void fun(const Type &a);

               The signature does not need to have const &.
               The type Type must be such that an object of type InputIt can be
               dereferenced and then implicitly converted to Type.


.SH Type requirements
   -
   InputIt must meet the requirements of LegacyInputIterator.
   -
   ForwardIt must meet the requirements of LegacyForwardIterator.
   -
   UnaryFunction must meet the requirements of MoveConstructible. Does not have to be
   CopyConstructible
   -
   UnaryFunction2 must meet the requirements of CopyConstructible.

.SH Return value

   An iterator equal to first + n, or more formally, to std::advance(first, n).

.SH Complexity

   Exactly n applications of f

.SH Exceptions

   The overload with a template parameter named ExecutionPolicy reports errors as
   follows:

     * If execution of a function invoked as part of the algorithm throws an exception
       and ExecutionPolicy is one of the standard policies, std::terminate is called.
       For any other ExecutionPolicy, the behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is thrown.

.SH Possible implementation

   See also the implementation in libstdc++, libc++ and MSVC stdlib.

   template<class InputIt, class Size, class UnaryFunction>
   InputIt for_each_n(InputIt first, Size n, UnaryFunction f)
   {
       for (Size i = 0; i < n; ++first, (void) ++i) {
           f(*first);
       }
       return first;
   }

.SH Example


// Run this code

 #include <algorithm>
 #include <iostream>
 #include <vector>

 int main()
 {
     std::vector<int> ns{1, 2, 3, 4, 5};
     for (auto n: ns) std::cout << n << ", ";
     std::cout << '\\n';
     std::for_each_n(ns.begin(), 3, [](auto& n){ n *= 2; });
     for (auto n: ns) std::cout << n << ", ";
     std::cout << '\\n';
 }

.SH Output:

 1, 2, 3, 4, 5,
 2, 4, 6, 4, 5,

.SH See also

                         applies a function to a range of elements, storing results in
   transform             a destination range
                         \fI(function template)\fP
   range-for loop\fI(C++11)\fP executes loop over range
   for_each              applies a function to a range of elements
                         \fI(function template)\fP
   ranges::for_each_n    applies a function object to the first n elements of a
   (C++20)               sequence
                         (niebloid)
