.TH std::is_rvalue_reference 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_rvalue_reference \- std::is_rvalue_reference

.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct is_rvalue_reference;

   Checks whether T is an rvalue reference type. Provides the member constant value
   which is equal to true, if T is an rvalue reference type. Otherwise, value is equal
   to false.

   The behavior of a program that adds specializations for is_rvalue_reference
   or is_rvalue_reference_v
   \fI(since C++17)\fP is undefined.

.SH Template parameters

   T - a type to check

  Helper variable template

   template< class T >
   inline constexpr bool is_rvalue_reference_v =                          \fI(since C++17)\fP
   is_rvalue_reference<T>::value;

Inherited from std::integral_constant

.SH Member constants

   value    true if T is an rvalue reference type , false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Possible implementation

   template <class T> struct is_rvalue_reference      : std::false_type {};
   template <class T> struct is_rvalue_reference<T&&> : std::true_type {};

.SH Example


// Run this code

 #include <type_traits>

 class A {};

 int main()
 {
     static_assert( not std::is_rvalue_reference_v<A> );
     static_assert( not std::is_rvalue_reference_v<A&> );
     static_assert(     std::is_rvalue_reference_v<A&&> );
     static_assert( not std::is_rvalue_reference_v<int> );
     static_assert( not std::is_rvalue_reference_v<int&> );
     static_assert(     std::is_rvalue_reference_v<int&&> );
 }

.SH See also

   is_lvalue_reference checks if a type is a lvalue reference
   \fI(C++11)\fP             \fI(class template)\fP
   is_reference        checks if a type is either a lvalue reference or rvalue
   \fI(C++11)\fP             reference
                       \fI(class template)\fP
