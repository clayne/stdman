.TH std::reverse_iterator::operator[] 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::reverse_iterator::operator[] \- std::reverse_iterator::operator[]

.SH Synopsis
   /*unspecified*/ operator[]( difference_type n ) const;            \fI(until C++17)\fP
   constexpr /*unspecified*/ operator[]( difference_type n ) const;  \fI(since C++17)\fP

   Returns a reference to the element at specified relative location.

.SH Parameters

   n - position relative to current location.

.SH Return value

   A reference to the element at relative location, that is, base()[-n-1].

.SH Example


// Run this code

 #include <array>
 #include <cstddef>
 #include <iostream>
 #include <iterator>
 #include <list>
 #include <vector>

 int main()
 {
     {
         int a[]{0, 1, 2, 3};
         std::reverse_iterator<int*> iter{std::rbegin(a)};
         for (std::size_t i{}; i != std::size(a); ++i)
             std::cout << iter[i] << ' '; // decltype(iter[i]) is `int&`
         std::cout << '\\n';
     }
     {
         std::vector v{0, 1, 2, 3};
         std::reverse_iterator<std::vector<int>::iterator> iter{std::rbegin(v)};
         for (std::size_t i{}; i != std::size(v); ++i)
             std::cout << iter[i] << ' '; // decltype(iter[i]) is `int&`
         std::cout << '\\n';
     }
     {
         // constexpr context
         constexpr static std::array<int, 4> z{0, 1, 2, 3};
         constexpr std::reverse_iterator<decltype(z)::const_iterator> it{std::crbegin(z)};
         static_assert(it[1] == 2);
     }
     {
         std::list li{0, 1, 2, 3};
         std::reverse_iterator<std::list<int>::iterator> iter{std::rbegin(li)};
         *iter = 42; // OK
     //  iter[0] = 13; // compilation error ~ the underlying iterator
                       // does not model the random access iterator
     }
 }

.SH Output:

 3 2 1 0
 3 2 1 0

.SH See also

   operator*  accesses the pointed-to element
   operator-> \fI(public member function)\fP
