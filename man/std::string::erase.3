.TH std::basic_string::erase 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_string::erase \- std::basic_string::erase

.SH Synopsis
   basic_string& erase( size_type
   index = 0, size_type count = npos          \fI(until C++20)\fP
   );
   constexpr basic_string& erase(
   size_type index = 0, size_type             \fI(since C++20)\fP
   count = npos );
   iterator erase( iterator position                        \fI(until C++11)\fP
   );
   iterator erase( const_iterator                           \fI(since C++11)\fP
   position );                        \fB(1)\fP                   \fI(until C++20)\fP
   constexpr iterator erase(                                \fI(since C++20)\fP
   const_iterator position );
   iterator erase( iterator first,        \fB(2)\fP                             \fI(until C++11)\fP
   iterator last );
   iterator erase( const_iterator                                         \fI(since C++11)\fP
   first, const_iterator last );              \fB(3)\fP                         \fI(until C++20)\fP
   constexpr iterator erase(
   const_iterator first,                                                  \fI(since C++20)\fP
   const_iterator last );

   Removes specified characters from the string.

   1) Removes min(count, size() - index) characters starting at index.
   2) Removes the character at position.
   3) Removes the characters in the range [first, last).

.SH Parameters

   index       - first character to remove
   count       - number of characters to remove
   position    - iterator to the character to remove
   first, last - range of the characters to remove

.SH Return value

   1) *this
   2) iterator pointing to the character immediately following the character erased, or
   end() if no such character exists
   3) iterator pointing to the character last pointed to before the erase, or end() if
   no such character exists

.SH Exceptions

   1) std::out_of_range if index > size().
   2-3) Throws nothing.

   In any case, if an exception is thrown for any reason, this function has no effect
   \fI(strong exception guarantee)\fP.
   \fI(since C++11)\fP

.SH Example


// Run this code

 #include <algorithm>
 #include <iostream>
 #include <iterator>
 #include <string>

 int main()
 {
     std::string s = "This Is An Example";
     std::cout << "1) " << s << '\\n';

     s.erase(7, 3); // erases " An" using overload (1)
     std::cout << "2) " << s << '\\n';

     s.erase(std::find(s.begin(), s.end(), ' ')); // erases first ' '; overload (2)
     std::cout << "3) " << s << '\\n';

     s.erase(s.find(' ')); // trims from ' ' to the end of the string; overload (1)
     std::cout << "4) " << s << '\\n';

     auto it = std::next(s.begin(), s.find('s')); // obtains iterator to the first 's'
     s.erase(it, std::next(it, 2)); // erases "sI"; overload (3)
     std::cout << "5) " << s << '\\n';
 }

.SH Output:

 1) This Is An Example
 2) This Is Example
 3) ThisIs Example
 4) ThisIs
 5) This

.SH See also

   clear clears the contents
         \fI(public member function)\fP
