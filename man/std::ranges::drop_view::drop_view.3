.TH std::ranges::drop_view::drop_view 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ranges::drop_view::drop_view \- std::ranges::drop_view::drop_view

.SH Synopsis
   drop_view() requires std::default_initializable<V> = default;      \fB(1)\fP \fI(since C++20)\fP
   constexpr drop_view( V base, ranges::range_difference_t<V> count   \fB(2)\fP \fI(since C++20)\fP
   );

   Constructs a drop_view.

   1) Default constructor. Value-initializes the underlying view and initializes the
   count to 0. After construction, base() returns a copy of V() and size() equals
   to the size of the underlying view.
   2) Initializes the underlying view with std::move(base) and the count with count.
   After construction, base() returns a copy of base and size() returns
   ranges::size(base) - count if the size of base is not less than count, or 0
   otherwise.

.SH Parameters

   base  - the underlying view
   count - number of elements to skip.

.SH Example


// Run this code

 #include <algorithm>
 #include <array>
 #include <iostream>
 #include <iterator>
 #include <ranges>

 int main()
 {
     constexpr std::array hi{ 'H','e','l','l','o',',',' ','C','+','+','2','0' };

     std::ranges::for_each(hi, [](const char c){ std::cout << c; });
     std::cout << '\\n';

     constexpr auto n = std::distance(hi.cbegin(), std::ranges::find(hi, 'C'));

     auto cxx = std::ranges::drop_view{ hi, n };

     std::ranges::for_each(cxx, [](const char c){ std::cout << c; });
     std::cout << '\\n';
 }

.SH Output:

 Hello, C++20
 C++20
