.TH std::erase_if(std::set) 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::erase_if(std::set) \- std::erase_if(std::set)

.SH Synopsis
   Defined in header <set>
   template< class Key, class Compare, class Alloc, class Pred >

   typename std::set<Key,Compare,Alloc>::size_type                \fI(since C++20)\fP

   erase_if( std::set<Key,Compare,Alloc>& c, Pred pred );

   Erases all elements that satisfy the predicate pred from the container. Equivalent
   to

 auto old_size = c.size();
 for (auto i = c.begin(), last = c.end(); i != last; ) {
   if (pred(*i)) {
     i = c.erase(i);
   } else {
     ++i;
   }
 }
 return old_size - c.size();

.SH Parameters

   c    - container from which to erase
   pred - predicate that returns true if the element should be erased

.SH Return value

   The number of erased elements.

.SH Complexity

   Linear.

.SH Example


// Run this code

 #include <set>
 #include <iostream>

 template<typename Os, typename Container>
 inline Os& operator<<(Os& os, Container const& container)
 {
     os << "{ ";
     for (const auto& item : container) {
         os << item << ' ';
     }
     return os << "}";
 }

 int main()
 {
     std::set data { 3, 3, 4, 5, 5, 6, 6, 7, 2, 1, 0 };
     std::cout << "Original:\\n" << data << '\\n';

     auto divisible_by_3 = [](auto const& x) { return (x % 3) == 0; };

     const auto count = std::erase_if(data, divisible_by_3);

     std::cout << "Erase all items divisible by 3:\\n" << data << '\\n'
               << count << " items erased.\\n";
 }

.SH Output:

 Original:
 { 0 1 2 3 4 5 6 7 }
 Erase all items divisible by 3:
 { 1 2 4 5 7 }
 3 items erased.

.SH See also

   remove    removes elements satisfying specific criteria
   remove_if \fI(function template)\fP
