.TH std::is_trivial 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_trivial \- std::is_trivial

.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct is_trivial;

   If T is a trivial type, provides the member constant value equal to true. For any
   other type, value is false.

   The behavior is undefined if std::remove_all_extents_t<T> is an incomplete type and
   not (possibly cv-qualified) void.

   The behavior of a program that adds specializations for is_trivial
   or is_trivial_v
   \fI(since C++17)\fP is undefined.

.SH Template parameters

   T - a type to check

  Helper variable template

   template< class T >                                         \fI(since C++17)\fP
   inline constexpr bool is_trivial_v = is_trivial<T>::value;

Inherited from std::integral_constant

.SH Member constants

   value    true if T is a trivial type , false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Possible implementation

   template<class T>
   struct is_trivial : std::integral_constant<
       bool,
       std::is_trivially_copyable<T>::value &&
       std::is_trivially_default_constructible<T>::value
   > {};

.SH Example


// Run this code

 #include <iostream>
 #include <type_traits>

 struct A
 {
     int m;
 };

 struct B
 {
     B() {}
 };

 int main()
 {
     std::cout << std::boolalpha;
     std::cout << std::is_trivial<A>::value << '\\n';
     std::cout << std::is_trivial<B>::value << '\\n';
 }

.SH Output:

 true
 false

.SH See also

   is_trivially_copyable              checks if a type is trivially copyable
   \fI(C++11)\fP                            \fI(class template)\fP
   is_default_constructible
   is_trivially_default_constructible
   is_nothrow_default_constructible   checks if a type has a default constructor
   \fI(C++11)\fP                            \fI(class template)\fP
   \fI(C++11)\fP
   \fI(C++11)\fP
