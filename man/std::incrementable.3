.TH std::incrementable 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::incrementable \- std::incrementable

.SH Synopsis
   Defined in header <iterator>
   template<class I>

   concept incrementable =
   std::regular<I> &&
   std::weakly_incrementable<I> &&  \fI(since C++20)\fP
   requires(I i) {
   { i++ } -> std::same_as<I>;

   };

   This concept specifies requirements on types that can be incremented with the pre-
   and post-increment operators, whose increment operations are equality-preserving,
   and the type is std::equality_comparable.

   Unlike with std::weakly_incrementable, which only support single-pass algorithms,
   multi-pass one-directional algorithms can be used with types that model
   std::incrementable.

  Semantic requirements

   I models std::incrementable only if given any two incrementable objects a and b of
   type I:

     * bool(a == b) implies bool(a++ == b), and
     * bool(a == b) implies bool(((void)a++, a) == ++b)

  Equality preservation

   An expression is equality preserving if it results in equal outputs given equal
   inputs.

     * The inputs to an expression consist of its operands.
     * The outputs of an expression consist of its result and all operands modified by
       the expression (if any).

   In specification of standard concepts, operands are defined as the largest
   subexpressions that include only:

     * an id-expression, and
     * invocations of std::move, std::forward, and std::declval.

   The cv-qualification and value category of each operand is determined by assuming
   that each template type parameter denotes a cv-unqualified complete non-array object
   type.

   Every expression required to be equality preserving is further required to be
   stable: two evaluations of such an expression with the same input objects must have
   equal outputs absent any explicit intervening modification of those input objects.

   Unless noted otherwise, every expression used in a requires-expression is required
   to be equality preserving and stable, and the evaluation of the expression may
   modify only its non-constant operands. Operands that are constant must not be
   modified.

.SH See also

   weakly_incrementable specifies that a semiregular type can be incremented with pre-
   (C++20)              and post-increment operators
                        (concept)
   same_as              specifies that a type is the same as another type
   (C++20)              (concept)
