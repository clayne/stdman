.TH std::reverse_copy 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::reverse_copy \- std::reverse_copy

.SH Synopsis
   Defined in header <algorithm>
   template< class BidirIt, class OutputIt >
   OutputIt reverse_copy( BidirIt first, BidirIt last, OutputIt           \fI(until C++20)\fP
   d_first );
   template< class BidirIt, class OutputIt >
   constexpr OutputIt reverse_copy( BidirIt first, BidirIt last,          \fI(since C++20)\fP
   OutputIt d_first );                                            \fB(1)\fP
   template< class ExecutionPolicy, class BidirIt, class
   ForwardIt >
                                                                      \fB(2)\fP \fI(since C++17)\fP
   ForwardIt reverse_copy( ExecutionPolicy&& policy,

   BidirIt first, BidirIt last, ForwardIt d_first );

   1) Copies the elements from the range [first, last) to another range beginning at
   d_first in such a way that the elements in the new range are in reverse order.
   Behaves as if by executing the assignment *(d_first + (last - first) - 1 - i) =
   *(first + i) once for each non-negative i < (last - first).
   If the source and destination ranges (that is, [first, last) and [d_first,
   d_first+(last-first)), respectively) overlap, the behavior is undefined.
   2) Same as \fB(1)\fP, but executed according to policy. This overload does not participate
   in overload resolution unless
   std::is_execution_policy_v<std::decay_t<ExecutionPolicy>>
   \fI(until C++20)\fP
   std::is_execution_policy_v<std::remove_cvref_t<ExecutionPolicy>>
   \fI(since C++20)\fP is true.

.SH Parameters

   first, last      -      the range of elements to copy
   d_first          -      the beginning of the destination range
.SH Type requirements
   -
   BidirIt must meet the requirements of LegacyBidirectionalIterator.
   -
   OutputIt must meet the requirements of LegacyOutputIterator.
   -
   ForwardIt must meet the requirements of LegacyForwardIterator.

.SH Return value

   Output iterator to the element past the last element copied.

.SH Complexity

   Exactly last - first assignments.

.SH Exceptions

   The overload with a template parameter named ExecutionPolicy reports errors as
   follows:

     * If execution of a function invoked as part of the algorithm throws an exception
       and ExecutionPolicy is one of the standard policies, std::terminate is called.
       For any other ExecutionPolicy, the behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is thrown.

.SH Notes

   Implementations (e.g. MSVC STL) may enable vectorization when the both iterator
   types satisfy LegacyContiguousIterator and have the same value type, and the value
   type is TriviallyCopyable.

.SH Possible implementation

   See also the implementations in libstdc++, libc++, and MSVC STL.

   template<class BidirIt, class OutputIt>
   constexpr // since C++20
   OutputIt reverse_copy(BidirIt first, BidirIt last, OutputIt d_first)
   {
       while (first != last) {
           *(d_first++) = *(--last);
       }
       return d_first;
   }

.SH Example


// Run this code

 #include <vector>
 #include <iostream>
 #include <algorithm>

 int main()
 {
     auto print = [](std::vector<int> const& v) {
         for (const auto& value : v)
             std::cout << value << ' ';
         std::cout << '\\t';
     };

     std::vector<int> v({1,2,3});
     print(v);

     std::vector<int> destination(3);
     std::reverse_copy(std::begin(v), std::end(v), std::begin(destination));
     print(destination);

     std::reverse_copy(std::rbegin(v), std::rend(v), std::begin(destination));
     print(destination);
 }

.SH Output:

 1 2 3   3 2 1   1 2 3

.SH See also

   reverse              reverses the order of elements in a range
                        \fI(function template)\fP
   ranges::reverse_copy creates a copy of a range that is reversed
   (C++20)              (niebloid)
