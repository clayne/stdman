.TH std::chrono::year_month_day_last::operatorsys_days, 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::chrono::year_month_day_last::operatorsys_days, \- std::chrono::year_month_day_last::operatorsys_days,

.SH Synopsis

   constexpr operator std::chrono::sys_days() const noexcept;         \fB(1)\fP \fI(since C++20)\fP
   explicit constexpr operator std::chrono::local_days() const        \fB(2)\fP \fI(since C++20)\fP
   noexcept;

   Converts *this to a std::chrono::time_point representing the same date as this
   year_month_day_last. This is equivalent to composing a year_month_day from year(),
   month() and day() and converting that year_month_day to the destination type.

   1) Equivalent to std::chrono::sys_days(year()/month()/day())
   2) Equivalent to std::chrono::local_days(year()/month()/day())

.SH Example


// Run this code

 #include <array>
 #include <chrono>
 #include <iostream>
 #include <string_view>
 using namespace std::chrono;
 using namespace std::literals;

 int main()
 {
     constexpr std::array weekdays {
         "Sunday"sv, "Monday"sv, "Tuesday"sv, "Wednesday"sv,
         "Thursday"sv, "Friday"sv, "Saturday"sv
     };
     constexpr std::array quarters {
         "1st"sv, "2nd"sv, "3rd"sv, "4th"sv
     };
     constexpr auto mq {12 / 4}; // months per quarter
     constexpr year y {2021y};
     std::cout << "In " << static_cast<int>(y) << " the\\n";
     for (auto q = 1; q < 5; ++q) {
         const auto ls = y / month(q * mq) / Sunday[last];
         const auto ld = y / month(q * mq) / last;
         // subtract last Sunday from last day for day of week
         const auto index = (sys_days(ld) - sys_days(ls)).count();
         std::cout << quarters[q - 1] << " quarter ends on a "
                   << weekdays[index] << (q < 4 ? ',':'.') << '\\n';
     }
 }

.SH Output:

 In 2021 the
 1st quarter ends on a Wednesday,
 2nd quarter ends on a Wednesday,
 3rd quarter ends on a Thursday,
 4th quarter ends on a Friday.

.SH See also

   operator sys_days   converts to a std::chrono::time_point
   operator local_days \fI(public member function of std::chrono::year_month_day)\fP
