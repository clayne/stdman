.TH std::byte 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::byte \- std::byte

.SH Synopsis
   Defined in header <cstddef>
   enum class byte : unsigned char {} ;  \fI(since C++17)\fP

   std::byte is a distinct type that implements the concept of byte as specified in the
   C++ language definition.

   Like char and unsigned char, it can be used to access raw memory occupied by other
   objects (object representation), but unlike those types, it is not a character type
   and is not an arithmetic type. A byte is only a collection of bits, and the only
   operators defined for it are the bitwise ones.

.SH Non-member functions

std::to_integer

   template <class IntegerType>                               \fI(since C++17)\fP
   constexpr IntegerType to_integer( std::byte b ) noexcept;

   Equivalent to: return IntegerType(b); This overload participates in overload
   resolution only if std::is_integral_v<IntegerType> is true.

std::operator<<=,operator>>=

   template <class IntegerType>
   constexpr std::byte& operator<<=( std::byte& b, IntegerType shift  \fB(1)\fP \fI(since C++17)\fP
   ) noexcept;
   template <class IntegerType>
   constexpr std::byte& operator>>=( std::byte& b, IntegerType shift  \fB(2)\fP \fI(since C++17)\fP
   ) noexcept;

   1) Equivalent to: return b = b << shift; This overload participates in overload
   resolution only if std::is_integral_v<IntegerType> is true.
   2) Equivalent to: return b = b >> shift;

   This overload participates in overload resolution only if
   std::is_integral_v<IntegerType> is true.

std::operator<<,operator>>

   template <class IntegerType>
   constexpr std::byte operator <<( std::byte b, IntegerType shift )  \fB(1)\fP \fI(since C++17)\fP
   noexcept;
   template <class IntegerType>
   constexpr std::byte operator >>( std::byte b, IntegerType shift )  \fB(2)\fP \fI(since C++17)\fP
   noexcept;

   1) Equivalent to: return std::byte(static_cast<unsigned int>(b) << shift); This
   overload participates in overload resolution only if std::is_integral_v<IntegerType>
   is true.
   2) Equivalent to: return std::byte(static_cast<unsigned int>(b) >> shift);

   This overload participates in overload resolution only if
   std::is_integral_v<IntegerType> is true.

std::operator|=,operator&=,operator^=

   constexpr std::byte& operator|=( std::byte& l, std::byte r )       \fB(1)\fP \fI(since C++17)\fP
   noexcept;
   constexpr std::byte& operator&=( std::byte& l, std::byte r )       \fB(2)\fP \fI(since C++17)\fP
   noexcept;
   constexpr std::byte& operator^=( std::byte& l, std::byte r )       \fB(3)\fP \fI(since C++17)\fP
   noexcept;

   1) Equivalent to: return l = l | r;.
   2) Equivalent to: return l = l & r;.
   3) Equivalent to: return l = l ^ r;.

std::operator|,operator&,operator^,operator~

   constexpr std::byte operator|( std::byte l, std::byte r )          \fB(1)\fP \fI(since C++17)\fP
   noexcept;
   constexpr std::byte operator&( std::byte l, std::byte r )          \fB(2)\fP \fI(since C++17)\fP
   noexcept;
   constexpr std::byte operator^( std::byte l, std::byte r )          \fB(3)\fP \fI(since C++17)\fP
   noexcept;
   constexpr std::byte operator~( std::byte b ) noexcept;             \fB(4)\fP \fI(since C++17)\fP

   1) Equivalent to: return std::byte(static_cast<unsigned int>(l) |
   static_cast<unsigned int>(r));.
   2) Equivalent to: return std::byte(static_cast<unsigned int>(l) &
   static_cast<unsigned int>(r));.
   3) Equivalent to: return std::byte(static_cast<unsigned int>(l) ^
   static_cast<unsigned int>(r));.
   4) Equivalent to: return std::byte(~static_cast<unsigned int>(b));

.SH Notes

   A numeric value n can be converted to a byte value using std::byte{n}, due to C++17
   relaxed enum class initialization rules.

   A byte can be converted to a numeric value (such as to produce an integer hash of an
   object) using std::to_integer.

   Feature-test macro: __cpp_lib_byte

.SH Example


// Run this code

 #include <iostream>
 #include <cstddef>
 #include <bitset>

 std::ostream& operator<< (std::ostream& os, std::byte b) {
     return os << std::bitset<8>(std::to_integer<int>(b));
 }

 int main()
 {
     std::byte b{42};
     std::cout << "1. " << b << '\\n';

     // b *= 2 compilation error
     b <<= 1;
     std::cout << "2. " << b << '\\n';

     b >>= 1;
     std::cout << "3. " << b << '\\n';

     std::cout << "4. " << (b << 1) << '\\n';
     std::cout << "5. " << (b >> 1) << '\\n';

     b |= std::byte{0b11110000};
     std::cout << "6. " << b << '\\n';

     b &= std::byte{0b11110000};
     std::cout << "7. " << b << '\\n';

     b ^= std::byte{0b11111111};
     std::cout << "8. " << b << '\\n';
 }

.SH Output:

 1. 00101010
 2. 01010100
 3. 00101010
 4. 01010100
 5. 00010101
 6. 11111010
 7. 11110000
 8. 00001111
