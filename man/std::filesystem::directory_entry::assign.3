.TH std::filesystem::directory_entry::assign 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::filesystem::directory_entry::assign \- std::filesystem::directory_entry::assign

.SH Synopsis
   void assign( const std::filesystem::path& p );                       \fI(since C++17)\fP
   void assign( const std::filesystem::path& p, std::error_code& ec );

   Assigns new content to the directory entry object. Sets the path to p and calls
   refresh to update the cached attributes. If an error occurs, the values of the
   cached attributes are unspecified.

   This function does not commit any changes to the filesystem.

.SH Parameters

   p  - path to the filesystem object to which the directory entry will refer
   ec - out-parameter for error reporting in the non-throwing overload

.SH Return value

   \fI(none)\fP

.SH Exceptions

   The overload that does not take a std::error_code& parameter throws
   filesystem::filesystem_error on underlying OS API errors, constructed with p as the
   first path argument and the OS error code as the error code argument. The overload
   taking a std::error_code& parameter sets it to the OS API error code if an OS API
   call fails, and executes ec.clear() if no errors occur. Any overload not marked
   noexcept may throw std::bad_alloc if memory allocation fails.

.SH Example


// Run this code

 #include <filesystem>
 #include <fstream>
 #include <iostream>

 void print_entry_info(const std::filesystem::directory_entry& entry)
 {
     std::cout << "the entry " << entry;
     if (not entry.exists()) {
         std::cout << " does not exists on the file system\\n";
         return;
     }
     std::cout << " is ";
     if (entry.is_directory()) std::cout << "a directory\\n";
     if (entry.is_regular_file()) std::cout << "a regular file\\n";
     /*...*/
 }

 int main()
 {
     std::filesystem::current_path(std::filesystem::temp_directory_path());

     std::filesystem::directory_entry entry{std::filesystem::current_path()};
     print_entry_info(entry);

     std::filesystem::path name{"cppreference.html"};
     std::ofstream{name} << "C++";

     std::cout << "entry.assign();\\n";
     entry.assign(entry/name);
     print_entry_info(entry);

     std::cout << "remove(entry);\\n";
     std::filesystem::remove(entry);
     print_entry_info(entry); // the entry still contains old "state"

     std::cout << "entry.assign();\\n";
     entry.assign(entry); // or just call entry.refresh()
     print_entry_info(entry);
 }

.SH Possible output:

 the entry "/tmp" is a directory
 entry.assign();
 the entry "/tmp/cppreference.html" is a regular file
 remove(entry);
 the entry "/tmp/cppreference.html" is a regular file
 entry.assign();
 the entry "/tmp/cppreference.html" does not exists on the file system

.SH See also

   operator= assigns contents
             \fI(public member function)\fP
