.TH std::invalid_argument 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::invalid_argument \- std::invalid_argument

.SH Synopsis
   Defined in header <stdexcept>
   class invalid_argument;

   Defines a type of object to be thrown as exception. It reports errors that arise
   because an argument value has not been accepted.

   This exception is thrown by std::bitset::bitset, and the std::stoi and std::stof
   families of functions.

   std-invalid argument-inheritance.svg

                                   Inheritance diagram

.SH Member functions

   constructor   constructs a new invalid_argument object with the given message
                 \fI(public member function)\fP
   operator=     replaces the invalid_argument object
                 \fI(public member function)\fP
   what          returns the explanatory string
                 \fI(public member function)\fP

std::invalid_argument::invalid_argument

   invalid_argument( const std::string& what_arg );     \fB(1)\fP
   invalid_argument( const char* what_arg );            \fB(2)\fP \fI(since C++11)\fP
   invalid_argument( const invalid_argument& other );                     \fI(until C++11)\fP
   invalid_argument( const invalid_argument& other )    \fB(3)\fP               \fI(since C++11)\fP
   noexcept;

   1-2) Constructs the exception object with what_arg as explanatory string that can be
   accessed through what().
   3) Copy constructor.
   If *this and other both have dynamic type std::invalid_argument then
   std::strcmp(what(), other.what()) == 0.
   \fI(since C++11)\fP

.SH Parameters

   what_arg - explanatory string
   other    - another exception object to copy

.SH Exceptions

   1-2) May throw std::bad_alloc

.SH Notes

   Because copying std::invalid_argument is not permitted to throw exceptions, this
   message is typically stored internally as a separately-allocated reference-counted
   string. This is also why there is no constructor taking std::string&&: it would have
   to copy the content anyway.

std::invalid_argument::operator=

   invalid_argument& operator=( const invalid_argument& other );          \fI(until C++11)\fP
   invalid_argument& operator=( const invalid_argument& other )           \fI(since C++11)\fP
   noexcept;

   Assigns the contents with those of other.
   If *this and other both have dynamic type std::invalid_argument then
   std::strcmp(what(), other.what()) == 0 after assignment.
   \fI(since C++11)\fP

.SH Parameters

   other - another exception object to assign with

.SH Return value

   *this

std::invalid_argument::what

   virtual const char* what() const throw();   \fI(until C++11)\fP
   virtual const char* what() const noexcept;  \fI(since C++11)\fP

   Returns the explanatory string.

.SH Parameters

   \fI(none)\fP

.SH Return value

   Pointer to a null-terminated string with explanatory information. The string is
   suitable for conversion and display as a std::wstring. The pointer is guaranteed to
   be valid at least until the exception object from which it is obtained is destroyed,
   or until a non-const member function (e.g. copy assignment operator) on the
   exception object is called.

.SH Notes

   Implementations are allowed but not required to override what().

Inherited from std::logic_error

Inherited from std::exception

.SH Member functions

   destructor   destroys the exception object
   \fB[virtual]\fP    \fI(virtual public member function of std::exception)\fP
   what         returns an explanatory string
   \fB[virtual]\fP    \fI(virtual public member function of std::exception)\fP

.SH Notes

   The purpose of this exception type is similar to the error condition
   std::errc::invalid_argument (thrown in std::system_error from member functions of
   std::thread) and the related errno constant EINVAL.

.SH Example


// Run this code

 #include <bitset>
 #include <iostream>
 #include <stdexcept>
 #include <string>

 int main()
 {
     try {
         std::bitset<4>{"012"}; // Throws: only '0' or '1' expected
     } catch (std::invalid_argument const& ex) {
         std::cout << "#1: " << ex.what() << '\\n';
     }

     try {
         [[maybe_unused]] int f = std::stoi("ABBA"); // Throws: no conversion
     } catch (std::invalid_argument const& ex) {
         std::cout << "#2: " << ex.what() << '\\n';
     }

     try {
         [[maybe_unused]] float f = std::stof("(3.14)"); // Throws: no conversion
     } catch (std::invalid_argument const& ex) {
         std::cout << "#3: " << ex.what() << '\\n';
     }
 }

.SH Possible output:

 #1: bitset string ctor has invalid argument
 #2: stoi: no conversion
 #3: stof: no conversion
