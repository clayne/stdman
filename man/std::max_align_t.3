.TH std::max_align_t 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::max_align_t \- std::max_align_t

.SH Synopsis
   Defined in header <cstddef>
   typedef /*implementation-defined*/ max_align_t;  \fI(since C++11)\fP

   std::max_align_t is a trivial standard-layout type whose alignment requirement is at
   least as strict (as large) as that of every scalar type.

.SH Notes

   Pointers returned by allocation functions such as std::malloc are suitably aligned
   for any object, which means they are aligned at least as strictly as
   std::max_align_t.

   std::max_align_t is usually synonymous with the largest scalar type, which is long
   double on most platforms, and its alignment requirement is either 8 or 16.

.SH Example


// Run this code

 #include <iostream>
 #include <cstddef>
 int main()
 {
     std::cout << alignof(std::max_align_t) << '\\n';
 }

.SH Possible output:

 16

.SH References

     * C++20 standard (ISO/IEC 14882:2020):

              * 17.2.4 Sizes, alignments, and offsets [support.types.layout] (p:
                507-508)

     * C++17 standard (ISO/IEC 14882:2017):

              * 21.2.4 Sizes, alignments, and offsets [support.types.layout] (p: 479)

     * C++14 standard (ISO/IEC 14882:2014):

              * 18.2 Types [support.types] (p: 443-444)

     * C++11 standard (ISO/IEC 14882:2011):

              * 18.2 Types [support.types] (p: 454-455)

.SH See also

   alignof operator\fI(C++11)\fP queries alignment requirements of a type
   alignment_of            obtains the type's alignment requirements
   \fI(C++11)\fP                 \fI(class template)\fP
   is_scalar               checks if a type is a scalar type
   \fI(C++11)\fP                 \fI(class template)\fP
