.TH std::basic_string::end, 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_string::end, \- std::basic_string::end,

.SH Synopsis

   iterator end();                            \fI(until C++11)\fP
   iterator end() noexcept;                   \fI(since C++11)\fP
                                              \fI(until C++20)\fP
   constexpr iterator end() noexcept;         \fI(since C++20)\fP
   const_iterator end() const;                              \fI(until C++11)\fP
   const_iterator end() const                               \fI(since C++11)\fP
   noexcept;                          \fB(1)\fP                   \fI(until C++20)\fP
   constexpr const_iterator end()                           \fI(since C++20)\fP
   const noexcept;                        \fB(2)\fP
   const_iterator cend() const                                            \fI(since C++11)\fP
   noexcept;                                  \fB(3)\fP                         \fI(until C++20)\fP
   constexpr const_iterator cend()                                        \fI(since C++20)\fP
   const noexcept;

   Returns an iterator to the character following the last character of the string.
   This character acts as a placeholder, attempting to access it results in undefined
   behavior.

   range-begin-end.svg

.SH Parameters

   \fI(none)\fP

.SH Return value

   iterator to the character following the last character

.SH Complexity

   Constant

.SH Example


// Run this code

 #include <iostream>
 #include <algorithm>
 #include <iterator>
 #include <string>

 int main()
 {
     std::string s("Exemparl");
     std::next_permutation(s.begin(), s.end());

     std::string c;
     std::copy(s.cbegin(), s.cend(), std::back_inserter(c));
     std::cout << c <<'\\n'; // "Exemplar"
 }

.SH Output:

 Exemplar

.SH See also

   begin   returns an iterator to the beginning
   cbegin  \fI(public member function)\fP
   \fI(C++11)\fP
   end     returns an iterator to the end
   cend    \fI(public member function of std::basic_string_view<CharT,Traits>)\fP
   \fI(C++17)\fP
