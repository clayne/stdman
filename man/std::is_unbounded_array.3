.TH std::is_unbounded_array 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_unbounded_array \- std::is_unbounded_array

.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++20)\fP
   struct is_unbounded_array;

   Checks whether T is an array type of unknown bound. Provides the member constant
   value which is equal to true, if T is an array type of unknown bound. Otherwise,
   value is equal to false.

   The behavior of a program that adds specializations for is_unbounded_array or
   is_unbounded_array_v is undefined.

.SH Template parameters

   T - a type to check

  Helper variable template

   template< class T >
   inline constexpr bool is_unbounded_array_v =                           \fI(since C++20)\fP
   is_unbounded_array<T>::value;

Inherited from std::integral_constant

.SH Member constants

   value    true if T is an array type of unknown bound , false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Possible implementation

   template<class T>
   struct is_unbounded_array: std::false_type {};

   template<class T>
   struct is_unbounded_array<T[]> : std::true_type {};

.SH Notes

   Feature-test macro: __cpp_lib_bounded_array_traits

.SH Example


// Run this code

 #include <iostream>
 #include <type_traits>

 #define OUT(...) std::cout << #__VA_ARGS__ << " : " << __VA_ARGS__ << '\\n'

 class A {};

 int main()
 {
     std::cout << std::boolalpha;
     OUT( std::is_unbounded_array_v<A> );
     OUT( std::is_unbounded_array_v<A[]> );
     OUT( std::is_unbounded_array_v<A[3]> );
     OUT( std::is_unbounded_array_v<float> );
     OUT( std::is_unbounded_array_v<int> );
     OUT( std::is_unbounded_array_v<int[]> );
     OUT( std::is_unbounded_array_v<int[3]> );
 }

.SH Output:

 std::is_unbounded_array_v<A> : false
 std::is_unbounded_array_v<A[]> : true
 std::is_unbounded_array_v<A[3]> : false
 std::is_unbounded_array_v<float> : false
 std::is_unbounded_array_v<int> : false
 std::is_unbounded_array_v<int[]> : true
 std::is_unbounded_array_v<int[3]> : false

.SH See also

   is_array         checks if a type is an array type
   \fI(C++11)\fP          \fI(class template)\fP
   is_bounded_array checks if a type is an array type of known bound
   (C++20)          \fI(class template)\fP
   extent           obtains the size of an array type along a specified dimension
   \fI(C++11)\fP          \fI(class template)\fP
