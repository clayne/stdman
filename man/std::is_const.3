.TH std::is_const 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_const \- std::is_const

.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct is_const;

   If T is a const-qualified type (that is, const, or const volatile), provides the
   member constant value equal to true. For any other type, value is false.

   The behavior of a program that adds specializations for is_const
   or is_const_v
   \fI(since C++17)\fP is undefined.

.SH Template parameters

   T - a type to check

  Helper variable template

   template< class T >                                     \fI(since C++17)\fP
   inline constexpr bool is_const_v = is_const<T>::value;

Inherited from std::integral_constant

.SH Member constants

   value    true if T is a const-qualified type , false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Notes

   If T is a reference type then is_const<T>::value is always false. The proper way to
   check a potentially-reference type for const-ness is to remove the reference:
   is_const<typename remove_reference<T>::type>.

.SH Possible implementation

   template<class T> struct is_const          : std::false_type {};
   template<class T> struct is_const<const T> : std::true_type {};

.SH Example


// Run this code

 #include <iostream>
 #include <type_traits>

 int main()
 {
     std::cout << std::boolalpha
         << std::is_const_v<int> << '\\n' // false
         << std::is_const_v<const int> << '\\n' // true
         << std::is_const_v<const int*> // false
         << " because the pointer itself can be changed but not the int pointed at\\n"
         << std::is_const_v<int* const> // true
         << " because the pointer itself can't be changed but the int pointed at can\\n"
         << std::is_const_v<const int&> << '\\n' // false
         << std::is_const_v<std::remove_reference_t<const int&>> << '\\n' // true
         ;
 }

.SH Output:

 false
 true
 false because the pointer itself can be changed but not the int pointed at
 true because the pointer itself can't be changed but the int pointed at can
 false
 true

.SH See also

   is_volatile checks if a type is volatile-qualified
   \fI(C++11)\fP     \fI(class template)\fP
   as_const    obtains a reference to const to its argument
   \fI(C++17)\fP     \fI(function template)\fP
