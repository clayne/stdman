.TH std::atomic::operator= 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::atomic::operator= \- std::atomic::operator=

.SH Synopsis
   T operator=( T desired ) noexcept;
   T operator=( T desired ) volatile noexcept;                      \fB(1)\fP \fI(since C++11)\fP
   atomic& operator=( const atomic& ) = delete;   \fB(1)\fP \fI(since C++11)\fP
   atomic& operator=( const atomic& ) volatile =                    \fB(2)\fP \fI(since C++11)\fP
   delete;

   1) Atomically assigns the desired value to the atomic variable. Equivalent to
   store(desired).
   The volatile-qualified version is deprecated if std::atomic<T>::is_always_lock_free
   is false.
   \fI(since C++20)\fP
   2) Atomic variables are not CopyAssignable.

.SH Parameters

   desired - value to assign

.SH Return value

   desired.

.SH Notes

   Unlike most assignment operators, the assignment operators for atomic types do not
   return a reference to their left-hand arguments. They return a copy of the stored
   value instead.

.SH See also

   constructor   constructs an atomic object
                 \fI(public member function)\fP
