.TH std::cosh,std::coshf,std::coshl 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::cosh,std::coshf,std::coshl \- std::cosh,std::coshf,std::coshl

.SH Synopsis
   Defined in header <cmath>
   float cosh ( float arg );
   float coshf( float arg );                     \fI(since C++11)\fP
   double cosh ( double arg );           \fB(1)\fP \fB(2)\fP
   long double cosh ( long double arg );
   long double coshl( long double arg );     \fB(3)\fP               \fI(since C++11)\fP
   double cosh ( IntegralType arg );             \fB(4)\fP           \fI(since C++11)\fP

   1-3) Computes the hyperbolic cosine of arg
   4) A set of overloads or a function template accepting an argument of any integral
   type. Equivalent to \fB(2)\fP (the argument is cast to double).

.SH Parameters

   arg - value of a floating-point or Integral type

.SH Return value

   If no errors occur, the hyperbolic cosine of arg (cosh(arg), or

   earg
   +e-arg
   2

   ) is returned.

   If a range error due to overflow occurs, +HUGE_VAL, +HUGE_VALF, or +HUGE_VALL is
   returned.

.SH Error handling

   Errors are reported as specified in math_errhandling.

   If the implementation supports IEEE floating-point arithmetic (IEC 60559),

     * if the argument is ±0, 1 is returned
     * If the argument is ±∞, +∞ is returned
     * if the argument is NaN, NaN is returned

.SH Notes

   For the IEEE-compatible type double, if |arg| > 710.5, then cosh(arg) overflows.

.SH Example


// Run this code

 #include <iostream>
 #include <cmath>
 #include <cerrno>
 #include <cstring>
 #include <cfenv>

 // #pragma STDC FENV_ACCESS ON
 int main()
 {
     std::cout << "cosh(1) = " << std::cosh(1) << '\\n'
               << "cosh(-1) = " << std::cosh(-1) << '\\n'
               << "log(sinh(1)+cosh(1)=" << std::log(std::sinh(1)+std::cosh(1)) << '\\n';
     // special values
     std::cout << "cosh(+0) = " << std::cosh(0.0) << '\\n'
               << "cosh(-0) = " << std::cosh(-0.0) << '\\n';
     // error handling
     errno=0;
     std::feclearexcept(FE_ALL_EXCEPT);
     std::cout << "cosh(710.5) = " << std::cosh(710.5) << '\\n';
     if (errno == ERANGE)
         std::cout << "    errno == ERANGE: " << std::strerror(errno) << '\\n';
     if (std::fetestexcept(FE_OVERFLOW))
         std::cout << "    FE_OVERFLOW raised\\n";
 }

.SH Possible output:

 cosh\fB(1)\fP = 1.54308
 cosh(-1) = 1.54308
 log(sinh\fB(1)\fP+cosh(1)=1
 cosh(+0) = 1
 cosh(-0) = 1
 cosh(710.5) = inf
     errno == ERANGE: Numerical result out of range
     FE_OVERFLOW raised

.SH See also

   sinh
   sinhf               computes hyperbolic sine (\\({\\small\\sinh{x} }\\)sinh(x))
   sinhl               \fI(function)\fP
   \fI(C++11)\fP
   \fI(C++11)\fP
   tanh
   tanhf               computes hyperbolic tangent (\\({\\small\\tanh{x} }\\)tanh(x))
   tanhl               \fI(function)\fP
   \fI(C++11)\fP
   \fI(C++11)\fP
   acosh
   acoshf              computes the inverse hyperbolic cosine
   acoshl              (\\({\\small\\operatorname{arcosh}{x} }\\)arcosh(x))
   \fI(C++11)\fP             \fI(function)\fP
   \fI(C++11)\fP
   \fI(C++11)\fP
                       computes hyperbolic cosine of a complex number
   cosh(std::complex)  (\\({\\small\\cosh{z} }\\)cosh(z))
                       \fI(function template)\fP
   cosh(std::valarray) applies the function std::cosh to each element of valarray
                       \fI(function template)\fP
