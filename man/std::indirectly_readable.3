.TH std::indirectly_readable 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::indirectly_readable \- std::indirectly_readable

.SH Synopsis
   Defined in header <iterator>
   template< class In >

   concept __IndirectlyReadableImpl = // exposition only
   requires(const In in) {
   typename std::iter_value_t<In>;
   typename std::iter_reference_t<In>;
   typename std::iter_rvalue_reference_t<In>;
   { *in } -> std::same_as<std::iter_reference_t<In>>;
   { ranges::iter_move(in) } ->
   std::same_as<std::iter_rvalue_reference_t<In>>;
   } &&                                                                   \fI(since C++20)\fP
   std::common_reference_with<
   std::iter_reference_t<In>&&, std::iter_value_t<In>&
   > &&
   std::common_reference_with<
   std::iter_reference_t<In>&&, std::iter_rvalue_reference_t<In>&&
   > &&
   std::common_reference_with<
   std::iter_rvalue_reference_t<In>&&, const std::iter_value_t<In>&

   >;
   template< class In >

   concept indirectly_readable =                                          \fI(since C++20)\fP

   __IndirectlyReadableImpl<std::remove_cvref_t<In>>;

   The concept indirectly_readable is modeled by types that are readable by applying
   operator*, such as pointers, smart pointers, and input iterators.

  Semantic requirements

   Given a value i of type I, I models indirectly_readable only if all concepts it
   subsumes are modeled and the expression *i is equality preserving.

  Equality preservation

   An expression is equality preserving if it results in equal outputs given equal
   inputs.

     * The inputs to an expression consist of its operands.
     * The outputs of an expression consist of its result and all operands modified by
       the expression (if any).

   In specification of standard concepts, operands are defined as the largest
   subexpressions that include only:

     * an id-expression, and
     * invocations of std::move, std::forward, and std::declval.

   The cv-qualification and value category of each operand is determined by assuming
   that each template type parameter denotes a cv-unqualified complete non-array object
   type.

   Every expression required to be equality preserving is further required to be
   stable: two evaluations of such an expression with the same input objects must have
   equal outputs absent any explicit intervening modification of those input objects.

   Unless noted otherwise, every expression used in a requires-expression is required
   to be equality preserving and stable, and the evaluation of the expression may
   modify only its non-constant operands. Operands that are constant must not be
   modified.
