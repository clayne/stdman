.TH std::is_arithmetic 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_arithmetic \- std::is_arithmetic

.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct is_arithmetic;

   If T is an arithmetic type (that is, an integral type or a floating-point type) or a
   cv-qualified version thereof, provides the member constant value equal to true. For
   any other type, value is false.

   The behavior of a program that adds specializations for is_arithmetic
   or is_arithmetic_v
   \fI(since C++17)\fP is undefined.

.SH Template parameters

   T - a type to check

  Helper variable template

   template< class T >                                               \fI(since C++17)\fP
   inline constexpr bool is_arithmetic_v = is_arithmetic<T>::value;

Inherited from std::integral_constant

.SH Member constants

   value    true if T is an arithmetic type , false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Notes

   Arithmetic types are the built-in types for which the arithmetic operators (+, -, *,
   /) are defined (possibly in combination with the usual arithmetic conversions)

   Specializations of std::numeric_limits are provided for all arithmetic types.

.SH Possible implementation

   template< class T >
   struct is_arithmetic : std::integral_constant<bool,
                                                 std::is_integral<T>::value ||
                                                 std::is_floating_point<T>::value> {};

.SH Example


// Run this code

 #include <iostream>
 #include <type_traits>

 class A {};

 int main()
 {
     std::cout << std::boolalpha
         << "A:           " << std::is_arithmetic_v<A>           << '\\n' // false
         << "bool:        " << std::is_arithmetic_v<bool>        << '\\n' // true
         << "int:         " << std::is_arithmetic_v<int>         << '\\n' // true
         << "int const:   " << std::is_arithmetic_v<int const>   << '\\n' // true
         << "int &:       " << std::is_arithmetic_v<int&>        << '\\n' // false
         << "int *:       " << std::is_arithmetic_v<int*>        << '\\n' // false
         << "float:       " << std::is_arithmetic_v<float>       << '\\n' // true
         << "float const: " << std::is_arithmetic_v<float const> << '\\n' // true
         << "float &:     " << std::is_arithmetic_v<float&>      << '\\n' // false
         << "float *:     " << std::is_arithmetic_v<float*>      << '\\n' // false
         << "char:        " << std::is_arithmetic_v<char>        << '\\n' // true
         << "char const:  " << std::is_arithmetic_v<char const>  << '\\n' // true
         << "char &:      " << std::is_arithmetic_v<char&>       << '\\n' // false
         << "char *:      " << std::is_arithmetic_v<char*>       << '\\n' // false
         ;
 }

.SH Output:

 A:           false
 bool:        true
 int:         true
 int const:   true
 int &:       false
 int *:       false
 float:       true
 float const: true
 float &:     false
 float *:     false
 char:        true
 char const:  true
 char &:      false
 char *:      false

.SH See also

   is_integral       checks if a type is an integral type
   \fI(C++11)\fP           \fI(class template)\fP
   is_floating_point checks if a type is a floating-point type
   \fI(C++11)\fP           \fI(class template)\fP
