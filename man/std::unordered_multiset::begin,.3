.TH std::unordered_multiset::begin, 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::unordered_multiset::begin, \- std::unordered_multiset::begin,

.SH Synopsis

   iterator begin() noexcept;               \fI(since C++11)\fP
   const_iterator begin() const noexcept;   \fI(since C++11)\fP
   const_iterator cbegin() const noexcept;  \fI(since C++11)\fP

   Returns an iterator to the first element of the unordered_multiset.

   If the unordered_multiset is empty, the returned iterator will be equal to end().

   range-begin-end.svg

.SH Parameters

   \fI(none)\fP

.SH Return value

   Iterator to the first element.

.SH Complexity

   Constant.

.SH Notes

   Because both iterator and const_iterator are constant iterators (and may in fact be
   the same type), it is not possible to mutate the elements of the container through
   an iterator returned by any of these member functions.

.SH Example


// Run this code

 #include <iostream>
 #include <iterator>
 #include <string>
 #include <unordered_set>

 int main() {
     const std::unordered_multiset<std::string> words = {
         "some", "words", "to", "count",
         "count", "these", "words"
     };

     for (auto it = words.begin(); it != words.end(); ) {
         auto cnt = words.count(*it);
         std::cout << *it << ":\\t" << cnt << '\\n';
         std::advance(it, cnt); // all cnt elements have equivalent keys
     }
 }

.SH Possible output:

 some:   1
 words:  2
 to:     1
 count:  2
 these:  1

.SH See also

   end     returns an iterator to the end
   cend    \fI(public member function)\fP
   \fI(C++11)\fP
   begin
   cbegin  returns an iterator to the beginning of a container or array
   \fI(C++11)\fP \fI(function template)\fP
   \fI(C++14)\fP
