.TH std::sized_sentinel_for,std::disable_sized_sentinel_for 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::sized_sentinel_for,std::disable_sized_sentinel_for \- std::sized_sentinel_for,std::disable_sized_sentinel_for

.SH Synopsis
   Defined in header <iterator>
   template<class S, class I>

   concept sized_sentinel_for =
   std::sentinel_for<S, I> &&
   !std::disable_sized_sentinel_for<std::remove_cv_t<S>,                        (since
   std::remove_cv_t<I>> &&                                                  \fB(1)\fP C++20)
   requires(const I& i, const S& s) {
   { s - i } -> std::same_as<std::iter_difference_t<I>>;
   { i - s } -> std::same_as<std::iter_difference_t<I>>;

   };
   template<class S, class I>                                               \fB(2)\fP (since
   inline constexpr bool disable_sized_sentinel_for = false;                    C++20)

   1) The sized_sentinel_for concept specifies that an object of the iterator type I
   and an object of the sentinel type S can be subtracted to compute the distance
   between them in constant time.
   2) The disable_sized_sentinel_for variable template can be used to prevent iterators
   and sentinels that can be subtracted but do not actually model sized_sentinel_for
   from satisfying the concept.
   The variable template is allowed to be specialized for cv-unqualified non-array
   object type S and I, as long as at least one of which is a program-defined type.
   Such specializations shall be usable in constant expressions and have type const
   bool.

  Semantic requirements

   Let i be an iterator of type I, and s a sentinel of type S such that [i, s) denotes
   a range. Let n be the smallest number of applications of ++i necessary to make
   bool(i == s) be true. I and S model sized_sentinel_for<S, I> only if:

     * If n is representable by std::iter_difference_t<I>, then s - i is well-defined
       and equals n; and
     * If -n is representable by std::iter_difference_t<I>, then i - s is well-defined
       and equals -n.
     * Subtraction between i and s has constant time complexity.

  Equality preservation

   An expression is equality preserving if it results in equal outputs given equal
   inputs.

     * The inputs to an expression consist of its operands.
     * The outputs of an expression consist of its result and all operands modified by
       the expression (if any).

   In specification of standard concepts, operands are defined as the largest
   subexpressions that include only:

     * an id-expression, and
     * invocations of std::move, std::forward, and std::declval.

   The cv-qualification and value category of each operand is determined by assuming
   that each template type parameter denotes a cv-unqualified complete non-array object
   type.

   Every expression required to be equality preserving is further required to be
   stable: two evaluations of such an expression with the same input objects must have
   equal outputs absent any explicit intervening modification of those input objects.

   Unless noted otherwise, every expression used in a requires-expression is required
   to be equality preserving and stable, and the evaluation of the expression may
   modify only its non-constant operands. Operands that are constant must not be
   modified.

  Implicit expression variations

   A requires-expression that uses an expression that is non-modifying for some
   constant lvalue operand also implicitly requires additional variations of that
   expression that accept a non-constant lvalue or (possibly constant) rvalue for the
   given operand unless such an expression variation is explicitly required with
   differing semantics. These implicit expression variations must meet the same
   semantic requirements of the declared expression. The extent to which an
   implementation validates the syntax of the variations is unspecified.

.SH See also

   ranges::sized_range specifies that a range knows its size in constant time
   (C++20)             (concept)
   ranges::size        returns an integer equal to the size of a range
   (C++20)             (customization point object)
