.TH std::next_permutation 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::next_permutation \- std::next_permutation

.SH Synopsis
   Defined in header <algorithm>
   template< class BidirIt >
   bool next_permutation( BidirIt first, BidirIt            \fI(until C++20)\fP
   last );
   template< class BidirIt >
   constexpr bool next_permutation( BidirIt first,          \fI(since C++20)\fP
   BidirIt last );                                  \fB(1)\fP
   template< class BidirIt, class Compare >
   bool next_permutation( BidirIt first, BidirIt                          \fI(until C++20)\fP
   last, Compare comp );                                \fB(2)\fP
   template< class BidirIt, class Compare >
   constexpr bool next_permutation( BidirIt first,                        \fI(since C++20)\fP
   BidirIt last, Compare comp );

   Permutes the range [first, last) into the next permutation, where the set of all
   permutations is ordered lexicographically with respect to operator< or comp. Returns
   true if such a "next permutation" exists; otherwise transforms the range into the
   lexicographically first permutation (as if by std::sort(first, last, comp)) and
   returns false.

.SH Parameters

   first, last -  the range of elements to permute
                  comparison function object (i.e. an object that satisfies the
                  requirements of Compare) which returns true if the first argument
                  is less than the second.

                  The signature of the comparison function should be equivalent to the
                  following:

                  bool cmp(const Type1 &a, const Type2 &b);
   comp        -
                  While the signature does not need to have const &, the function must
                  not modify the objects passed to it and must be able to accept all
                  values of type (possibly const) Type1 and Type2 regardless of value
                  category (thus, Type1 & is not allowed
                  , nor is Type1 unless for Type1 a move is equivalent to a copy
                  \fI(since C++11)\fP).
                  The types Type1 and Type2 must be such that an object of type BidirIt
                  can be dereferenced and then implicitly converted to both of them.

.SH Type requirements
   -
   BidirIt must meet the requirements of ValueSwappable and
   LegacyBidirectionalIterator.

.SH Return value

   true if the new permutation is lexicographically greater than the old. false if the
   last permutation was reached and the range was reset to the first permutation.

.SH Exceptions

   Any exceptions thrown from iterator operations or the element swap.

.SH Complexity

   At most N/2 swaps, where N = std::distance(first, last). Averaged over the entire
   sequence of permutations, typical implementations use about 3 comparisons and 1.5
   swaps per call.

.SH Notes

   Implementations (e.g. MSVC STL) may enable vectorization when the iterator type
   satisfies LegacyContiguousIterator and swapping its value type calls neither
   non-trivial special member function nor ADL-found swap.

.SH Possible implementation

   template<class BidirIt>
   bool next_permutation(BidirIt first, BidirIt last)
   {
     auto r_first = std::make_reverse_iterator(last);
     auto r_last = std::make_reverse_iterator(first);
     auto left = std::is_sorted_until(r_first, r_last);
     if(left != r_last){
       auto right = std::upper_bound(r_first, left, *left);
       std::iter_swap(left, right);
     }
     std::reverse(left.base(), last);
     return left != r_last;
   }

.SH Example

   The following code prints all three permutations of the string "aba"


// Run this code

 #include <algorithm>
 #include <string>
 #include <iostream>

 int main()
 {
     std::string s = "aba";
     std::sort(s.begin(), s.end());
     do {
         std::cout << s << '\\n';
     } while(std::next_permutation(s.begin(), s.end()));
 }

.SH Output:

 aab
 aba
 baa

.SH See also

   is_permutation           determines if a sequence is a permutation of another
   \fI(C++11)\fP                  sequence
                            \fI(function template)\fP
                            generates the next smaller lexicographic permutation of a
   prev_permutation         range of elements
                            \fI(function template)\fP
   ranges::next_permutation generates the next greater lexicographic permutation of a
   (C++20)                  range of elements
                            (niebloid)
