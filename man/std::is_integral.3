.TH std::is_integral 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_integral \- std::is_integral

.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct is_integral;

   Checks whether T is an integral type. Provides the member constant value which is
   equal to true, if T is the type bool, char
   , char8_t
   \fI(since C++20)\fP, char16_t, char32_t, wchar_t, short, int, long, long long, or any
   implementation-defined extended integer types, including any signed, unsigned, and
   cv-qualified variants. Otherwise, value is equal to false.

   The behavior of a program that adds specializations for is_integral
   or is_integral_v
   \fI(since C++17)\fP is undefined.

.SH Template parameters

   T - a type to check

  Helper variable template

   template< class T >                                           \fI(since C++17)\fP
   inline constexpr bool is_integral_v = is_integral<T>::value;

Inherited from std::integral_constant

.SH Member constants

   value    true if T is an integral type , false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Example


// Run this code

 #include <iostream>
 #include <iomanip>
 #include <type_traits>

 class A {};

 enum E : int {};

 template <class T>
 T f(T i)
 {
     static_assert(std::is_integral<T>::value, "Integral required.");
     return i;
 }

 #define SHOW(...) std::cout << std::setw(29) << #__VA_ARGS__ << " == " << __VA_ARGS__ << '\\n'

 int main()
 {
     std::cout << std::boolalpha;

     SHOW( std::is_integral<A>::value );
     SHOW( std::is_integral_v<E> );
     SHOW( std::is_integral_v<float> );
     SHOW( std::is_integral_v<int> );
     SHOW( std::is_integral_v<const int> );
     SHOW( std::is_integral_v<bool> );
     SHOW( f(123) );
 }

.SH Output:

    std::is_integral<A>::value == false
         std::is_integral_v<E> == false
     std::is_integral_v<float> == false
       std::is_integral_v<int> == true
 std::is_integral_v<const int> == true
      std::is_integral_v<bool> == true
                        f(123) == 123

.SH See also

   integral          specifies that a type is an integral type
   (C++20)           (concept)
   is_integer        identifies integer types
   \fB[static]\fP          \fI(public static member constant of std::numeric_limits<T>)\fP
   is_floating_point checks if a type is a floating-point type
   \fI(C++11)\fP           \fI(class template)\fP
   is_arithmetic     checks if a type is an arithmetic type
   \fI(C++11)\fP           \fI(class template)\fP
   is_enum           checks if a type is an enumeration type
   \fI(C++11)\fP           \fI(class template)\fP
