.TH std::logic_error 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::logic_error \- std::logic_error

.SH Synopsis
   Defined in header <stdexcept>
   class logic_error;

   Defines a type of object to be thrown as exception. It reports errors that are a
   consequence of faulty logic within the program such as violating logical
   preconditions or class invariants and may be preventable.

   No standard library components throw this exception directly, but the exception
   types std::invalid_argument, std::domain_error, std::length_error,
   std::out_of_range, std::future_error, and std::experimental::bad_optional_access are
   derived from std::logic_error.

   std-logic error-inheritance.svg

                                   Inheritance diagram

.SH Member functions

   constructor   constructs a new logic_error object with the given message
                 \fI(public member function)\fP
   operator=     replaces the logic_error object
                 \fI(public member function)\fP
   what          returns the explanatory string
                 \fI(public member function)\fP

std::logic_error::logic_error

   logic_error( const std::string& what_arg );       \fB(1)\fP
   logic_error( const char* what_arg );              \fB(2)\fP \fI(since C++11)\fP
   logic_error( const logic_error& other );          \fB(3)\fP               \fI(until C++11)\fP
   logic_error( const logic_error& other ) noexcept;                   \fI(since C++11)\fP

   1-2) Constructs the exception object with what_arg as explanatory string that can be
   accessed through what().
   3) Copy constructor.
   If *this and other both have dynamic type std::logic_error then std::strcmp(what(),
   other.what()) == 0.
   \fI(since C++11)\fP

.SH Parameters

   what_arg - explanatory string
   other    - another exception object to copy

.SH Exceptions

   1-2) May throw std::bad_alloc

.SH Notes

   Because copying std::logic_error is not permitted to throw exceptions, this message
   is typically stored internally as a separately-allocated reference-counted string.
   This is also why there is no constructor taking std::string&&: it would have to copy
   the content anyway.

std::logic_error::operator=

   logic_error& operator=( const logic_error& other );           \fI(until C++11)\fP
   logic_error& operator=( const logic_error& other ) noexcept;  \fI(since C++11)\fP

   Assigns the contents with those of other.
   If *this and other both have dynamic type std::logic_error then std::strcmp(what(),
   other.what()) == 0 after assignment.
   \fI(since C++11)\fP

.SH Parameters

   other - another exception object to assign with

.SH Return value

   *this

std::logic_error::what

   virtual const char* what() const throw();   \fI(until C++11)\fP
   virtual const char* what() const noexcept;  \fI(since C++11)\fP

   Returns the explanatory string.

.SH Parameters

   \fI(none)\fP

.SH Return value

   Pointer to a null-terminated string with explanatory information. The string is
   suitable for conversion and display as a std::wstring. The pointer is guaranteed to
   be valid at least until the exception object from which it is obtained is destroyed,
   or until a non-const member function (e.g. copy assignment operator) on the
   exception object is called.

.SH Notes

   Implementations are allowed but not required to override what().

Inherited from std::exception

.SH Member functions

   destructor   destroys the exception object
   \fB[virtual]\fP    \fI(virtual public member function of std::exception)\fP
   what         returns an explanatory string
   \fB[virtual]\fP    \fI(virtual public member function of std::exception)\fP
