.TH std::predicate 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::predicate \- std::predicate

.SH Synopsis
   Defined in header <concepts>
   template < class F, class... Args >

   concept predicate =                                  \fI(since C++20)\fP
   std::regular_invocable<F, Args...> &&

   boolean-testable<std::invoke_result_t<F, Args...>>;

   The concept predicate<F, Args...> specifies that F is a predicate that accepts
   arguments whose types and value categories are encoded by Args..., i.e., it can be
   invoked with these arguments to produce a boolean-testable result.

   Note that regular_invocable requires the invocation to not modify either the
   callable object or the arguments and be equality-preserving.

  Equality preservation

   An expression is equality preserving if it results in equal outputs given equal
   inputs.

     * The inputs to an expression consist of its operands.
     * The outputs of an expression consist of its result and all operands modified by
       the expression (if any).

   In specification of standard concepts, operands are defined as the largest
   subexpressions that include only:

     * an id-expression, and
     * invocations of std::move, std::forward, and std::declval.

   The cv-qualification and value category of each operand is determined by assuming
   that each template type parameter denotes a cv-unqualified complete non-array object
   type.

   Every expression required to be equality preserving is further required to be
   stable: two evaluations of such an expression with the same input objects must have
   equal outputs absent any explicit intervening modification of those input objects.
