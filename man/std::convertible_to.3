.TH std::convertible_to 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::convertible_to \- std::convertible_to

.SH Synopsis
   Defined in header <concepts>
   template <class From, class To>

   concept convertible_to =
   std::is_convertible_v<From, To> &&      \fI(since C++20)\fP
   requires {
   static_cast<To>(std::declval<From>());

   };

   The concept convertible_to<From, To> specifies that an expression of the same type
   and value category as those of std::declval<From>() can be implicitly and explicitly
   converted to the type To, and the two forms of conversion are equivalent.

  Semantic requirements

   convertible_to<From, To> is modeled only if, given a function fun of type
   std::add_rvalue_reference_t<From>() such that the expression fun() is
   equality-preserving (see below),

     * Either

          * To is neither an object type nor a reference-to-object type, or
          * static_cast<To>(fun()) is equal to []() -> To { return fun(); }(), and

     * One of the following is true:

          * std::add_rvalue_reference_t<From> is not a reference-to-object type, or
          * std::add_rvalue_reference_t<From> is an rvalue reference to a
            non-const-qualified type, and the resulting state of the object referenced
            by fun() is valid but unspecified after either expression above; or
          * the object referred to by fun() is not modified by either expression above.

  Equality preservation

   An expression is equality preserving if it results in equal outputs given equal
   inputs.

     * The inputs to an expression consist of its operands.
     * The outputs of an expression consist of its result and all operands modified by
       the expression (if any).

   In specification of standard concepts, operands are defined as the largest
   subexpressions that include only:

     * an id-expression, and
     * invocations of std::move, std::forward, and std::declval.

   The cv-qualification and value category of each operand is determined by assuming
   that each template type parameter denotes a cv-unqualified complete non-array object
   type.

   Every expression required to be equality preserving is further required to be
   stable: two evaluations of such an expression with the same input objects must have
   equal outputs absent any explicit intervening modification of those input objects.

   Unless noted otherwise, every expression used in a requires-expression is required
   to be equality preserving and stable, and the evaluation of the expression may
   modify only its non-constant operands. Operands that are constant must not be
   modified.

.SH See also

   is_convertible
   is_nothrow_convertible checks if a type can be converted to the other type
   \fI(C++11)\fP                \fI(class template)\fP
   (C++20)
