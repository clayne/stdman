.TH std::uninitialized_fill 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::uninitialized_fill \- std::uninitialized_fill

.SH Synopsis
   Defined in header <memory>
   template< class ForwardIt, class T >
   void uninitialized_fill( ForwardIt first, ForwardIt last, const T& \fB(1)\fP
   value );
   template< class ExecutionPolicy, class ForwardIt, class T >
   void uninitialized_fill( ExecutionPolicy&& policy, ForwardIt       \fB(2)\fP \fI(since C++17)\fP
   first, ForwardIt last, const T& value );

   1) Copies the given value to an uninitialized memory area, defined by the range
   [first, last) as if by

 for (; first != last; ++first)
     ::new (/*VOIDIFY*/(*first))
         typename std::iterator_traits<ForwardIt>::value_type(value);

   where /*VOIDIFY*/(e) is:

      static_cast<void*>(&e)                                              \fI(until C++11)\fP
      static_cast<void*>(std::addressof(e))                               \fI(since C++11)\fP
                                                                          \fI(until C++20)\fP
      const_cast<void*>(static_cast<const volatile                        \fI(since C++20)\fP
      void*>(std::addressof(e)))

   If an exception is thrown during the initialization, the objects already constructed
   are destroyed in an unspecified order.
   2) Same as \fB(1)\fP, but executed according to policy. This overload does not participate
   in overload resolution unless
   std::is_execution_policy_v<std::decay_t<ExecutionPolicy>>
   \fI(until C++20)\fP
   std::is_execution_policy_v<std::remove_cvref_t<ExecutionPolicy>>
   \fI(since C++20)\fP is true.

.SH Parameters

   first, last          -         the range of the elements to initialize
   value                -         the value to construct the elements with
   policy               -         the execution policy to use. See execution policy for
                                  details.
.SH Type requirements
   -
   ForwardIt must meet the requirements of LegacyForwardIterator.
   -
   No increment, assignment, comparison, or indirection through valid instances of
   ForwardIt may throw exceptions.
   Applying &* to a ForwardIt value must yield a pointer to its value type.
   \fI(until C++11)\fP

.SH Return value

   \fI(none)\fP

.SH Complexity

   Linear in the distance between first and last.

.SH Exceptions

   The overload with a template parameter named ExecutionPolicy reports errors as
   follows:

     * If execution of a function invoked as part of the algorithm throws an exception
       and ExecutionPolicy is one of the standard policies, std::terminate is called.
       For any other ExecutionPolicy, the behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is thrown.

.SH Possible implementation

   template<class ForwardIt, class T>
   void uninitialized_fill(ForwardIt first, ForwardIt last, const T& value)
   {
       using V = typename std::iterator_traits<ForwardIt>::value_type;
       ForwardIt current = first;
       try {
           for (; current != last; ++current) {
               ::new (const_cast<void*>(static_cast<const volatile void*>(
                   std::addressof(*current)))) V(value);
           }
       }  catch (...) {
           for (; first != current; ++first) {
               first->~V();
           }
           throw;
       }
   }

.SH Example


// Run this code

 #include <algorithm>
 #include <iostream>
 #include <memory>
 #include <string>
 #include <tuple>

 int main()
 {
     std::string* p;
     std::size_t sz;
     std::tie(p, sz) = std::get_temporary_buffer<std::string>(4);

     std::uninitialized_fill(p, p+sz, "Example");

     for (std::string* i = p; i != p+sz; ++i) {
         std::cout << *i << '\\n';
         i->~basic_string<char>();
     }
     std::return_temporary_buffer(p);
 }

.SH Output:

.SH Example
.SH Example
.SH Example
.SH Example

.SH See also

                              copies an object to an uninitialized area of memory,
   uninitialized_fill_n       defined by a start and a count
                              \fI(function template)\fP
   ranges::uninitialized_fill copies an object to an uninitialized area of memory,
   (C++20)                    defined by a range
                              (niebloid)
