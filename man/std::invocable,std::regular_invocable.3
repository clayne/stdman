.TH std::invocable,std::regular_invocable 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::invocable,std::regular_invocable \- std::invocable,std::regular_invocable

.SH Synopsis
   Defined in header <concepts>
   template< class F, class... Args >

   concept invocable =
   requires(F&& f, Args&&... args) {                              \fI(since C++20)\fP
   std::invoke(std::forward<F>(f), std::forward<Args>(args)...);
   /* not required to be equality preserving */

   };
   template< class F, class... Args >                             \fI(since C++20)\fP
   concept regular_invocable = std::invocable<F, Args...>;

   The invocable concept specifies that a callable type F can be called with a set of
   argument Args... using the function template std::invoke.

   The regular_invocable concept adds to the invocable concept by requiring the invoke
   expression to be equality preserving and not modify either the function object or
   the arguments.

  Equality preservation

   An expression is equality preserving if it results in equal outputs given equal
   inputs.

     * The inputs to an expression consist of its operands.
     * The outputs of an expression consist of its result and all operands modified by
       the expression (if any).

   In specification of standard concepts, operands are defined as the largest
   subexpressions that include only:

     * an id-expression, and
     * invocations of std::move, std::forward, and std::declval.

   The cv-qualification and value category of each operand is determined by assuming
   that each template type parameter denotes a cv-unqualified complete non-array object
   type.

   Every expression required to be equality preserving is further required to be
   stable: two evaluations of such an expression with the same input objects must have
   equal outputs absent any explicit intervening modification of those input objects.

   Unless noted otherwise, every expression used in a requires-expression is required
   to be equality preserving and stable, and the evaluation of the expression may
   modify only its non-constant operands. Operands that are constant must not be
   modified.

.SH Notes

   The distinction between invocable and regular_invocable is purely semantic.

   A random number generator may satisfy invocable but cannot satisfy regular_invocable
   (comical ones excluded).

.SH See also

   is_invocable
   is_invocable_r         checks if a type can be invoked (as if by std::invoke) with
   is_nothrow_invocable   the given argument types
   is_nothrow_invocable_r \fI(class template)\fP
   \fI(C++17)\fP
