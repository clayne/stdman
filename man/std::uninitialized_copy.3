.TH std::uninitialized_copy 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::uninitialized_copy \- std::uninitialized_copy

.SH Synopsis
   Defined in header <memory>
   template< class InputIt, class NoThrowForwardIt >

   NoThrowForwardIt uninitialized_copy( InputIt first, InputIt last,  \fB(1)\fP

   NoThrowForwardIt d_first );
   template< class ExecutionPolicy, class ForwardIt, class
   NoThrowForwardIt >

   NoThrowForwardIt uninitialized_copy( ExecutionPolicy&& policy,     \fB(2)\fP \fI(since C++17)\fP
   ForwardIt first, ForwardIt last,

   NoThrowForwardIt d_first );

   1) Copies elements from the range [first, last) to an uninitialized memory area
   beginning at d_first as if by

 for (; first != last; ++d_first, (void) ++first)
    ::new (/*VOIDIFY*/(*d_first))
       typename std::iterator_traits<NoThrowForwardIt>::value_type(*first);

   where /*VOIDIFY*/(e) is:

      static_cast<void*>(&e)                                              \fI(until C++11)\fP
      static_cast<void*>(std::addressof(e))                               \fI(since C++11)\fP
                                                                          \fI(until C++20)\fP
      const_cast<void*>(static_cast<const volatile                        \fI(since C++20)\fP
      void*>(std::addressof(e)))

   If an exception is thrown during the initialization, the objects already constructed
   are destroyed in an unspecified order.
   2) Same as \fB(1)\fP, but executed according to policy. This overload does not participate
   in overload resolution unless
   std::is_execution_policy_v<std::decay_t<ExecutionPolicy>>
   \fI(until C++20)\fP
   std::is_execution_policy_v<std::remove_cvref_t<ExecutionPolicy>>
   \fI(since C++20)\fP is true.

.SH Parameters

   first, last            -        the range of the elements to copy
   d_first                -        the beginning of the destination range
   policy                 -        the execution policy to use. See execution policy
                                   for details.
.SH Type requirements
   -
   InputIt must meet the requirements of LegacyInputIterator.
   -
   ForwardIt must meet the requirements of LegacyForwardIterator.
   -
   NoThrowForwardIt must meet the requirements of LegacyForwardIterator.
   -
   No increment, assignment, comparison, or indirection through valid instances of
   NoThrowForwardIt may throw exceptions.
   Applying &* to a NoThrowForwardIt value must yield a pointer to its value type.
   \fI(until C++11)\fP

.SH Return value

   Iterator to the element past the last element copied.

.SH Complexity

   Linear in the distance between first and last.

.SH Exceptions

   The overload with a template parameter named ExecutionPolicy reports errors as
   follows:

     * If execution of a function invoked as part of the algorithm throws an exception
       and ExecutionPolicy is one of the standard policies, std::terminate is called.
       For any other ExecutionPolicy, the behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is thrown.

.SH Possible implementation

template<class InputIt, class NoThrowForwardIt>
NoThrowForwardIt uninitialized_copy(InputIt first, InputIt last, NoThrowForwardIt d_first)
{
    using T = typename std::iterator_traits<NoThrowForwardIt>::value_type;
    NoThrowForwardIt current = d_first;
    try {
        for (; first != last; ++first, (void) ++current) {
            ::new (const_cast<void*>(static_cast<const volatile void*>(
                std::addressof(*current)))) T(*first);
        }
        return current;
    } catch (...) {
        for (; d_first != current; ++d_first) {
            d_first->~T();
        }
        throw;
    }
}

.SH Example


// Run this code

 #include <iostream>
 #include <memory>
 #include <cstdlib>
 #include <string>

 int main()
 {
     const char *v[] = {"This", "is", "an", "example"};

     auto sz = std::size(v);

     if(void *pbuf = std::aligned_alloc(alignof(std::string), sizeof(std::string) * sz))
     {
         try
         {
             auto first = static_cast<std::string*>(pbuf);
             auto last = std::uninitialized_copy(std::begin(v), std::end(v), first);

             for (auto it = first; it != last; ++it)
                 std::cout << *it << '_';
             std::cout << '\\n';

             std::destroy(first, last);
         }
         catch(...) {}
         std::free(pbuf);
     }
 }

.SH Output:

 This_is_an_example_

.SH See also

   uninitialized_copy_n       copies a number of objects to an uninitialized area of
   \fI(C++11)\fP                    memory
                              \fI(function template)\fP
   ranges::uninitialized_copy copies a range of objects to an uninitialized area of
   (C++20)                    memory
                              (niebloid)
