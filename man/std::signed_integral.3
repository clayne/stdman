.TH std::signed_integral 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::signed_integral \- std::signed_integral

.SH Synopsis
   Defined in header <concepts>
   template < class T >                                                \fI(since C++20)\fP
   concept signed_integral = std::integral<T> && std::is_signed_v<T>;

   The concept signed_integral<T> is satisfied if and only if T is an integral type and
   std::is_signed_v<T> is true.

.SH Notes

   signed_integral<T> may be satisfied by a type that is not a signed integer type, for
   example, char (on a system where char is signed).

.SH Example


// Run this code

 #include <concepts>
 #include <iostream>

 void print(std::signed_integral auto i) {
     std::cout << "Signed integral: " << i << '\\n';
 }

 void print(std::unsigned_integral auto u) {
     std::cout << "Unsigned integral: " << u << '\\n';
 }

 void print(auto x) {
     std::cout << "Non-integral: " << x << '\\n';
 }

 int main() {
     print(42);     // signed
     print(0xFull); // unsigned
     print(true);   // unsigned
     print('A');    // platform-dependent
     print(4e-2);   // non-integral (hex-float)
     print("∫∫∫");  // non-integral
 }

.SH Possible output:

 Signed integral: 42
 Unsigned integral: 15
 Unsigned integral: 1
 Signed integral: A
 Non-integral: 0.04
 Non-integral: ∫∫∫

.SH See also

   is_integral checks if a type is an integral type
   \fI(C++11)\fP     \fI(class template)\fP
   is_signed   checks if a type is a signed arithmetic type
   \fI(C++11)\fP     \fI(class template)\fP
