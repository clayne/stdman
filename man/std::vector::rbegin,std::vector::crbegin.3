.TH std::vector::rbegin,std::vector::crbegin 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::vector::rbegin,std::vector::crbegin \- std::vector::rbegin,std::vector::crbegin

.SH Synopsis
   reverse_iterator rbegin();                                  \fI(until C++11)\fP
   reverse_iterator rbegin() noexcept;                         \fI(since C++11)\fP
                                                               \fI(until C++20)\fP
   constexpr reverse_iterator rbegin() noexcept;               \fI(since C++20)\fP
   const_reverse_iterator rbegin() const;                      \fI(until C++11)\fP
   const_reverse_iterator rbegin() const noexcept;             \fI(since C++11)\fP
                                                               \fI(until C++20)\fP
   constexpr const_reverse_iterator rbegin() const noexcept;   \fI(since C++20)\fP
   const_reverse_iterator crbegin() const noexcept;            \fI(since C++11)\fP
                                                               \fI(until C++20)\fP
   constexpr const_reverse_iterator crbegin() const noexcept;  \fI(since C++20)\fP

   Returns a reverse iterator to the first element of the reversed vector. It
   corresponds to the last element of the non-reversed vector. If the vector is empty,
   the returned iterator is equal to rend().

   range-rbegin-rend.svg

.SH Parameters

   \fI(none)\fP

.SH Return value

   Reverse iterator to the first element.

.SH Complexity

   Constant.

.SH Example


// Run this code

 #include <algorithm>
 #include <iostream>
 #include <numeric>
 #include <string>
 #include <vector>

 int main()
 {
     std::vector<int> nums {1, 2, 4, 8, 16};
     std::vector<std::string> fruits {"orange", "apple", "raspberry"};
     std::vector<char> empty;

     // Print vector.
     std::for_each(nums.rbegin(), nums.rend(), [](const int n) { std::cout << n << ' '; });
     std::cout << '\\n';

     // Sums all integers in the vector nums (if any), printing only the result.
     std::cout << "Sum of nums: "
               << std::accumulate(nums.rbegin(), nums.rend(), 0) << '\\n';

     // Prints the first fruit in the vector fruits, checking if there is any.
     if (!fruits.empty())
         std::cout << "First fruit: " << *fruits.rbegin() << '\\n';

     if (empty.rbegin() == empty.rend())
         std::cout << "vector 'empty' is indeed empty.\\n";
 }

.SH Output:

 16 8 4 2 1
 Sum of nums: 31
 First fruit: raspberry
 vector 'empty' is indeed empty.

.SH See also

   rend    returns a reverse iterator to the end
   crend   \fI(public member function)\fP
   \fI(C++11)\fP
   rbegin  returns a reverse iterator to the beginning of a container or array
   crbegin \fI(function template)\fP
   \fI(C++14)\fP
