.TH std::uninitialized_move_n 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::uninitialized_move_n \- std::uninitialized_move_n

.SH Synopsis
   Defined in header <memory>
   template< class InputIt, class Size, class NoThrowForwardIt >

   std::pair<InputIt, NoThrowForwardIt>                               \fB(1)\fP \fI(since C++17)\fP

   uninitialized_move_n( InputIt first, Size count, NoThrowForwardIt
   d_first );
   template< class ExecutionPolicy, class ForwardIt, class Size,
   class NoThrowForwardIt >

   std::pair<ForwardIt, NoThrowForwardIt>                             \fB(2)\fP \fI(since C++17)\fP
   uninitialized_move_n( ExecutionPolicy&& policy, ForwardIt first,
   Size count,

   NoThrowForwardIt d_first );

   1) Moves count elements from a range beginning at first to an uninitialized memory
   area beginning at d_first as if by

 for ( ; n > 0; ++d_first, (void) ++first, --n)
    ::new (/*VOIDIFY*/(*d_first))
       typename std::iterator_traits<NoThrowForwardIt>::value_type(std::move(*first));

   where /*VOIDIFY*/(e) is:

      static_cast<void*>(std::addressof(e))                               \fI(until C++20)\fP
      const_cast<void*>(static_cast<const volatile                        \fI(since C++20)\fP
      void*>(std::addressof(e)))

   If an exception is thrown during the initialization, some objects in the source
   range are left in a valid but unspecified state, and the objects already constructed
   are destroyed in an unspecified order.
   2) Same as \fB(1)\fP, but executed according to policy. This overload does not participate
   in overload resolution unless
   std::is_execution_policy_v<std::decay_t<ExecutionPolicy>>
   \fI(until C++20)\fP
   std::is_execution_policy_v<std::remove_cvref_t<ExecutionPolicy>>
   \fI(since C++20)\fP is true.

.SH Parameters

   first              -          the beginning of the range of the elements to move
   d_first            -          the beginning of the destination range
   count              -          the number of elements to move
   policy             -          the execution policy to use. See execution policy for
                                 details.
.SH Type requirements
   -
   InputIt must meet the requirements of LegacyInputIterator.
   -
   ForwardIt must meet the requirements of LegacyForwardIterator.
   -
   NoThrowForwardIt must meet the requirements of LegacyForwardIterator.
   -
   No increment, assignment, comparison, or indirection through valid instances of
   NoThrowForwardIt may throw exceptions.

.SH Return value

   A pair whose first element is an iterator to the element past the last element moved
   in the source range, and whose second element is an iterator to the element past the
   last element moved in the destination range.

.SH Complexity

   Linear in count.

.SH Exceptions

   The overload with a template parameter named ExecutionPolicy reports errors as
   follows:

     * If execution of a function invoked as part of the algorithm throws an exception
       and ExecutionPolicy is one of the standard policies, std::terminate is called.
       For any other ExecutionPolicy, the behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is thrown.

.SH Possible implementation

   template<class InputIt, class Size, class NoThrowForwardIt>
   std::pair<InputIt, NoThrowForwardIt>
       uninitialized_move_n(InputIt first, Size count, NoThrowForwardIt d_first)
   {
       using Value = typename std::iterator_traits<NoThrowForwardIt>::value_type;
       NoThrowForwardIt current = d_first;
       try {
           for (; count > 0; ++first, (void) ++current, --count) {
               ::new (const_cast<void*>(static_cast<const volatile void*>(
                   std::addressof(*current)))) Value(std::move(*first));
           }
       } catch (...) {
           std::destroy(d_first, current);
           throw;
       }
       return {first, current};
   }

.SH Example


// Run this code

 #include <cstdlib>
 #include <iomanip>
 #include <iostream>
 #include <memory>
 #include <string>

 void print(auto rem, auto first, auto last) {
     for (std::cout << rem; first != last; ++first)
         std::cout << std::quoted(*first) << ' ';
     std::cout << '\\n';
 }

 int main() {
     std::string in[] { "One", "Definition", "Rule" };
     print("initially, in: ", std::begin(in), std::end(in));

     if (
         constexpr auto sz = std::size(in);
         void* out = std::aligned_alloc(alignof(std::string), sizeof(std::string) * sz)
     ) {
         try {
             auto first {static_cast<std::string*>(out)};
             auto last {first + sz};
             std::uninitialized_move_n(std::begin(in), sz, first);

             print("after move, in: ", std::begin(in), std::end(in));
             print("after move, out: ", first, last);

             std::destroy(first, last);
         }
         catch (...) {
             std::cout << "Exception!\\n";
         }
         std::free(out);
     }
 }

.SH Possible output:

 initially, in: "One" "Definition" "Rule"
 after move, in: "" "" ""
 after move, out: "One" "Definition" "Rule"

.SH See also

   uninitialized_move           moves a range of objects to an uninitialized area of
   \fI(C++17)\fP                      memory
                                \fI(function template)\fP
   uninitialized_copy_n         copies a number of objects to an uninitialized area of
   \fI(C++11)\fP                      memory
                                \fI(function template)\fP
   ranges::uninitialized_move_n moves a number of objects to an uninitialized area of
   (C++20)                      memory
                                (niebloid)
