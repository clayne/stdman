.TH std::chrono::round(std::chrono::duration) 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::chrono::round(std::chrono::duration) \- std::chrono::round(std::chrono::duration)

.SH Synopsis
   Defined in header <chrono>
   template <class ToDuration, class Rep, class Period>
   constexpr ToDuration round( const std::chrono::duration<Rep, Period>&  \fI(since C++17)\fP
   d );

   Returns the value t representable in ToDuration that is the closest to d. If there
   are two such values, returns the even value (that is, the value t such that t % 2 ==
   0).

   The function does not participate in the overload resolution unless ToDuration is a
   specialization of std::chrono::duration and
   std::chrono::treat_as_floating_point_v<typename ToDuration::rep> is false

.SH Parameters

   d - duration to convert

.SH Return value

   d rounded to the nearest duration of type ToDuration, rounding to even in halfway
   cases.

.SH Possible implementation

   namespace detail {
   template<class> inline constexpr bool is_duration_v = false;
   template<class Rep, class Period> inline constexpr bool is_duration_v<
       std::chrono::duration<Rep, Period>> = true;
   }

   template <class To, class Rep, class Period,
             class = std::enable_if_t<detail::is_duration_v<To> &&
                    !std::chrono::treat_as_floating_point_v<typename To::rep>>>
   constexpr To round(const std::chrono::duration<Rep, Period>& d)
   {
       To t0 = std::chrono::floor<To>(d);
       To t1 = t0 + To{1};
       auto diff0 = d - t0;
       auto diff1 = t1 - d;
       if (diff0 == diff1) {
           if (t0.count() & 1)
               return t1;
           return t0;
       } else if (diff0 < diff1) {
           return t0;
       }
       return t1;
   }

.SH Example


// Run this code

 #include <iostream>
 #include <iomanip>
 #include <chrono>

 int main()
 {
     using namespace std::chrono_literals;
     using Sec = std::chrono::seconds;
     for (std::cout << "Duration\\tFloor\\tRound\\tCeil\\n"
                       "(ms)\\t\\t(sec)\\t(sec)\\t(sec)\\n";
         auto const d: {
             +4999ms, +5000ms, +5001ms, +5499ms, +5500ms, +5999ms,
             -4999ms, -5000ms, -5001ms, -5499ms, -5500ms, -5999ms, }) {
         std::cout << std::showpos << d.count() << "\\t\\t"
                   << std::chrono::floor<Sec>(d).count() << '\\t'
                   << std::chrono::round<Sec>(d).count() << '\\t'
                   << std::chrono::ceil <Sec>(d).count() << '\\n';
     }
 }

.SH Output:

 Duration   Floor   Round   Ceil
 (ms)       (sec)   (sec)   (sec)
 +4999      +4      +5      +5
 +5000      +5      +5      +5
 +5001      +5      +5      +6
 +5499      +5      +5      +6
 +5500      +5      +6      +6
 +5999      +5      +6      +6
 -4999      -5      -5      -4
 -5000      -5      -5      -5
 -5001      -6      -5      -5
 -5499      -6      -5      -5
 -5500      -6      -6      -5
 -5999      -6      -6      -5

.SH See also

   duration_cast                  converts a duration to another, with a different tick
   \fI(C++11)\fP                        interval
                                  \fI(function template)\fP
   floor(std::chrono::duration)   converts a duration to another, rounding down
   \fI(C++17)\fP                        \fI(function template)\fP
   ceil(std::chrono::duration)    converts a duration to another, rounding up
   \fI(C++17)\fP                        \fI(function template)\fP
   round(std::chrono::time_point) converts a time_point to another, rounding to
   \fI(C++17)\fP                        nearest, ties to even
                                  \fI(function template)\fP
   round
   roundf
   roundl
   lround
   lroundf
   lroundl
   llround
   llroundf                       nearest integer, rounding away from zero in halfway
   llroundl                       cases
   \fI(C++11)\fP                        \fI(function)\fP
   \fI(C++11)\fP
   \fI(C++11)\fP
   \fI(C++11)\fP
   \fI(C++11)\fP
   \fI(C++11)\fP
   \fI(C++11)\fP
   \fI(C++11)\fP
   \fI(C++11)\fP
