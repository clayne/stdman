.TH std::basic_stringbuf::basic_stringbuf 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_stringbuf::basic_stringbuf \- std::basic_stringbuf::basic_stringbuf

.SH Synopsis
   basic_stringbuf()
   : basic_stringbuf(std::ios_base::in |                \fB(1)\fP \fI(since C++11)\fP
   std::ios_base::out) { }
   explicit basic_stringbuf( std::ios_base::openmode
   which =                                                                \fI(until C++11)\fP
   std::ios_base::in | std::ios_base::out );
   explicit basic_stringbuf( std::ios_base::openmode                      \fI(since C++11)\fP
   which );
   explicit basic_stringbuf( const
   std::basic_string<CharT, Traits, Allocator>& s,
                                                            \fB(3)\fP
   std::ios_base::openmode which =

   std::ios_base::in | std::ios_base::out );
   basic_stringbuf( const basic_stringbuf& rhs ) =          \fB(4)\fP           \fI(since C++11)\fP
   delete;
   basic_stringbuf( basic_stringbuf&& rhs );                \fB(5)\fP           \fI(since C++11)\fP
   explicit basic_stringbuf( const Allocator& a )
   : basic_stringbuf(std::ios_base::in |                    \fB(6)\fP           \fI(since C++20)\fP
   std::ios_base::out, a) { }
   basic_stringbuf( std::ios_base::openmode which,          \fB(7)\fP           \fI(since C++20)\fP
   const Allocator& a );
   explicit basic_stringbuf( std::basic_string<CharT,
   Traits, Allocator>&& s,
                                                            \fB(8)\fP           \fI(since C++20)\fP
   std::ios_base::openmode which =
                                                        \fB(2)\fP
   std::ios_base::in | std::ios_base::out );
   template<class SAlloc>

   basic_stringbuf( const std::basic_string<CharT,
   Traits, SAlloc>& s,                                      \fB(9)\fP           \fI(since C++20)\fP
   const Allocator& a )

   : basic_stringbuf(s, std::ios_base::in |
   std::ios_base::out, a ) { }
   template<class SAlloc>

   basic_stringbuf( const std::basic_string<CharT,          \fB(10)\fP          \fI(since C++20)\fP
   Traits, SAlloc>& s,

   std::ios_base::openmode, const Allocator& a );
   template<class SAlloc>

   explicit basic_stringbuf( const
   std::basic_string<CharT, Traits, SAlloc>& s,             \fB(11)\fP          \fI(since C++20)\fP
   std::ios_base::openmode which =

   std::ios_base::in | std::ios_base::out );
   basic_stringbuf( basic_stringbuf&& rhs, const            \fB(12)\fP          \fI(since C++20)\fP
   Allocator& a );

   1) Default constructor. It is implementation-defined whether the sequence pointers
   (eback(), gptr(), egptr(), pbase(), pptr(), epptr()) are initialized to null
   pointers.
   2) Constructs a std::basic_stringbuf object: initializes the base class by calling
   the default constructor of std::basic_streambuf, initializes the character sequence
   with an empty string, and sets the mode to which.
   3) Constructs a std::basic_stringbuf object by performing the same initialization as
   \fB(1)\fP, followed by initializing the associated character sequence as if by calling
   str(s).
   4) The copy constructor is deleted; std::basic_stringbuf is not CopyConstructible
   5) Move-constructs a std::basic_stringbuf object by moving all state from another
   std::basic_stringbuf object rhs, including the associated string, the open mode, the
   locale, and all other state. After the move, the six pointers of
   std::basic_streambuf in *this are guaranteed to be different from the corresponding
   pointers in the moved-from rhs unless null.
   6-7) Same as (1-2), except that a is used to construct the associated string.
   8) Same as \fB(3)\fP, except that std::move(s) is used to construct the associated string.
   9-10) Constructs a std::basic_stringbuf object by performing the same initialization
   as \fB(1)\fP, followed by initializing the associated string with content of s, using a as
   its allocator.
   11) Same as \fB(3)\fP, except the type of s's allocator is not Allocator. This overload
   participates in overload resolution only if SAlloc and Allocator are not the same
   type.
   12) Same as \fB(5)\fP, except that a is used to construct the associated string.

.SH Parameters

   s     - a basic_string used to initialize the buffer
   a     - another allocator used to construct the internal basic_string
   rhs   - another basic_stringbuf
           specifies stream open mode. It is bitmask type, the following constants are
           defined:

           Constant Explanation
   which - app      seek to the end of stream before each write
           binary   open in binary mode
           in       open for reading
           out      open for writing
           trunc    discard the contents of the stream when opening
           ate      seek to the end of stream immediately after open

.SH Notes

   Typically called by the constructor of std::basic_stringstream.

   The level of support for the open modes other than std::ios_base::in and
   std::ios_base::out varies among implementations. C++11 explicitly specifies the
   support for std::ios_base::ate in str() and in this constructor, but
   std::ios_base::app, std::ios_base::trunc, and std::ios_base::binary have different
   effects on different implementations.

.SH Example

   Demonstrates calling the constructor of basic_stringbuf directly.


// Run this code

 #include <iostream>
 #include <sstream>

 int main()
 {
     // default constructor (mode = in|out)
     std::stringbuf buf1;
     buf1.sputc('1');
     std::cout << &buf1 << '\\n';

     // string constructor in at-end mode \fI(C++11)\fP
     std::stringbuf buf2("test", std::ios_base::in
                               | std::ios_base::out
                               | std::ios_base::ate);
     buf2.sputc('1');
     std::cout << &buf2 << '\\n';

     // append mode test (results differ among compilers)
     std::stringbuf buf3("test", std::ios_base::in
                               | std::ios_base::out
                               | std::ios_base::app);
     buf3.sputc('1');
     buf3.pubseekpos(1);
     buf3.sputc('2');
     std::cout << &buf3 << '\\n';
 }

.SH Output:

 1
 test1
 est12 (Sun Studio) 2st1 (GCC)

  Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

     DR    Applied to      Behavior as published       Correct behavior
   P0935R0 C++11      default constructor was explicit made implicit

.SH See also

                 constructs the string stream
   constructor   \fI\fI(public member\fP function of\fP
                 std::basic_stringstream<CharT,Traits,Allocator>)
