.TH std::projected 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::projected \- std::projected

.SH Synopsis
   Defined in header <iterator>
   template< std::indirectly_readable I,

   std::indirectly_regular_unary_invocable<I> Proj >
   struct projected {                                                           (since
   using value_type = std::remove_cvref_t<std::indirect_result_t<Proj&,     \fB(1)\fP C++20)
   I>>;
   std::indirect_result_t<Proj&, I> operator*() const; // not defined

   };
   template< std::weakly_incrementable I, class Proj >

   struct incrementable_traits<std::projected<I, Proj>> {                   \fB(2)\fP (since
   using difference_type = std::iter_difference_t<I>;                           C++20)

   };

   1) Class template projected combines an indirectly_readable type I and a callable
   object type Proj into a new indirectly_readable type whose reference type is the
   result of applying Proj to the std::iter_reference_t<I>.
   2) This specialization of std::incrementable_traits makes std::projected<I, Proj> a
   weakly_incrementable type when I is also a weakly_incrementable type.

   projected is used only to constrain algorithms that accept callable objects and
   projections, and hence its operator*() is not defined.

.SH Template parameters

   I    - an indirectly readable type
   Proj - projection applied to a dereferenced I
