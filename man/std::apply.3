.TH std::apply 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::apply \- std::apply

.SH Synopsis
   Defined in header <tuple>
   template< class F, class Tuple >                                       \fI(since C++17)\fP
   constexpr decltype(auto) apply( F&& f, Tuple&& t );                    (until C++23)
   template< class F, class Tuple >
   constexpr decltype(auto) apply( F&& f, Tuple&& t ) noexcept(/* see     (since C++23)
   below */);

   Invoke the Callable object f with a tuple of arguments.

.SH Parameters

   f - Callable object to be invoked
   t - tuple whose elements to be used as arguments to f

.SH Return value

   The value returned by f.

.SH Exceptions

   \fI(none)\fP                                                                        (until
                                                                                 C++23)
   noexcept specification:
   noexcept(

   noexcept(std::invoke(std::forward<F>(f),
   std::get<Is>(std::forward<Tuple>(t))...))                                     (since
                                                                                 C++23)
   )

   where Is... denotes the parameter pack:

     * 0, 1, ..., std::tuple_size_v<std::remove_reference_t<Tuple>> - 1.

.SH Notes

   The tuple need not be std::tuple, and instead may be anything that supports std::get
   and std::tuple_size; in particular, std::array and std::pair may be used.

   Feature-test macro: __cpp_lib_apply

.SH Possible implementation

   namespace detail {
   template <class F, class Tuple, std::size_t... I>
   constexpr decltype(auto) apply_impl(F&& f, Tuple&& t, std::index_sequence<I...>)
   {
       // This implementation is valid since C++20 (via P1065R2)
       // In C++17, a constexpr counterpart of std::invoke is actually needed here
       return std::invoke(std::forward<F>(f), std::get<I>(std::forward<Tuple>(t))...);
   }

   template <class F, class Tuple, class Idx>
   inline constexpr bool apply_is_noexcept = false;

   template <class F, class Tuple, std::size_t... I>
   inline constexpr bool apply_is_noexcept<F, Tuple, std::index_sequence<I...>> =
     noexcept(std::invoke(std::declval<F>(), std::get<I>(std::declval<Tuple>())...));

   }  // namespace detail

   template <class F, class Tuple>
   constexpr decltype(auto) apply(F&& f, Tuple&& t)
     noexcept( // since C++23
       detail::apply_is_noexcept<F, Tuple,
         std::make_index_sequence<std::remove_reference_t<Tuple>>>
     )
   {
       return detail::apply_impl(
           std::forward<F>(f), std::forward<Tuple>(t),
           std::make_index_sequence<std::tuple_size_v<std::remove_reference_t<Tuple>>>{});
   }

.SH Example


// Run this code

 #include <iostream>
 #include <tuple>
 #include <utility>

 int add(int first, int second) { return first + second; }

 template<typename T>
 T add_generic(T first, T second) { return first + second; }

 auto add_lambda = [](auto first, auto second) { return first + second; };

 template<typename... Ts>
 std::ostream& operator<<(std::ostream& os, std::tuple<Ts...> const& theTuple)
 {
     std::apply
     (
         [&os](Ts const&... tupleArgs)
         {
             os << '[';
             std::size_t n{0};
             ((os << tupleArgs << (++n != sizeof...(Ts) ? ", " : "")), ...);
             os << ']';
         }, theTuple
     );
     return os;
 }

 int main()
 {
     // OK
     std::cout << std::apply(add, std::pair(1, 2)) << '\\n';

     // Error: can't deduce the function type
     // std::cout << std::apply(add_generic, std::make_pair(2.0f, 3.0f)) << '\\n';

     // OK
     std::cout << std::apply(add_lambda, std::pair(2.0f, 3.0f)) << '\\n';

     // advanced example
     std::tuple myTuple{25, "Hello", 9.31f, 'c'};
     std::cout << myTuple << '\\n';
 }

.SH Output:

 3
 5
 [25, Hello, 9.31, c]

.SH See also

   make_tuple       creates a tuple object of the type defined by the argument types
   \fI(C++11)\fP          \fI(function template)\fP
   forward_as_tuple creates a tuple of forwarding references
   \fI(C++11)\fP          \fI(function template)\fP
   make_from_tuple  Construct an object with a tuple of arguments
   \fI(C++17)\fP          \fI(function template)\fP
   invoke           invokes any Callable object with given arguments
   invoke_r         and possibility to specify return type
   \fI(C++17)\fP          (since C++23)
   (C++23)          \fI(function template)\fP
