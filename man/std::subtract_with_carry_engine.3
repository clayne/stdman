.TH std::subtract_with_carry_engine 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::subtract_with_carry_engine \- std::subtract_with_carry_engine

.SH Synopsis
   Defined in header <random>
   template<

   class UIntType,                              \fI(since C++11)\fP
   std::size_t w, std::size_t s, std::size_t r

   > class subtract_with_carry_engine;

   Is a random number engine that uses subtract with carry algorithm.

   The state of a subtract_with_carry_engine consists of a sequence \\(\\small{\\{ X_i\\}(0
   \\le i <r)}\\){X
   i} (0 â‰¤ i <r), every \\(\\small{X_i}\\)X
   i is in interval \\(\\small{[0, 2^w)}\\)[0, 2w
   ).

   Let all subscripts applied to sequence be taken modulo r, c be the carry value which
   is either 0 or 1. The state transition is performed as follows:

     * let \\(\\small{Y=X_{i-s}-X_{i-r}-c}\\)Y=X
       i-s-X
       i-r-c,
     * set \\(\\small{X_i}\\)X
       i to \\(\\small{Y \\mod 2^w}\\)Y mod 2w
       ,
     * set c to 1, if \\(\\small{Y<0}\\)Y<0, to 0 otherwise.

   The following typedefs define the random number engine with two commonly used
   parameter sets:

   Defined in header <random>
   Type                 Definition
   ranlux24_base\fI(C++11)\fP std::subtract_with_carry_engine<std::uint_fast32_t, 24, 10, 24>
   ranlux48_base\fI(C++11)\fP std::subtract_with_carry_engine<std::uint_fast64_t, 48, 5, 12>

.SH Template parameters

              The result type generated by the generator. The effect is undefined if
   UIntType - this is not one of unsigned short, unsigned int, unsigned long, or
              unsigned long long.
   w        - The word size, in bits, of the state sequence, 10 < w <=
              std::numeric_limits<UIntType>::digits.
   s        - The short lag.
   r        - The long lag, where 0 < s < r.

.SH Member types

   Member type         Definition
   result_type \fI(C++11)\fP The integral type generated by the engine. Results are undefined
                       if this is not an unsigned integral type.

.SH Member functions

.SH Construction and Seeding
   constructor      constructs the engine
   \fI(C++11)\fP          \fI(public member function)\fP
   seed             sets the current state of the engine
   \fI(C++11)\fP          \fI(public member function)\fP
.SH Generation
   operator()       advances the engine's state and returns the generated value
   \fI(C++11)\fP          \fI(public member function)\fP
   discard          advances the engine's state by a specified amount
   \fI(C++11)\fP          \fI(public member function)\fP
.SH Characteristics
   min              gets the smallest possible value in the output range
   \fB[static]\fP \fI(C++11)\fP \fI(public static member function)\fP
   max              gets the largest possible value in the output range
   \fB[static]\fP \fI(C++11)\fP \fI(public static member function)\fP

.SH Non-member functions

   operator==                compares the internal states of two pseudo-random number
   operator!=                engines
   \fI(C++11)\fP                   \fI(function)\fP
   \fI(C++11)\fP(removed in C++20)
   operator<<                performs stream input and output on pseudo-random number
   operator>>                engine
   \fI(C++11)\fP                   \fI(function template)\fP

.SH Member constants

   constexpr size_t word_size      template parameter w, the word size
   \fB[static]\fP \fI(C++11)\fP                \fI(public static member constant)\fP
   constexpr size_t short_lag      template parameter s, the short lag
   \fB[static]\fP \fI(C++11)\fP                \fI(public static member constant)\fP
   constexpr size_t long_lag       template parameter r, the long lag
   \fB[static]\fP \fI(C++11)\fP                \fI(public static member constant)\fP
   constexpr UIntType default_seed constant value 19780503u
   \fB[static]\fP \fI(C++11)\fP                \fI(public static member constant)\fP
