.TH std::atomic_flag::wait 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::atomic_flag::wait \- std::atomic_flag::wait

.SH Synopsis
   void wait( bool old,
   std::memory_order order = std::memory_order::seq_cst ) const
   noexcept;                                                             \fI(since C++20)\fP
   void wait( bool old,
   std::memory_order order = std::memory_order::seq_cst ) const
   volatile noexcept;

   Performs atomic waiting operations. Behaves as if it repeatedly performs the
   following steps:

     * Compare this->test(order) with that of old.

          * If those are equal, then blocks until *this is notified by notify_one() or
            notify_all(), or the thread is unblocked spuriously.
          * Otherwise, returns.

   These functions are guaranteed to return only if value has changed, even if
   underlying implementation unblocks spuriously.

.SH Parameters

   old   - the value to check the atomic_flag's object no longer contains
   order - the memory synchronization ordering for this operation: must not be
           std::memory_order::release or std::memory_order::acq_rel

.SH Return value

   \fI(none)\fP

.SH Notes

   This form of change-detection is often more efficient than simple polling or pure
   spinlocks.

   Due to the ABA problem, transient changes from old to another value and back to old
   might be missed, and not unblock.

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   notify_one             notifies at least one thread waiting on the atomic object
   (C++20)                \fI(public member function)\fP
   notify_all             notifies all threads blocked waiting on the atomic object
   (C++20)                \fI(public member function)\fP
   atomic_flag_notify_one notifies a thread blocked in atomic_flag_wait
   (C++20)                \fI(function)\fP
   atomic_flag_notify_all notifies all threads blocked in atomic_flag_wait
   (C++20)                \fI(function)\fP
