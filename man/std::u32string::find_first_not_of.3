.TH std::basic_string::find_first_not_of 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_string::find_first_not_of \- std::basic_string::find_first_not_of

.SH Synopsis
   size_type find_first_not_of( const           (until
   basic_string& str, size_type pos = 0         C++11)
   ) const;
   size_type find_first_not_of( const           (since
   basic_string& str,                           C++11)
   size_type pos = 0 ) const noexcept;          (until
                                                C++20)
   constexpr size_type
   find_first_not_of( const                     (since
   basic_string& str,                           C++20)
   size_type pos = 0 ) const noexcept;
   size_type find_first_not_of( const
   CharT* s,                                            (until
   size_type pos, size_type count )                     C++20)
   const;
   constexpr size_type
   find_first_not_of( const CharT* s,                   (since
   size_type pos, size_type count )                     C++20)
   const;
   size_type find_first_not_of( const                           (until
   CharT* s,                                                    C++20)
   size_type pos = 0 ) const;
   constexpr size_type                                          (since
   find_first_not_of( const CharT* s,                           C++20)
   size_type pos = 0 ) const;           \fB(1)\fP
   size_type find_first_not_of( CharT                                   (until
   ch, size_type pos = 0 ) const;                                       C++11)
   size_type find_first_not_of( CharT                                   (since
   ch, size_type pos = 0 ) const                                        C++11)
   noexcept;                                                            (until
                                            \fB(2)\fP                         C++20)
   constexpr size_type                                                  (since
   find_first_not_of( CharT ch,                                         C++20)
   size_type pos = 0 ) const noexcept;
   template < class StringViewLike >            \fB(3)\fP

   size_type                                                                    (since
   find_first_not_of( const                             \fB(4)\fP                     C++17)
   StringViewLike& t,                                                           (until
                                                                                C++20)
   size_type pos = 0 ) const
   noexcept(/* see below */);                                   \fB(5)\fP
   template < class StringViewLike >

   constexpr size_type
   find_first_not_of( const                                                     (since
   StringViewLike& t,                                                           C++20)

   size_type pos = 0 ) const
   noexcept(/* see below */);

   Finds the first character equal to none of the characters in the given character
   sequence. The search considers only the interval [pos, size()). If the character is
   not present in the interval, npos will be returned.

   1) Finds the first character equal to none of characters in str.
   2) Finds the first character equal to none of characters in range [s, s+count). This
   range can include null characters.
   3) Finds the first character equal to none of characters in character string pointed
   to by s. The length of the string is determined by the first null character using
   Traits::length(s).
   4) Finds the first character not equal to ch.
   5) Implicitly converts t to a string view sv as if by std::basic_string_view<CharT,
   Traits> sv = t;, then finds the first character equal to none of characters in sv.
   This overload participates in overload resolution only if
   std::is_convertible_v<const StringViewLike&, std::basic_string_view<CharT, Traits>>
   is true and std::is_convertible_v<const StringViewLike&, const CharT*> is false.

   In all cases, equality is checked by calling Traits::eq.

.SH Parameters

   str   - string identifying characters to search for
   pos   - position for the search to start from
   count - length of character string identifying characters to search for
   s     - pointer to a character string identifying characters to search for
   ch    - character identifying characters to search for
   t     - object (convertible to std::basic_string_view) identifying characters to
           search for

.SH Return value

   Position of the found character or npos if no such character is found.

.SH Exceptions

   5)
   noexcept specification:
   noexcept(std::is_nothrow_convertible_v<const T&, std::basic_string_view<CharT,
   Traits>>)

.SH Example


// Run this code

 #include <string>
 #include <iostream>

 int main() {
     std::string to_search = "Some data with %MACROS to substitute";

     std::cout << "Before: " << to_search << '\\n';

     auto pos = std::string::npos;
     while ((pos = to_search.find('%')) != std::string::npos) {
         // Permit uppercase letters, lowercase letters and numbers in macro names
         const auto after = to_search.find_first_not_of("ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                                                        "abcdefghijklmnopqrstuvwxyz"
                                                        "0123456789", pos + 1);

         // Now to_search[pos] == '%' and to_search[after] == ' ' (after the 'S')

         if(after != std::string::npos)
             to_search.replace(pos, after - pos, "some very nice macros");
     }

     std::cout << "After: " << to_search << '\\n';
 }

.SH Output:

 Before: Some data with %MACROS to substitute
 After: Some data with some very nice macros to substitute

  Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

      DR    Applied to           Behavior as published              Correct behavior
   LWG 2064 C++11      overload \fB(3)\fP and \fB(4)\fP were noexcept        removed
   LWG 2946 C++17      string_view overload causes ambiguity in  avoided by making it a
                       some cases                                template
   P1148R0  C++11      noexcept for overload \fB(4)\fP/\fB(5)\fP was         restored
            C++17      accidently dropped by LWG2064/LWG2946

.SH See also

   find              find characters in the string
                     \fI(public member function)\fP
   rfind             find the last occurrence of a substring
                     \fI(public member function)\fP
   find_first_of     find first occurrence of characters
                     \fI(public member function)\fP
   find_last_of      find last occurrence of characters
                     \fI(public member function)\fP
   find_last_not_of  find last absence of characters
                     \fI(public member function)\fP
   find_first_not_of find first absence of characters
   \fI(C++17)\fP           \fI(public member function of std::basic_string_view<CharT,Traits>)\fP
