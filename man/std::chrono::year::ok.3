.TH std::chrono::year::ok 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::chrono::year::ok \- std::chrono::year::ok

.SH Synopsis
   constexpr bool ok() const noexcept;  \fI(since C++20)\fP

   Checks if the year value stored in *this is in the valid range, i.e., [-32767,
   32767].

.SH Return value

   true if the year value stored in *this is in the range [-32767, 32767]. Otherwise
   false.

.SH Possible implementation

   See the implementations in libstdc++, libc++, and Howard Hinnant's date.h.

   class Year
   {
       short year_; /* exposition only */

   public:

       bool ok() const noexcept { return year_ != std::numeric_limits<short>::min(); }

       /*...*/
   };

.SH Example


// Run this code

 #include <iostream>
 #include <iomanip>
 #include <chrono>

 int main()
 {
     for (const int i : {2020, 0x8000, 0x8001, 0xFFFF, 0x18000}) {
         const std::chrono::year y{i};
         std::cout << std::boolalpha
             << "input year: " << std::setw(6) << i
             << " │ internal value: " << std::setw(7) << static_cast<int>(y)
             << " │ ok(): " << y.ok() << '\\n';
     }
 }

.SH Possible output:

 input year:   2020 │ internal value:    2020 │ ok(): true
 input year:  32768 │ internal value:  -32768 │ ok(): false
 input year:  32769 │ internal value:  -32767 │ ok(): true
 input year:  65535 │ internal value:      -1 │ ok(): true
 input year:  98304 │ internal value:  -32768 │ ok(): false
