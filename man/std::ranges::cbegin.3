.TH std::ranges::cbegin 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ranges::cbegin \- std::ranges::cbegin

.SH Synopsis
   Defined in header <ranges>
   inline namespace /*unspecified*/ {

   inline constexpr /*unspecified*/ cbegin =               \fI(since C++20)\fP
   /*unspecified*/;                                        (customization point object)

   }
   Call signature
   template< class T >

   requires /* see below */                                \fI(since C++20)\fP

   constexpr std::input_or_output_iterator auto cbegin(
   T&& t );

   Returns an iterator to the first element of the const-qualified argument.

   range-begin-end.svg

   Let CT be

    1. const std::remove_reference_t<T>& if the argument is a lvalue (i.e. T is an
       lvalue reference type),
    2. const T otherwise,

   a call to ranges::cbegin is expression-equivalent to
   ranges::begin(static_cast<CT&&>(t)).

   The return type models std::input_or_output_iterator in both cases.

  Expression-equivalent

   Expression e is expression-equivalent to expression f, if

     * e and f have the same effects, and
     * either both are constant subexpressions or else neither is a constant
       subexpression, and
     * either both are potentially-throwing or else neither is potentially-throwing
       (i.e. noexcept(e) == noexcept(f)).

  Customization point objects

   The name ranges::cbegin denotes a customization point object, which is a const
   function object of a literal semiregular class type. For exposition purposes, the
   cv-unqualified version of its type is denoted as __cbegin_fn.

   All instances of __cbegin_fn are equal. The effects of invoking different instances
   of type __cbegin_fn on the same arguments are equivalent, regardless of whether the
   expression denoting the instance is an lvalue or rvalue, and is const-qualified or
   not (however, a volatile-qualified instance is not required to be invocable). Thus,
   ranges::cbegin can be copied freely and its copies can be used interchangeably.

   Given a set of types Args..., if std::declval<Args>()... meet the requirements for
   arguments to ranges::cbegin above, __cbegin_fn models

     * std::invocable<__cbegin_fn, Args...>,
     * std::invocable<const __cbegin_fn, Args...>,
     * std::invocable<__cbegin_fn&, Args...>, and
     * std::invocable<const __cbegin_fn&, Args...>.

   Otherwise, no function call operator of __cbegin_fn participates in overload
   resolution.

.SH Example


// Run this code

 #include <iostream>
 #include <ranges>
 #include <vector>

 int main()
 {
     std::vector<int> v = { 3, 1, 4 };
     auto vi = std::ranges::cbegin(v);
     std::cout << *vi << '\\n';
     // *vi = 42; // Error: read-only variable is not assignable

     int a[] = { -5, 10, 15 };
     auto ai = std::ranges::cbegin(a);
     std::cout << *ai << '\\n';
     // *ai = 42; // Error: read-only variable is not assignable
 }

.SH Output:

 3
 -5

.SH See also

   ranges::begin returns an iterator to the beginning of a range
   (C++20)       (customization point object)
   begin
   cbegin        returns an iterator to the beginning of a container or array
   \fI(C++11)\fP       \fI(function template)\fP
   \fI(C++14)\fP
