.TH std::less_equal 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::less_equal \- std::less_equal

.SH Synopsis
   Defined in header <functional>
   template< class T >             \fI(until C++14)\fP
   struct less_equal;
   template< class T = void >      \fI(since C++14)\fP
   struct less_equal;

   Function object for performing comparisons. Unless specialized, invokes operator<=
   on type T.

  Implementation-defined strict total order over pointers

   A specialization of std::less_equal for any pointer type yields the
   implementation-defined strict total order, even if the built-in <= operator does
   not.

   The implementation-defined strict total order is consistent with the partial order
   imposed by built-in comparison operators (
   <=>,
   \fI(since C++20)\fP<, >, <=, and >=), and consistent among following standard function
   objects:

     * std::less, std::greater, std::less_equal, and std::greater_equal, when the
       template argument is a pointer type
       or void
       \fI(since C++14)\fP

     * std::ranges::equal_to, std::ranges::not_equal_to,
       std::ranges::less, std::ranges::greater, std::ranges::less_equal,  \fI(since C++20)\fP
       std::ranges::greater_equal, and std::compare_three_way

.SH Specializations

   less_equal<void> function object implementing x <= y deducing argument and return
   \fI(C++14)\fP          types
                    \fI(class template specialization)\fP

.SH Member types

   Type                                                         Definition
   result_type (deprecated in C++17)(removed in C++20)          bool
   first_argument_type (deprecated in C++17)(removed in C++20)  T
   second_argument_type (deprecated in C++17)(removed in C++20) T

   These member types are obtained via publicly inheriting                \fI(until C++11)\fP
   std::binary_function<T, T, bool>.

.SH Member functions

   operator() checks if the first argument is less than or equal to the second
              \fI(public member function)\fP

std::less_equal::operator()

   bool operator()( const T& lhs, const T& rhs ) const;            \fI(until C++14)\fP
   constexpr bool operator()( const T& lhs, const T& rhs ) const;  \fI(since C++14)\fP

   Checks if lhs is less than or equal to rhs.

.SH Parameters

   lhs, rhs - values to compare

.SH Return value

   For T which is not a pointer type, true if lhs <= rhs, false otherwise.

   For T which is a pointer type, true if lhs does not succeed rhs in the
   implementation-defined strict total order, false otherwise.

.SH Exceptions

   May throw implementation-defined exceptions.

.SH Possible implementation

   constexpr bool operator()(const T &lhs, const T &rhs) const
   {
       return lhs <= rhs; // assumes that the implementation uses a flat address space
   }

.SH See also

   less               function object implementing x < y
                      \fI(class template)\fP
   ranges::less_equal function object implementing x <= y
   (C++20)            \fI(class)\fP
