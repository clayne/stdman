.TH std::experimental::is_simd,std::experimental::is_simd_mask 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::experimental::is_simd,std::experimental::is_simd_mask \- std::experimental::is_simd,std::experimental::is_simd_mask

.SH Synopsis
   Defined in header <experimental/simd>
   template< class T >                   \fB(1)\fP (parallelism TS v2)
   struct is_simd;
   template< class T >                   \fB(2)\fP (parallelism TS v2)
   struct is_simd_mask;

   1) If T is a specialization of the simd class template, provides the member constant
   value equal true. For any other type, value is false.
   2) If T is a specialization of the simd_mask class template, provides the member
   constant value equal true. For any other type, value is false.

.SH Template parameters

   T - a type to check

  Helper variable template

   template< class T >                                             (parallelism TS v2)
   inline constexpr bool is_simd_v = is_simd<T>::value;
   template< class T >                                             (parallelism TS v2)
   inline constexpr bool is_simd_mask_v = is_simd_mask<T>::value;

Inherited from std::integral_constant

.SH Member constants

   value    true if T is a simd/simd_mask type , false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Example


// Run this code

 #include <experimental/simd>
 #include <iostream>

 int main()
 {
     namespace stdx = std::experimental;
     std::cout
     << std::boolalpha
     << stdx::is_simd_v<stdx::simd<float>> << '\\n';
     << stdx::is_simd_v<int> << '\\n';
     << stdx::is_simd_mask_v<stdx::simd_mask<float>> << '\\n';
     << stdx::is_simd_mask_v<int> << '\\n';
 }

.SH Output:

 true
 false
 true
 false
