.TH std::list::list 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::list::list \- std::list::list

.SH Synopsis
   list();                                          \fB(1)\fP
   explicit list( const Allocator& alloc );         \fB(2)\fP
   explicit list( size_type count,

   const T& value = T(),                                    \fI(until C++11)\fP

   const Allocator& alloc = Allocator());
   list( size_type count,

   const T& value,                                          \fI(since C++11)\fP

   const Allocator& alloc = Allocator());
   explicit list( size_type count );                                      \fI(since C++11)\fP
                                                                          \fI(until C++14)\fP
   explicit list( size_type count, const Allocator& \fB(3)\fP                   \fI(since C++14)\fP
   alloc = Allocator() );
   template< class InputIt >

   list( InputIt first, InputIt last,                       \fB(5)\fP
                                                        \fB(4)\fP
   const Allocator& alloc = Allocator() );
   list( const list& other );                               \fB(6)\fP
   list( const list& other, const Allocator& alloc          \fB(7)\fP           \fI(since C++11)\fP
   );
   list( list&& other );                                    \fB(8)\fP           \fI(since C++11)\fP
   list( list&& other, const Allocator& alloc );            \fB(9)\fP           \fI(since C++11)\fP
   list( std::initializer_list<T> init,                     \fB(10)\fP          \fI(since C++11)\fP
   const Allocator& alloc = Allocator() );

   Constructs a new container from a variety of data sources, optionally using a user
   supplied allocator alloc.

   1) Default constructor. Constructs an empty container with a default-constructed
   allocator.
   2) Constructs an empty container with the given allocator alloc.
   3) Constructs the container with count copies of elements with value value.
   4) Constructs the container with count default-inserted instances of T. No copies
   are made.
   5) Constructs the container with the contents of the range [first, last).

   This constructor has the same effect as
   list(static_cast<size_type>(first), static_cast<value_type>(last), a)  \fI(until C++11)\fP
   if InputIt is an integral type.
   This overload participates in overload resolution only if InputIt
   satisfies LegacyInputIterator, to avoid ambiguity with the overload    \fI(since C++11)\fP
   \fB(3)\fP.

   6) Copy constructor. Constructs the container with the copy of the contents of
   other.

   The allocator is obtained as if by calling                                    (since
   std::allocator_traits<allocator_type>::select_on_container_copy_construction( C++11)
   other.get_allocator()).

   7) Constructs the container with the copy of the contents of other, using alloc as
   the allocator.

   The template parameter Allocator is only deduced from the first        (since C++23)
   argument while used in class template argument deduction.

   8) Move constructor. Constructs the container with the contents of other using move
   semantics. Allocator is obtained by move-construction from the allocator belonging
   to other.
   9) Allocator-extended move constructor. Using alloc as the allocator for the new
   container, moving the contents from other; if alloc != other.get_allocator(), this
   results in an element-wise move.

   The template parameter Allocator is only deduced from the first        (since C++23)
   argument while used in class template argument deduction.

   10) Constructs the container with the contents of the initializer list init.

.SH Parameters

   alloc       - allocator to use for all memory allocations of this container
   count       - the size of the container
   value       - the value to initialize elements of the container with
   first, last - the range to copy the elements from
   other       - another container to be used as source to initialize the elements of
                 the container with
   init        - initializer list to initialize the elements of the container with

.SH Complexity

   1-2) Constant
   3-4) Linear in count
   5) Linear in distance between first and last
   6-7) Linear in size of other
   8) Constant.
   9) Linear if alloc != other.get_allocator(), otherwise constant.
   10) Linear in size of init.

.SH Exceptions

   Calls to Allocator::allocate may throw.

.SH Notes

   After container move construction (overload \fB(8)\fP), references, pointers, and
   iterators (other than the end iterator) to other remain valid, but refer to elements
   that are now in *this. The current standard makes this guarantee via the blanket
   statement in [container.requirements.general]/12, and a more direct guarantee is
   under consideration via LWG 2321.

.SH Example


// Run this code

 #include <list>
 #include <string>
 #include <iostream>

 template<typename T>
 std::ostream& operator<<(std::ostream& s, const std::list<T>& v)
 {
     s.put('[');
     char comma[3] = {'\\0', ' ', '\\0'};
     for (const auto& e : v) {
         s << comma << e;
         comma[0] = ',';
     }
     return s << ']';
 }

 int main()
 {
     // c++11 initializer list syntax:
     std::list<std::string> words1 {"the", "frogurt", "is", "also", "cursed"};
     std::cout << "words1: " << words1 << '\\n';

     // words2 == words1
     std::list<std::string> words2(words1.begin(), words1.end());
     std::cout << "words2: " << words2 << '\\n';

     // words3 == words1
     std::list<std::string> words3(words1);
     std::cout << "words3: " << words3 << '\\n';

     // words4 is {"Mo", "Mo", "Mo", "Mo", "Mo"}
     std::list<std::string> words4(5, "Mo");
     std::cout << "words4: " << words4 << '\\n';
 }

.SH Output:

 words1: [the, frogurt, is, also, cursed]
 words2: [the, frogurt, is, also, cursed]
 words3: [the, frogurt, is, also, cursed]
 words4: [Mo, Mo, Mo, Mo, Mo]

  Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

      DR    Applied to        Behavior as published        Correct behavior
   LWG 2193 C++11      the default constructor is explicit made non-explicit

.SH See also

   assign    assigns values to the container
             \fI(public member function)\fP
   operator= assigns values to the container
             \fI(public member function)\fP
