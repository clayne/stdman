.TH std::basic_string::find_first_of 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_string::find_first_of \- std::basic_string::find_first_of

.SH Synopsis
   size_type find_first_of( const               (until
   basic_string& str, size_type pos = 0         C++11)
   ) const;
   size_type find_first_of( const               (since
   basic_string& str,                           C++11)
   size_type pos = 0 ) const noexcept;          (until
                                                C++20)
   constexpr size_type find_first_of(           (since
   const basic_string& str,                     C++20)
   size_type pos = 0 ) const noexcept;
   size_type find_first_of( const                       (until
   CharT* s, size_type pos, size_type                   C++20)
   count ) const;
   constexpr size_type find_first_of(
   const CharT* s,                                      (since
   size_type pos, size_type count )                     C++20)
   const;
   size_type find_first_of( const                               (until
   CharT* s, size_type pos = 0 ) const;                         C++20)
   constexpr size_type find_first_of(                           (since
   const CharT* s, size_type pos = 0 )                          C++20)
   const;
   size_type find_first_of( CharT ch,                                   (until
   size_type pos = 0 ) const;           \fB(1)\fP                             C++11)
                                                                        (since
   size_type find_first_of( CharT ch,                                   C++11)
   size_type pos = 0 ) const noexcept;                                  (until
                                                                        C++20)
   constexpr size_type find_first_of(       \fB(2)\fP                         (since
   CharT ch, size_type pos = 0 ) const                                  C++20)
   noexcept;
   template < class StringViewLike >            \fB(3)\fP

   size_type                                                                    (since
   find_first_of( const StringViewLike&                 \fB(4)\fP                     C++17)
   t,                                                                           (until
                                                                                C++20)
   size_type pos = 0 ) const
   noexcept(/* see below */);                                   \fB(5)\fP
   template < class StringViewLike >

   constexpr size_type
   find_first_of( const StringViewLike&                                         (since
   t,                                                                           C++20)

   size_type pos = 0 ) const
   noexcept(/* see below */);

   Finds the first character equal to one of the characters in the given character
   sequence. The search considers only the interval [pos, size()). If the character is
   not present in the interval, npos will be returned.

   1) Finds the first character equal to one of the characters in str.
   2) Finds the first character equal to one of the characters in the range [s,
   s+count). This range can include null characters.
   3) Finds the first character equal to one of the characters in character string
   pointed to by s. The length of the string is determined by the first null character
   using Traits::length(s).
   4) Finds the first character equal to ch.
   5) Implicitly converts t to a string view sv as if by std::basic_string_view<CharT,
   Traits> sv = t;, then finds the first character equal to one of the characters in
   sv. This overload participates in overload resolution only if
   std::is_convertible_v<const StringViewLike&, std::basic_string_view<CharT, Traits>>
   is true and std::is_convertible_v<const StringViewLike&, const CharT*> is false.

.SH Parameters

   str   - string identifying characters to search for
   pos   - position at which to begin searching
   count - length of character string identifying characters to search for
   s     - pointer to a character string identifying characters to search for
   ch    - character to search for
   t     - object (convertible to std::basic_string_view) identifying characters to
           search for

.SH Return value

   Position of the found character or npos if no such character is found.

.SH Exceptions

   5)
   noexcept specification:
   noexcept(std::is_nothrow_convertible_v<const T&, std::basic_string_view<CharT,
   Traits>>)

.SH Notes

   Traits::eq() is used to perform the comparison.

.SH Example


// Run this code

 #include <cassert>
 #include <iostream>
 #include <string>
 #include <string_view>

 int main() {
     using namespace std::string_literals;
     std::string::size_type sz;

     // (1)
     sz = "alignas"s.find_first_of("klmn"s);
     //     └────────────────────────┘
     assert(sz == 1);
     sz = "alignof"s.find_first_of("wxyz"s);
     //
     assert(sz == std::string::npos);

     // (2)
     const char* buf = "xyzabc";
     sz = "consteval"s.find_first_of(buf, 0, 3);
     //
     assert(sz == std::string::npos);
     sz = "consteval"s.find_first_of(buf, 0, 6);
     //    └─────────────────────────┘c in buf
     assert(sz == 0);

     // (3)
     sz = "decltype"s.find_first_of(buf);
     //      └──────────────────────┘c in buf
     assert(sz == 2);

     // (4)
     sz = "co_await"s.find_first_of('a');
     //       └──────────────────────┘
     assert(sz == 3);

     // (5)
     std::string_view sv{"int"};
     sz = "constinit"s.find_first_of(sv);
     //      └───────────────────────┘n in sv
     assert(sz == 2);

     std::cout << "All tests passed.\\n";
 }

.SH Possible output:

 All tests passed.

  Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

      DR    Applied to           Behavior as published              Correct behavior
   LWG 2064 C++11      overload \fB(3)\fP and \fB(4)\fP were noexcept        removed
   LWG 2946 C++17      string_view overload causes ambiguity in  avoided by making it a
                       some cases                                template
   P1148R0  C++11      noexcept for overload \fB(4)\fP/\fB(5)\fP was         restored
            C++17      accidently dropped by LWG2064/LWG2946

.SH See also

   find              find characters in the string
                     \fI(public member function)\fP
   rfind             find the last occurrence of a substring
                     \fI(public member function)\fP
   find_first_not_of find first absence of characters
                     \fI(public member function)\fP
   find_last_of      find last occurrence of characters
                     \fI(public member function)\fP
   find_last_not_of  find last absence of characters
                     \fI(public member function)\fP
   find_first_of     find first occurrence of characters
   \fI(C++17)\fP           \fI(public member function of std::basic_string_view<CharT,Traits>)\fP
                     returns the length of the maximum initial segment that consists
   strspn            of only the characters found in another byte string
                     \fI(function)\fP
