.TH std::norm(std::complex) 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::norm(std::complex) \- std::norm(std::complex)

.SH Synopsis
   Defined in header <complex>
   template< class T >                                   \fI(until C++20)\fP
   T norm( const std::complex<T>& z );
   template< class T >                                   \fI(since C++20)\fP
   constexpr T norm( const std::complex<T>& z );
   float norm( float z );

   template< class DoubleOrInteger >                                   \fI(since C++11)\fP
   double norm( DoubleOrInteger z );             \fB(1)\fP                   \fI(until C++20)\fP

   long double norm( long double z );                \fB(2)\fP
   constexpr float norm( float z );

   template< class DoubleOrInteger >                                   \fI(since C++20)\fP
   constexpr double norm( DoubleOrInteger z );

   constexpr long double norm( long double z );

   1) Returns the squared magnitude of the complex number z.

   2) Additional overloads are provided for float, double, long double,
   and all integer types, which are treated as complex numbers with zero  \fI(since C++11)\fP
   imaginary component.

.SH Parameters

   z - complex value

.SH Return value

   the squared magnitude of z

.SH Notes

   The norm calculated by this function is also known as field norm or absolute square.

   The Euclidean norm of a complex number is provided by std::abs, which is more costly
   to compute. In some situations, it may be replaced by std::norm, for example, if
   abs(z1) > abs(z2) then norm(z1) > norm(z2).

.SH Example


// Run this code

 #include <cassert>
 #include <complex>
 #include <iostream>

 int main()
 {
     constexpr std::complex<double> z{3, 4};
     static_assert(std::norm(z) == (z.real() * z.real() + z.imag() * z.imag()));
     static_assert(std::norm(z) == (z * std::conj(z)));
            assert(std::norm(z) == (std::abs(z) * std::abs(z)));
     std::cout << "std::norm(" << z << ") = " << std::norm(z) << '\\n';
 }

.SH Output:

 std::norm((3,4)) = 25

.SH See also

   abs(std::complex) returns the magnitude of a complex number
                     \fI(function template)\fP
   conj              returns the complex conjugate
                     \fI(function template)\fP
   polar             constructs a complex number from magnitude and phase angle
                     \fI(function template)\fP
