.TH std::stoi,std::stol,std::stoll 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::stoi,std::stol,std::stoll \- std::stoi,std::stol,std::stoll

.SH Synopsis
   Defined in header <string>
   int stoi( const std::string& str, std::size_t* pos = nullptr, int
   base = 10 );                                                       \fB(1)\fP \fI(since C++11)\fP
   int stoi( const std::wstring& str, std::size_t* pos = nullptr, int
   base = 10 );
   long stol( const std::string& str, std::size_t* pos = nullptr, int
   base = 10 );                                                       \fB(2)\fP \fI(since C++11)\fP
   long stol( const std::wstring& str, std::size_t* pos = nullptr,
   int base = 10 );
   long long stoll( const std::string& str, std::size_t* pos =
   nullptr, int base = 10 );                                          \fB(3)\fP \fI(since C++11)\fP
   long long stoll( const std::wstring& str, std::size_t* pos =
   nullptr, int base = 10 );

   Interprets a signed integer value in the string str.

   1) calls std::strtol(str.c_str(), &ptr, base) or std::wcstol(str.c_str(), &ptr,
   base)
   2) calls std::strtol(str.c_str(), &ptr, base) or std::wcstol(str.c_str(), &ptr,
   base)
   3) calls std::strtoll(str.c_str(), &ptr, base) or std::wcstoll(str.c_str(), &ptr,
   base)

   Discards any whitespace characters (as identified by calling std::isspace) until the
   first non-whitespace character is found, then takes as many characters as possible
   to form a valid base-n (where n=base) integer number representation and converts
   them to an integer value. The valid integer value consists of the following parts:

     * (optional) plus or minus sign
     * (optional) prefix \fB(0)\fP indicating octal base (applies only when the base is 8 or
       0)
     * (optional) prefix (0x or 0X) indicating hexadecimal base (applies only when the
       base is 16 or 0)
     * a sequence of digits

   The set of valid values for base is {0,2,3,...,36}. The set of valid digits for
   base-2 integers is {0,1}, for base-3 integers is {0,1,2}, and so on. For bases
   larger than 10, valid digits include alphabetic characters, starting from Aa for
   base-11 integer, to Zz for base-36 integer. The case of the characters is ignored.

   Additional numeric formats may be accepted by the currently installed C locale.

   If the value of base is 0, the numeric base is auto-detected: if the prefix is
   0, the base is octal, if the prefix is 0x or 0X, the base is hexadecimal, otherwise
   the base is decimal.

   If the minus sign was part of the input sequence, the numeric value calculated from
   the sequence of digits is negated as if by unary minus in the result type.

   If pos is not a null pointer, then a pointer ptr - internal to the conversion
   functions - will receive the address of the first unconverted character in
   str.c_str(), and the index of that character will be calculated and stored in *pos,
   giving the number of characters that were processed by the conversion.

.SH Parameters

   str  - the string to convert
   pos  - address of an integer to store the number of characters processed
   base - the number base

.SH Return value

   Integer value corresponding to the content of str.

.SH Exceptions

     * std::invalid_argument if no conversion could be performed
     * std::out_of_range if the converted value would fall out of the range of the
       result type or if the underlying function (std::strtol or std::strtoll) sets
       errno to ERANGE.

.SH Example


// Run this code

 #include <string>
 #include <iomanip>
 #include <utility>
 #include <iostream>
 #include <stdexcept>

 int main()
 {
     const auto data = {
         "45",
         "+45",
         " -45",
         "3.14159",
         "31337 with words",
         "words and 2",
         "12345678901",
     };

     for (const std::string s : data)
     {
         std::size_t pos{};
         try
         {
             std::cout << "std::stoi('" << s << "'): ";
             const int i {std::stoi(s, &pos)};
             std::cout << i << "; pos: " << pos << '\\n';
         }
         catch(std::invalid_argument const& ex)
         {
             std::cout << "std::invalid_argument::what(): " << ex.what() << '\\n';
         }
         catch(std::out_of_range const& ex)
         {
             std::cout << "std::out_of_range::what(): " << ex.what() << '\\n';
             const long long ll {std::stoll(s, &pos)};
             std::cout << "std::stoll('" << s << "'): " << ll << "; pos: " << pos << '\\n';
         }
     }

     std::cout << "\\nCalling with different radixes:\\n";
     for (const auto& [s, base]: { std::pair<const char*, int>
         {"11",  2}, {"22",  3}, {"33",  4}, {"77",  8},
         {"99", 10}, {"FF", 16}, {"jJ", 20}, {"Zz", 36}, })
     {
         const int i {std::stoi(s, nullptr, base)};
         std::cout << "std::stoi('" << s << "', " << base << "): " << i << '\\n';
     }
 }

.SH Possible output:

 std::stoi('45'): 45; pos: 2
 std::stoi('+45'): 45; pos: 3
 std::stoi(' -45'): -45; pos: 4
 std::stoi('3.14159'): 3; pos: 1
 std::stoi('31337 with words'): 31337; pos: 5
 std::stoi('words and 2'): std::invalid_argument::what(): stoi
 std::stoi('12345678901'): std::out_of_range::what(): stoi
 std::stoll('12345678901'): 12345678901; pos: 11

 Calling with different radixes:
 std::stoi('11', 2): 3
 std::stoi('22', 3): 8
 std::stoi('33', 4): 15
 std::stoi('77', 8): 63
 std::stoi('99', 10): 99
 std::stoi('FF', 16): 255
 std::stoi('jJ', 20): 399
 std::stoi('Zz', 36): 1295

.SH See also

   stoul
   stoull     converts a string to an unsigned integer
   \fI(C++11)\fP    \fI(function)\fP
   \fI(C++11)\fP
   stof
   stod
   stold      converts a string to a floating point value
   \fI(C++11)\fP    \fI(function)\fP
   \fI(C++11)\fP
   \fI(C++11)\fP
   strtol     converts a byte string to an integer value
   strtoll    \fI(function)\fP
   \fI(C++11)\fP
   strtoul    converts a byte string to an unsigned integer value
   strtoull   \fI(function)\fP
   \fI(C++11)\fP
   strtoimax
   strtoumax  converts a byte string to std::intmax_t or std::uintmax_t
   \fI(C++11)\fP    \fI(function)\fP
   \fI(C++11)\fP
   from_chars converts a character sequence to an integer or floating-point value
   \fI(C++17)\fP    \fI(function)\fP
   atoi
   atol       converts a byte string to an integer value
   atoll      \fI(function)\fP
   \fI(C++11)\fP
   to_string  converts an integral or floating point value to string
   \fI(C++11)\fP    \fI(function)\fP
   to_wstring converts an integral or floating point value to wstring
   \fI(C++11)\fP    \fI(function)\fP
