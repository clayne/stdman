.TH std::is_reference 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_reference \- std::is_reference

.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct is_reference;

   If T is a reference type (lvalue reference or rvalue reference), provides the member
   constant value equal true. For any other type, value is false.

   The behavior of a program that adds specializations for is_reference
   or is_reference_v
   \fI(since C++17)\fP is undefined.

.SH Template parameters

   T - a type to check

  Helper variable template

   template< class T >                                             \fI(since C++17)\fP
   inline constexpr bool is_reference_v = is_reference<T>::value;

Inherited from std::integral_constant

.SH Member constants

   value    true if T is a reference type , false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Possible implementation

   template <class T> struct is_reference      : std::false_type {};
   template <class T> struct is_reference<T&>  : std::true_type {};
   template <class T> struct is_reference<T&&> : std::true_type {};

.SH Example


// Run this code

 #include <iostream>
 #include <type_traits>

 class A {};

 int main()
 {
 #   define REF(x) << #x " ?: " << x << '\\n'
     std::cout << std::boolalpha
     REF( std::is_reference_v<A> )
     REF( std::is_reference_v<A&> )
     REF( std::is_reference_v<A&&> )
     REF( std::is_reference_v<long> )
     REF( std::is_reference_v<long&> )
     REF( std::is_reference_v<long&&> )
     REF( std::is_reference_v<double*> )
     REF( std::is_reference_v<double*&> )
     REF( std::is_reference_v<double*&&> );
 #   undef REF
 }

.SH Output:

 std::is_reference_v<A> ?: false
 std::is_reference_v<A&> ?: true
 std::is_reference_v<A&&> ?: true
 std::is_reference_v<long> ?: false
 std::is_reference_v<long&> ?: true
 std::is_reference_v<long&&> ?: true
 std::is_reference_v<double*> ?: false
 std::is_reference_v<double*&> ?: true
 std::is_reference_v<double*&&> ?: true

.SH See also

   is_lvalue_reference checks if a type is a lvalue reference
   \fI(C++11)\fP             \fI(class template)\fP
   is_rvalue_reference checks if a type is a rvalue reference
   \fI(C++11)\fP             \fI(class template)\fP
