.TH std::move_iterator 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::move_iterator \- std::move_iterator

.SH Synopsis
   Defined in header <iterator>
   template< class Iter >        \fI(since C++11)\fP
   class move_iterator;

   std::move_iterator is an iterator adaptor which behaves exactly like the underlying
   iterator (which must be at least an LegacyInputIterator
   or model input_iterator
   \fI(since C++20)\fP), except that dereferencing converts the value returned by the
   underlying iterator into an rvalue. If this iterator is used as an input iterator,
   the effect is that the values are moved from, rather than copied from.

.SH Member types

   Member type             Definition
   iterator_type           Iter
                           std::iterator_traits<Iter>::iterator_category           (until
                                                                                   C++20)
                           If std::iterator_traits<Iter>::iterator_category is
                           valid and denotes a type:

                             * if std::iterator_traits<Iter>::iterator_category
                               models
   iterator_category           std::derived_from<std::random_access_iterator_tag>, (since
                               member iterator_category is                         C++20)
                               std::random_access_iterator_tag.
                             * Otherwise, member iterator_category is the same
                               type as
                               std::iterator_traits<Iter>::iterator_category.

                           Otherwise, there is no member iterator_category.
   iterator_concept(C++20) std::input_iterator_tag
   value_type              std::iterator_traits<Iter>::value_type \fI(until C++20)\fP
                           std::iter_value_t<Iter>                \fI(since C++20)\fP
   difference_type         std::iterator_traits<Iter>::difference_type \fI(until C++20)\fP
                           std::iter_difference_t<Iter>                \fI(since C++20)\fP
   pointer                 Iter
                           If std::iterator_traits<Iter>::reference is a
                           reference, this is the rvalue reference version of the  (until
                           same type. Otherwise (such as if the wrapped iterator   C++20)
   reference               returns by value), this is
                           std::iterator_traits<Iter>::reference unchanged
                           std::iter_rvalue_reference_t<Iter>                      (since
                                                                                   C++20)

.SH Member functions

   constructor                  constructs a new iterator adaptor
   \fI(C++11)\fP                      \fI(public member function)\fP
   operator=                    assigns another iterator adaptor
   \fI(C++11)\fP                      \fI(public member function)\fP
   base                         accesses the underlying iterator
   \fI(C++11)\fP                      \fI(public member function)\fP
   operator*
   operator->                   accesses the pointed-to element
   \fI(C++11)\fP                      \fI(public member function)\fP
   \fI(C++11)\fP(deprecated in C++20)
   operator[]                   accesses an element by index
   \fI(C++11)\fP                      \fI(public member function)\fP
   operator++
   operator++(int)
   operator+=
   operator+                    advances or decrements the iterator
   operator--                   \fI(public member function)\fP
   operator--(int)
   operator-=
   operator-
   \fI(C++11)\fP

.SH Member objects

   Member name       Definition
                     the underlying iterator from which base() copies
   current (private) or moves
                     \fI(since C++20)\fP, the name is for exposition only

.SH Non-member functions

   operator==
   operator!=
   operator<
   operator<=
   operator>
   operator>=
   operator<=>                    compares the underlying iterators
   \fI(C++11)\fP                        \fI(function template)\fP
   \fI(C++11)\fP(removed in C++20)
   \fI(C++11)\fP
   \fI(C++11)\fP
   \fI(C++11)\fP
   \fI(C++11)\fP
   (C++20)
   operator==(std::move_sentinel) compares the underlying iterator and the underlying
   (C++20)                        sentinel
                                  \fI(function template)\fP
   operator+                      advances the iterator
   \fI(C++11)\fP                        \fI(function template)\fP
   operator-                      computes the distance between two iterator adaptors
   \fI(C++11)\fP                        \fI(function template)\fP
   operator-(std::move_sentinel)  computes the distance between the underlying iterator
   (C++20)                        and the underlying sentinel
                                  \fI(function template)\fP
   iter_move                      casts the result of dereferencing the underlying
   (C++20)                        iterator to its associated rvalue reference type
                                  \fI(function)\fP
   iter_swap                      swaps the objects pointed to by two underlying
   (C++20)                        iterators
                                  \fI(function template)\fP
   make_move_iterator             creates a std::move_iterator of type inferred from
   \fI(C++11)\fP                        the argument
                                  \fI(function template)\fP

.SH Example


// Run this code

 #include <iostream>
 #include <iomanip>
 #include <algorithm>
 #include <vector>
 #include <iterator>
 #include <numeric>
 #include <string>

 int main()
 {
     std::vector<std::string> v{"this", "_", "is", "_", "an", "_", "example"};

     auto print_v = [&](auto const rem) {
         std::cout << rem;
         for (const auto& s : v)
             std::cout << std::quoted(s) << ' ';
         std::cout << '\\n';
     };

     print_v("Old contents of the vector: ");

     std::string concat = std::accumulate(std::make_move_iterator(v.begin()),
                                          std::make_move_iterator(v.end()),
                                          std::string());

     /* An alternative that uses std::move_iterator directly could be:
     using moviter_t = std::move_iterator<std::vector<std::string>::iterator>;
     std::string concat = std::accumulate(moviter_t(v.begin()),
                                          moviter_t(v.end()),
                                          std::string()); */

     print_v("New contents of the vector: ");

     std::cout << "Concatenated as string: " << quoted(concat) << '\\n';
 }

.SH Possible output:

 Old contents of the vector: "this" "_" "is" "_" "an" "_" "example"
 New contents of the vector: "" "" "" "" "" "" ""
 Concatenated as string: "this_is_an_example"

  Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

      DR    Applied    Behavior as                     Correct behavior
              to        published
                    dereferencing a
                    move_iterator
                    could return a
                    dangling reference
   LWG 2106 C++11   if the             returns the object instead
                    dereferencing the
                    underlying
                    iterator returns a
                    prvalue
                    member             defined only if
   P2259R1  C++20   iterator_category  std::iterator_traits<Iter>::iterator_category
                    is always defined  exists

.SH See also

   make_move_iterator creates a std::move_iterator of type inferred from the argument
   \fI(C++11)\fP            \fI(function template)\fP
   move_sentinel      sentinel adaptor for use with std::move_iterator
   (C++20)            \fI(class template)\fP
