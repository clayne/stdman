.TH std::fdim,std::fdimf,std::fdiml 3 "2022.07.31" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::fdim,std::fdimf,std::fdiml \- std::fdim,std::fdimf,std::fdiml

.SH Synopsis
   Defined in header <cmath>
   float fdim ( float x, float y );                   \fB(1)\fP \fI(since C++11)\fP
                                                          (constexpr since C++23)
   float fdimf( float x, float y );                   \fB(2)\fP \fI(since C++11)\fP
                                                          (constexpr since C++23)
   double fdim ( double x, double y );                \fB(3)\fP \fI(since C++11)\fP
                                                          (constexpr since C++23)
   long double fdim ( long double x, long double y ); \fB(4)\fP \fI(since C++11)\fP
                                                          (constexpr since C++23)
   long double fdiml( long double x, long double y ); \fB(5)\fP \fI(since C++11)\fP
                                                          (constexpr since C++23)
   Promoted fdim ( Arithmetic1 x, Arithmetic2 y );    \fB(6)\fP \fI(since C++11)\fP
                                                          (constexpr since C++23)

   1-5) Returns the positive difference between x and y, that is, if x>y, returns x-y,
   otherwise (if xâ‰¤y), returns +0.
   6) A set of overloads or a function template for all combinations of arguments of
   arithmetic type not covered by (1-5). If any argument has integral type, it is cast
   to double. If any argument is long double, then the return type Promoted is also
   long double, otherwise the return type is always double.

.SH Parameters

   x, y - values of floating-point or integral types

.SH Return value

   If successful, returns the positive difference between x and y.

   If a range error due to overflow occurs, +HUGE_VAL, +HUGE_VALF, or +HUGE_VALL is
   returned.

   If a range error due to underflow occurs, the correct value (after rounding) is
   returned.

.SH Error handling

   Errors are reported as specified in math_errhandling.

   If the implementation supports IEEE floating-point arithmetic (IEC 60559),

     * If either argument is NaN, NaN is returned

.SH Notes

   Equivalent to std::fmax(x-y, 0), except for the NaN handling requirements.

.SH Example


// Run this code

 #include <iostream>
 #include <cmath>
 #include <cerrno>
 #include <cstring>
 #include <cfenv>
 #ifndef __GNUC__
 #pragma STDC FENV_ACCESS ON
 #endif
 int main()
 {
     std::cout << "fdim(4, 1) = " << std::fdim(4, 1)
               << " fdim(1, 4) = " << std::fdim(1, 4) << '\\n'
               << "fdim(4,-1) = " << std::fdim(4, -1)
               << " fdim(1,-4) = " << std::fdim(1, -4) << '\\n';
     // error handling
     errno = 0;
     std::feclearexcept(FE_ALL_EXCEPT);
     std::cout << "fdim(1e308, -1e308) = " << std::fdim(1e308, -1e308) << '\\n';
     if (errno == ERANGE)
         std::cout << "    errno == ERANGE: " << std::strerror(errno) << '\\n';
     if (std::fetestexcept(FE_OVERFLOW))
         std::cout << "    FE_OVERFLOW raised\\n";
 }

.SH Output:

 fdim(4, 1) = 3 fdim(1, 4) = 0
 fdim(4,-1) = 5 fdim(1,-4) = 5
 fdim(1e308, -1e308) = inf
     errno == ERANGE: Numerical result out of range
     FE_OVERFLOW raised

.SH See also

   abs(int)
   labs     computes absolute value of an integral value (\\(\\small{|x|}\\)|x|)
   llabs    \fI(function)\fP
   \fI(C++11)\fP
   fmax
   fmaxf
   fmaxl    larger of two floating-point values
   \fI(C++11)\fP  \fI(function)\fP
   \fI(C++11)\fP
   \fI(C++11)\fP
